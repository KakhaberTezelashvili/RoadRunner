using Microsoft.EntityFrameworkCore;

// This file contains a database context definition for models mapping to the T-DOC database.
// This file was generated by a tool. Only edit for local testing purposes.
namespace TDOC.EntityFramework.DbContext
{
    /// <summary>
    /// Database context.
    /// </summary>
    public class TDocEFDbContext : Microsoft.EntityFrameworkCore.DbContext
    {
        /// <summary>
        /// Entity collection for load queues (air glide systems) (TAGS)
        /// </summary>
        public DbSet<AGSModel> LoadQueues { get; set; }
        /// <summary>
        /// Entity collection for batches (TBATCH)
        /// </summary>
        public DbSet<BatchModel> Batches { get; set; }
        /// <summary>
        /// Entity collection for composite items (TCOMP)
        /// </summary>
        public DbSet<CompositeModel> CompositeItems { get; set; }
        /// <summary>
        /// Entity collection for customers (TCUST)
        /// </summary>
        public DbSet<CustomerModel> Customers { get; set; }
        /// <summary>
        /// Entity collection for customer users (TCUSTUSER)
        /// </summary>
        public DbSet<CustomerUsersModel> CustomerUsers { get; set; }
        /// <summary>
        /// Entity collection for desktop data (TDESKTOP)
        /// </summary>
        public DbSet<DesktopModel> DesktopData { get; set; }
        /// <summary>
        /// Entity collection for doctors (TDOCTOR)
        /// </summary>
        public DbSet<DoctorModel> Doctors { get; set; }
        /// <summary>
        /// Entity collection for events (TEVENT)
        /// </summary>
        public DbSet<EventModel> Events { get; set; }
        /// <summary>
        /// Entity collection for external documents reference infos (TEXTDOCREFINFO)
        /// </summary>
        public DbSet<ExtDocRefInfoModel> ExternalDocumentsReferenceInfos { get; set; }
        /// <summary>
        /// Entity collection for external documents reference links (TEXTDOCREFLINK)
        /// </summary>
        public DbSet<ExtDocRefLinkModel> ExternalDocumentsReferenceLinks { get; set; }
        /// <summary>
        /// Entity collection for external documents stores (TEXTDOCSTORE)
        /// </summary>
        public DbSet<ExtDocStoreModel> ExternalDocumentsStores { get; set; }
        /// <summary>
        /// Entity collection for factories (TFACTORY)
        /// </summary>
        public DbSet<FactoryModel> Factories { get; set; }
        /// <summary>
        /// Entity collection for factory customers (TFACCUST)
        /// </summary>
        public DbSet<FactoryCustomersModel> FactoryCustomers { get; set; }
        /// <summary>
        /// Entity collection for factory standard comment types (TFACSTDCOMMENT)
        /// </summary>
        public DbSet<FactoryStandardCommentModel> FactoryStandardCommentTypes { get; set; }
        /// <summary>
        /// Entity collection for factory users (TFACUSER)
        /// </summary>
        public DbSet<FactoryUsersModel> FactoryUsers { get; set; }
        /// <summary>
        /// Entity collection for fast track codes (TFASTTRACKCODE)
        /// </summary>
        public DbSet<FastTrackCodeModel> FastTrackCodes { get; set; }
        /// <summary>
        /// Entity collection for fast track plans (TFASTTRACKPLAN)
        /// </summary>
        public DbSet<FastTrackPlanModel> FastTrackPlans { get; set; }
        /// <summary>
        /// Entity collection for indicators (TINDICATOR)
        /// </summary>
        public DbSet<IndicatorModel> Indicators { get; set; }
        /// <summary>
        /// Entity collection for indicator LOT information (TINDICLOTINFO)
        /// </summary>
        public DbSet<IndicatorLotInfoModel> IndicatorLotInfo { get; set; }
        /// <summary>
        /// Entity collection for indicator to product links (TINDICPROD)
        /// </summary>
        public DbSet<IndicatorProductModel> IndicatorsToProducts { get; set; }
        /// <summary>
        /// Entity collection for indicator to program links (TINDICPROG)
        /// </summary>
        public DbSet<IndicatorProgramModel> IndicatorsToPrograms { get; set; }
        /// <summary>
        /// Entity collection for indicator types (TINDICATORTYPE)
        /// </summary>
        public DbSet<IndicatorTypeModel> IndicatorTypes { get; set; }
        /// <summary>
        /// Entity collection for indicator to unit links (TINDICUNIT)
        /// </summary>
        public DbSet<IndicatorUnitModel> IndicatorsToUnits { get; set; }
        /// <summary>
        /// Entity collection for info overview configurations (TINFOOVERVIEWCONFIG)
        /// </summary>
        public DbSet<InfoOverviewConfigModel> InfoOverviewConfigurations { get; set; }
        /// <summary>
        /// Entity collection for items (TITEM)
        /// </summary>
        public DbSet<ItemModel> Items { get; set; }
        /// <summary>
        /// Entity collection for item groups (TITEMGRP)
        /// </summary>
        public DbSet<ItemGroupModel> ItemGroups { get; set; }
        /// <summary>
        /// Entity collection for item specialties (TITEMSPC)
        /// </summary>
        public DbSet<ItemSpecialtyModel> ItemSpecialties { get; set; }
        /// <summary>
        /// Entity collection for license binding (TLICENSEBINDING)
        /// </summary>
        public DbSet<LicenseBindingModel> LicenseBinding { get; set; }
        /// <summary>
        /// Entity collection for locations (TLOCATIO)
        /// </summary>
        public DbSet<LocationModel> Locations { get; set; }
        /// <summary>
        /// Entity collection for LOT information (TLOTINFO)
        /// </summary>
        public DbSet<LotInfoModel> LotInfo { get; set; }
        /// <summary>
        /// Entity collection for machine display groups (TMACHDISPLAYGROUP)
        /// </summary>
        public DbSet<MachDisplayGroupModel> MachineDisplayGroups { get; set; }
        /// <summary>
        /// Entity collection for machine display group links (TMACHDISPLAYGROUPLINK)
        /// </summary>
        public DbSet<MachDisplayGroupLinkModel> MachineDisplayGroupsLinks { get; set; }
        /// <summary>
        /// Entity collection for machines (TMACHINE)
        /// </summary>
        public DbSet<MachineModel> Machines { get; set; }
        /// <summary>
        /// Entity collection for machine types (TMACHINT)
        /// </summary>
        public DbSet<MachineTypeModel> MachineTypes { get; set; }
        /// <summary>
        /// Entity collection for machine locations (TMACHLOCATION)
        /// </summary>
        public DbSet<MachLocationModel> MachineLocations { get; set; }
        /// <summary>
        /// Entity collection for MES task definitions (TMESTASKDEF)
        /// </summary>
        public DbSet<MesTaskDefModel> MesTaskDefinitions { get; set; }
        /// <summary>
        /// Entity collection for MES task locations (TMESTASKLOCATIONS)
        /// </summary>
        public DbSet<MesTaskLocationsModel> MesTaskLocations { get; set; }
        /// <summary>
        /// Entity collection for operation data (TOPDATA)
        /// </summary>
        public DbSet<OperationDataModel> OperationData { get; set; }
        /// <summary>
        /// Entity collection for operation types (TOPTYPE)
        /// </summary>
        public DbSet<OperationTypeModel> OperationTypes { get; set; }
        /// <summary>
        /// Entity collection for orders (TORDER)
        /// </summary>
        public DbSet<OrderModel> Orders { get; set; }
        /// <summary>
        /// Entity collection for order lines (TORDLN)
        /// </summary>
        public DbSet<OrderLineModel> OrderLines { get; set; }
        /// <summary>
        /// Entity collection for order line alternatives (TORDLNALTERNATIVE)
        /// </summary>
        public DbSet<OrderLineAlternativeModel> OrderLineAlternatives { get; set; }
        /// <summary>
        /// Entity collection for order LOT information (TORDLOTINFO)
        /// </summary>
        public DbSet<OrderLotInfoModel> OrderLotInfo { get; set; }
        /// <summary>
        /// Entity collection for order templates (TORDERTP)
        /// </summary>
        public DbSet<OrderTemplateModel> OrderTemplates { get; set; }
        /// <summary>
        /// Entity collection for patients (TPACKING)
        /// </summary>
        public DbSet<PackingModel> PackingMaterials { get; set; }
        /// <summary>
        /// Entity collection for patients (TPATIENT)
        /// </summary>
        public DbSet<PatientModel> Patients { get; set; }
        /// <summary>
        /// Entity collection for operation/patient consumption (TPATCONS)
        /// </summary>
        public DbSet<PatientConsModel> PatientConsumption { get; set; }
        /// <summary>
        /// Entity collection for operation/patient consumption LOT information (TPATCONSLOTINFO)
        /// </summary>
        public DbSet<PatientLotInfoModel> PatientConsumptionLotInfo { get; set; }
        /// <summary>
        /// Entity collection for pictures (media) (TPICS)
        /// </summary>
        public DbSet<PictureModel> Pictures { get; set; }
        /// <summary>
        /// Entity collection for pictures (media) series (TPICTREF)
        /// </summary>
        public DbSet<PictureRefModel> PictureSeries { get; set; }
        /// <summary>
        /// Entity collection for patient information privacy (PIP) audit log (TPIPAUDITLOG)
        /// </summary>
        public DbSet<PipAuditLogModel> PatientInformationPrivacyAuditLog { get; set; }
        /// <summary>
        /// Entity collection for positions (TPOSIT)
        /// </summary>
        public DbSet<PositionModel> Positions { get; set; }
        /// <summary>
        /// Entity collection for position locations (TPOSLOCA)
        /// </summary>
        public DbSet<PosLocationModel> PositionLocations { get; set; }
        /// <summary>
        /// Entity collection for patient information privacy (PIP) fields (TPIPFIELDS)
        /// </summary>
        public DbSet<PrivacyInfoProtectFldsModel> PatientInformationPrivacyFields { get; set; }
        /// <summary>
        /// Entity collection for machine processes (TPROCESS)
        /// </summary>
        public DbSet<ProcessModel> Processes { get; set; }
        /// <summary>
        /// Entity collection for products (TPRODUCT)
        /// </summary>
        public DbSet<ProductModel> Products { get; set; }
        /// <summary>
        /// Entity collection for product reservations (TPRODRESERVATION)
        /// </summary>
        public DbSet<ProductReservationModel> ProductReservations { get; set; }
        /// <summary>
        /// Entity collection for profiles (TPROFILE)
        /// </summary>
        public DbSet<ProfileModel> Profiles { get; set; }
        /// <summary>
        /// Entity collection for programs (TPROGRAM)
        /// </summary>
        public DbSet<ProgramModel> Programs { get; set; }
        /// <summary>
        /// Entity collection for program groups (TPROGGRP)
        /// </summary>
        public DbSet<ProgramGroupModel> ProgramGroups { get; set; }
        /// <summary>
        /// Entity collection for program group lines (TPRGGRPS)
        /// </summary>
        public DbSet<ProgramGroupsModel> ProgramGroupLines { get; set; }
        /// <summary>
        /// Entity collection for rooms (TROOM)
        /// </summary>
        public DbSet<RoomModel> Rooms { get; set; }
        /// <summary>
        /// Entity collection for serial numbers (TSERIAL)
        /// </summary>
        public DbSet<SerialModel> SerialNumbers { get; set; }
        /// <summary>
        /// Entity collection for standard comment types (TSTANDARDCOMMENT)
        /// </summary>
        public DbSet<StandardCommentModel> StandardCommentTypes { get; set; }
        /// <summary>
        /// Entity collection for standard comment links (TSTANDARDCOMMENTLINK)
        /// </summary>
        public DbSet<StandardCommentLinkModel> StandardCommentLinks { get; set; }
        /// <summary>
        /// Entity collection for stocks (TSTOCKS)
        /// </summary>
        public DbSet<StocksModel> Stocks { get; set; }
        /// <summary>
        /// Entity collection for suppliers (TSUPPLIE)
        /// </summary>
        public DbSet<SupplierModel> Suppliers { get; set; }
        /// <summary>
        /// Entity collection for system data (TSYSTEM)
        /// </summary>
        public DbSet<SystemModel> SystemData { get; set; }
        /// <summary>
        /// Entity collection for tag contents (TTAGCONTENT)
        /// </summary>
        public DbSet<TagContentModel> TagContents { get; set; }
        /// <summary>
        /// Entity collection for tags (TTAGS)
        /// </summary>
        public DbSet<TagsModel> Tags { get; set; }
        /// <summary>
        /// Entity collection for tag types (TTAGTYPE)
        /// </summary>
        public DbSet<TagTypeModel> TagTypes { get; set; }
        /// <summary>
        /// Entity collection for texts related to error code, control codes, etc. (TTEXT)
        /// </summary>
        public DbSet<TextModel> Text { get; set; }
        /// <summary>
        /// Entity collection for units (TUNIT)
        /// </summary>
        public DbSet<UnitModel> Units { get; set; }
        /// <summary>
        /// Entity collection for unit fast tracking (TUNITFASTTRACK)
        /// </summary>
        public DbSet<UnitFastTrackModel> UnitFastTracking { get; set; }
        /// <summary>
        /// Entity collection for unit fast track plan (TUNITFASTTRACKPLAN)
        /// </summary>
        public DbSet<UnitFastTrackPlanModel> UnitFastTrackPlan { get; set; }
        /// <summary>
        /// Entity collection for unit lists (TUNITLST)
        /// </summary>
        public DbSet<UnitListModel> UnitLists { get; set; }
        /// <summary>
        /// Entity collection for unit location (TUNITLCA)
        /// </summary>
        public DbSet<UnitLocationModel> UnitLocation { get; set; }
        /// <summary>
        /// Entity collection for unit LOT information (TUNITLOTINFO)
        /// </summary>
        public DbSet<UnitLotInfoModel> UnitLotInfo { get; set; }
        /// <summary>
        /// Entity collection for unit weight information (TUNITWEIGHTINFO)
        /// </summary>
        public DbSet<UnitWeightInfoModel> UnitWeightInfo { get; set; }
        /// <summary>
        /// Entity collection for users (TUSER)
        /// </summary>
        public DbSet<UserModel> Users { get; set; }
        /// <summary>
        /// Entity collection for user field definitions (TUSERFIELDDEFINITION)
        /// </summary>
        public DbSet<UserFieldDefModel> UserFieldDefinitions { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TDocEFDbContext"/> class.
        /// </summary>
        /// <param name="options">Options configured for the database context.</param>
        public TDocEFDbContext(DbContextOptions<TDocEFDbContext> options) : base(options)
        {
        }

        /// <summary>
        /// Configures the entity data model.
        /// </summary>
        /// <param name="modelBuilder">Model builder for the context.</param>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // AGS (TAGS)
            modelBuilder.Entity<AGSModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("AGSKEYID")
                );

            modelBuilder.Entity<AGSModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<AGSModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<AGSModel>()
                .HasOne(e => e.MasterQueue);

            // Batch (TBATCH)
            modelBuilder.Entity<BatchModel>()
                .HasKey(e => new { e.Unit, e.Type, e.Batch });

            modelBuilder.Entity<BatchModel>()
                .HasOne(e => e.BatchProcess);

            modelBuilder.Entity<BatchModel>()
                .HasOne(e => e.UnitUnit);

            // Composite (TCOMP)
            modelBuilder.Entity<CompositeModel>()
                .HasOne(e => e.AltRef);

            modelBuilder.Entity<CompositeModel>()
                .HasOne(e => e.CompItem);

            modelBuilder.Entity<CompositeModel>()
                .HasOne(e => e.RefItem);

            // Customer (TCUST)
            modelBuilder.Entity<CustomerModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("CUSTKEYID")
                );

            modelBuilder.Entity<CustomerModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<CustomerModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<CustomerModel>()
                .HasOne(e => e.DefStok);

            modelBuilder.Entity<CustomerModel>()
                .HasOne(e => e.InvoiceCust);

            modelBuilder.Entity<CustomerModel>()
                .HasOne(e => e.Fac);

            modelBuilder.Entity<CustomerModel>()
                .HasMany(e => e.InvoiceCustCustomerList)
                .WithOne(e => e.InvoiceCust)
            ;

            modelBuilder.Entity<CustomerModel>()
                .HasMany(e => e.CustCustomerUsersList)
                .WithOne(e => e.Cust)
            ;

            modelBuilder.Entity<CustomerModel>()
                .HasMany(e => e.CustExtDocRefLinkList)
                .WithOne(e => e.Cust)
            ;

            modelBuilder.Entity<CustomerModel>()
                .HasMany(e => e.CustOperationDataList)
                .WithOne(e => e.Cust)
            ;

            modelBuilder.Entity<CustomerModel>()
                .HasMany(e => e.OrgInvRefCustOrderList)
                .WithOne(e => e.OrgInvRefCust)
            ;

            modelBuilder.Entity<CustomerModel>()
                .HasMany(e => e.OrgRefCustOrderList)
                .WithOne(e => e.OrgRefCust)
            ;

            modelBuilder.Entity<CustomerModel>()
                .HasMany(e => e.SuppRefCustOrderList)
                .WithOne(e => e.SuppRefCust)
            ;

            modelBuilder.Entity<CustomerModel>()
                .HasMany(e => e.OrgRefCustOrderTemplateList)
                .WithOne(e => e.OrgRefCust)
            ;

            modelBuilder.Entity<CustomerModel>()
                .HasMany(e => e.CustProductList)
                .WithOne(e => e.Cust)
            ;

            modelBuilder.Entity<CustomerModel>()
                .HasMany(e => e.RefCustStocksList)
                .WithOne(e => e.RefCust)
            ;

            modelBuilder.Entity<CustomerModel>()
                .HasMany(e => e.CustUnitList)
                .WithOne(e => e.Cust)
            ;

            // CustomerUsers (TCUSTUSER)
            modelBuilder.Entity<CustomerUsersModel>()
                .HasKey(e => new { e.UserKeyId, e.CustKeyId });

            modelBuilder.Entity<CustomerUsersModel>()
                .HasOne(e => e.User);

            modelBuilder.Entity<CustomerUsersModel>()
                .HasOne(e => e.Cust);

            // Desktop (TDESKTOP)
            modelBuilder.Entity<DesktopModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("DESKKEYID")
                );

            modelBuilder.Entity<DesktopModel>()
                .HasOne(e => e.User);

            // Doctor (TDOCTOR)
            modelBuilder.Entity<DoctorModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("DOCTKEYID")
                );

            modelBuilder.Entity<DoctorModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<DoctorModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<DoctorModel>()
                .HasMany(e => e.DoctExtDocRefLinkList)
                .WithOne(e => e.Doct)
            ;

            // Event (TEVENT)
            modelBuilder.Entity<EventModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("EVNTKEYID")
                );

            modelBuilder.Entity<EventModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<EventModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<EventModel>()
                .HasOne(e => e.Plo);

            modelBuilder.Entity<EventModel>()
                .HasOne(e => e.RefItem);

            modelBuilder.Entity<EventModel>()
                .HasOne(e => e.RefMachine);

            modelBuilder.Entity<EventModel>()
                .HasOne(e => e.RefOperationData);

            modelBuilder.Entity<EventModel>()
                .HasOne(e => e.RefProcess);

            modelBuilder.Entity<EventModel>()
                .HasOne(e => e.RefProduct);

            modelBuilder.Entity<EventModel>()
                .HasOne(e => e.RefSerial);

            modelBuilder.Entity<EventModel>()
                .HasOne(e => e.RefUnit);

            modelBuilder.Entity<EventModel>()
                .HasOne(e => e.RefUser);

            modelBuilder.Entity<EventModel>()
                .HasOne(e => e.RefIndicator);

            // ExtDocRefInfo (TEXTDOCREFINFO)
            modelBuilder.Entity<ExtDocRefInfoModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("EDRIKEYID")
                );

            modelBuilder.Entity<ExtDocRefInfoModel>()
                .HasOne(e => e.EDS);

            // ExtDocRefLink (TEXTDOCREFLINK)
            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasKey(e => new { e.EDRIKeyId, e.Position });

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.EDRI);

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.Item);

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.Prod);

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.Seri);

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.Pack);

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.Cust);

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.Supp);

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.McTyp);

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.Mach);

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.Prog);

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.Opt);

            modelBuilder.Entity<ExtDocRefLinkModel>()
                .HasOne(e => e.Doct);

            // ExtDocStore (TEXTDOCSTORE)
            modelBuilder.Entity<ExtDocStoreModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("EDSKEYID")
                );

            // Factory (TFACTORY)
            modelBuilder.Entity<FactoryModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("FACKEYID")
                );

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.CrossRefVendor);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.DefItemStok);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.DefProductStok);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.TraceStok);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.TransitStok);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.Guestprof);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.EndoDefCab);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.FTPl);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.IndicPendingLoca);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.IndicDisappLoca);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.IndicApproveLoca);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.WebLoca);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.SBFTFTCo);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.DefMESResvStok);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.DefMESStok);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.SBFTEscFTCo);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.DefAdminLoca);

            modelBuilder.Entity<FactoryModel>()
                .HasOne(e => e.DefOrdSuppStok);

            modelBuilder.Entity<FactoryModel>()
                .HasMany(e => e.FacLocationList)
                .WithOne(e => e.Fac)
            ;

            modelBuilder.Entity<FactoryModel>()
                .HasMany(e => e.SuppFacOperationDataList)
                .WithOne(e => e.SuppFac)
            ;

            modelBuilder.Entity<FactoryModel>()
                .HasMany(e => e.OrgInvRefFacOrderList)
                .WithOne(e => e.OrgInvRefFac)
            ;

            modelBuilder.Entity<FactoryModel>()
                .HasMany(e => e.OrgRefFacOrderList)
                .WithOne(e => e.OrgRefFac)
            ;

            modelBuilder.Entity<FactoryModel>()
                .HasMany(e => e.SuppRefFacOrderList)
                .WithOne(e => e.SuppRefFac)
            ;

            modelBuilder.Entity<FactoryModel>()
                .HasMany(e => e.OrgRefFacOrderTemplateList)
                .WithOne(e => e.OrgRefFac)
            ;

            modelBuilder.Entity<FactoryModel>()
                .HasMany(e => e.SuppRefFacOrderTemplateList)
                .WithOne(e => e.SuppRefFac)
            ;

            modelBuilder.Entity<FactoryModel>()
                .HasMany(e => e.RefFacStocksList)
                .WithOne(e => e.RefFac)
            ;

            modelBuilder.Entity<FactoryModel>()
                .HasMany(e => e.FacUnitList)
                .WithOne(e => e.Fac)
            ;

            // FactoryCustomers (TFACCUST)
            modelBuilder.Entity<FactoryCustomersModel>()
                .HasKey(e => new { e.CustKeyId, e.FacKeyId });

            modelBuilder.Entity<FactoryCustomersModel>()
                .HasOne(e => e.Cust);

            modelBuilder.Entity<FactoryCustomersModel>()
                .HasOne(e => e.Fac);

            // FactoryStandardComment (TFACSTDCOMMENT)
            modelBuilder.Entity<FactoryStandardCommentModel>()
                .HasKey(e => new { e.StdComKeyId, e.FacKeyId });

            modelBuilder.Entity<FactoryStandardCommentModel>()
                .HasOne(e => e.Fac);

            modelBuilder.Entity<FactoryStandardCommentModel>()
                .HasOne(e => e.StdCom);

            // FactoryUsers (TFACUSER)
            modelBuilder.Entity<FactoryUsersModel>()
                .HasKey(e => new { e.UserKeyId, e.FacKeyId });

            modelBuilder.Entity<FactoryUsersModel>()
                .HasOne(e => e.User);

            modelBuilder.Entity<FactoryUsersModel>()
                .HasOne(e => e.Fac);

            // FastTrackCode (TFASTTRACKCODE)
            modelBuilder.Entity<FastTrackCodeModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("FTCOKEYID")
                );

            modelBuilder.Entity<FastTrackCodeModel>()
                .HasOne(e => e.InvoiceItem);

            modelBuilder.Entity<FastTrackCodeModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<FastTrackCodeModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<FastTrackCodeModel>()
                .HasMany(e => e.FTCoUnitFastTrackList)
                .WithOne(e => e.FTCo)
            ;

            // FastTrackPlan (TFASTTRACKPLAN)
            modelBuilder.Entity<FastTrackPlanModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("FTPLKEYID")
                );

            modelBuilder.Entity<FastTrackPlanModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<FastTrackPlanModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<FastTrackPlanModel>()
                .HasOne(e => e.InvoiceItem);

            modelBuilder.Entity<FastTrackPlanModel>()
                .HasMany(e => e.FTPlUnitFastTrackList)
                .WithOne(e => e.FTPl)
            ;

            // Indicator (TINDICATOR)
            modelBuilder.Entity<IndicatorModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("INDICINDICATOR")
                );

            modelBuilder.Entity<IndicatorModel>()
                .HasOne(e => e.InTyp);

            modelBuilder.Entity<IndicatorModel>()
                .HasOne(e => e.ProcBatchProcess);

            modelBuilder.Entity<IndicatorModel>()
                .HasOne(e => e.CBIIndicatorIndicator);

            modelBuilder.Entity<IndicatorModel>()
                .HasMany(e => e.RefIndicatorEventList)
                .WithOne(e => e.RefIndicator)
            ;

            modelBuilder.Entity<IndicatorModel>()
                .HasMany(e => e.IndicIndicatorIndicatorLotInfoList)
                .WithOne(e => e.IndicIndicatorIndicator)
            ;

            modelBuilder.Entity<IndicatorModel>()
                .HasMany(e => e.IndicIndicatorIndicatorUnitList)
                .WithOne(e => e.IndicIndicatorIndicator)
            ;

            modelBuilder.Entity<IndicatorModel>()
                .HasMany(e => e.IndicIndicatorTagContentList)
                .WithOne(e => e.IndicIndicatorIndicator)
            ;

            // IndicatorLotInfo (TINDICLOTINFO)
            modelBuilder.Entity<IndicatorLotInfoModel>()
                .HasKey(e => new { e.LotInKeyId, e.IndicIndicator });

            modelBuilder.Entity<IndicatorLotInfoModel>()
                .HasOne(e => e.LotIn);

            modelBuilder.Entity<IndicatorLotInfoModel>()
                .HasOne(e => e.IndicIndicatorIndicator);

            modelBuilder.Entity<IndicatorLotInfoModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<IndicatorLotInfoModel>()
                .HasOne(e => e.Loca);

            // IndicatorProduct (TINDICPROD)
            modelBuilder.Entity<IndicatorProductModel>()
                .HasKey(e => new { e.ProdKeyId, e.InTypKeyId });

            modelBuilder.Entity<IndicatorProductModel>()
                .HasOne(e => e.Prod);

            modelBuilder.Entity<IndicatorProductModel>()
                .HasOne(e => e.InTyp);

            // IndicatorProgram (TINDICPROG)
            modelBuilder.Entity<IndicatorProgramModel>()
                .HasKey(e => new { e.ProgKeyId, e.InTypKeyId });

            modelBuilder.Entity<IndicatorProgramModel>()
                .HasOne(e => e.Prog);

            modelBuilder.Entity<IndicatorProgramModel>()
                .HasOne(e => e.InTyp);

            // IndicatorType (TINDICATORTYPE)
            modelBuilder.Entity<IndicatorTypeModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("INTYPKEYID")
                );

            modelBuilder.Entity<IndicatorTypeModel>()
                .HasOne(e => e.Item);

            modelBuilder.Entity<IndicatorTypeModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<IndicatorTypeModel>()
                .HasOne(e => e.CreatedUser);

            // IndicatorUnit (TINDICUNIT)
            modelBuilder.Entity<IndicatorUnitModel>()
                .HasKey(e => new { e.UnitUnit, e.IndicIndicator });

            modelBuilder.Entity<IndicatorUnitModel>()
                .HasOne(e => e.UnitUnitUnit);

            modelBuilder.Entity<IndicatorUnitModel>()
                .HasOne(e => e.IndicIndicatorIndicator);

            // InfoOverviewConfig (TINFOOVERVIEWCONFIG)
            modelBuilder.Entity<InfoOverviewConfigModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("IOCKEYID")
                );

            modelBuilder.Entity<InfoOverviewConfigModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<InfoOverviewConfigModel>()
                .HasOne(e => e.ModifiedUser);

            // Item (TITEM)
            modelBuilder.Entity<ItemModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("ITEMKEYID")
                );

            modelBuilder.Entity<ItemModel>()
                .HasOne(e => e.ItGrp);

            modelBuilder.Entity<ItemModel>()
                .HasOne(e => e.Itspc);

            modelBuilder.Entity<ItemModel>()
                .HasOne(e => e.Manu);

            modelBuilder.Entity<ItemModel>()
                .HasOne(e => e.RepairVendor);

            modelBuilder.Entity<ItemModel>()
                .HasOne(e => e.Supp);

            modelBuilder.Entity<ItemModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<ItemModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<ItemModel>()
                .HasOne(e => e.Fac);

            modelBuilder.Entity<ItemModel>()
                .HasOne(e => e.TagT);

            modelBuilder.Entity<ItemModel>()
                .HasMany(e => e.CompItemCompositeList)
                .WithOne(e => e.CompItem)
            ;

            modelBuilder.Entity<ItemModel>()
                .HasMany(e => e.RefItemEventList)
                .WithOne(e => e.RefItem)
            ;

            modelBuilder.Entity<ItemModel>()
                .HasMany(e => e.ItemExtDocRefLinkList)
                .WithOne(e => e.Item)
            ;

            modelBuilder.Entity<ItemModel>()
                .HasMany(e => e.OrgAltItemOrderLineList)
                .WithOne(e => e.OrgAltItem)
            ;

            modelBuilder.Entity<ItemModel>()
                .HasMany(e => e.RefItemOrderLineList)
                .WithOne(e => e.RefItem)
            ;

            modelBuilder.Entity<ItemModel>()
                .HasMany(e => e.ItemOrderLineAlternativeList)
                .WithOne(e => e.Item)
            ;

            modelBuilder.Entity<ItemModel>()
                .HasMany(e => e.RefItemPatientConsList)
                .WithOne(e => e.RefItem)
            ;

            modelBuilder.Entity<ItemModel>()
                .HasMany(e => e.RefItemPictureRefList)
                .WithOne(e => e.RefItem)
            ;

            modelBuilder.Entity<ItemModel>()
                .HasMany(e => e.ItemProductList)
                .WithOne(e => e.Item)
            ;

            modelBuilder.Entity<ItemModel>()
                .HasMany(e => e.RefItemSerialList)
                .WithOne(e => e.RefItem)
            ;

            modelBuilder.Entity<ItemModel>()
                .HasMany(e => e.ItemTagContentList)
                .WithOne(e => e.Item)
            ;

            modelBuilder.Entity<ItemModel>()
                .HasMany(e => e.RefItemUnitListList)
                .WithOne(e => e.RefItem)
            ;

            // ItemGroup (TITEMGRP)
            modelBuilder.Entity<ItemGroupModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("ITGRPKEYID")
                );

            modelBuilder.Entity<ItemGroupModel>()
                .HasOne(e => e.Fac);

            // ItemSpecialty (TITEMSPC)
            modelBuilder.Entity<ItemSpecialtyModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("ITSPCKEYID")
                );

            modelBuilder.Entity<ItemSpecialtyModel>()
                .HasOne(e => e.Fac);

            modelBuilder.Entity<ItemSpecialtyModel>()
                .HasMany(e => e.ItspcItemList)
                .WithOne(e => e.Itspc)
            ;

            // LicenseBinding (TLICENSEBINDING)
            modelBuilder.Entity<LicenseBindingModel>()
                .HasKey(e => e.ConnectionId);

            // Location (TLOCATIO)
            modelBuilder.Entity<LocationModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("LOCAKEYID")
                );

            modelBuilder.Entity<LocationModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<LocationModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<LocationModel>()
                .HasOne(e => e.AutoStok);

            modelBuilder.Entity<LocationModel>()
                .HasOne(e => e.DefUser);

            modelBuilder.Entity<LocationModel>()
                .HasOne(e => e.Fac);

            modelBuilder.Entity<LocationModel>()
                .HasOne(e => e.Stok);

            modelBuilder.Entity<LocationModel>()
                .HasOne(e => e.MasterLoca);

            modelBuilder.Entity<LocationModel>()
                .HasMany(e => e.LocaExtDocRefLinkList)
                .WithOne(e => e.Loca)
            ;

            modelBuilder.Entity<LocationModel>()
                .HasMany(e => e.DestApproveLocaMachineList)
                .WithOne(e => e.DestApproveLoca)
            ;

            modelBuilder.Entity<LocationModel>()
                .HasMany(e => e.DestDisapproveLocaMachineList)
                .WithOne(e => e.DestDisapproveLoca)
            ;

            modelBuilder.Entity<LocationModel>()
                .HasMany(e => e.DestEndErrorLocaMachineList)
                .WithOne(e => e.DestEndErrorLoca)
            ;

            modelBuilder.Entity<LocationModel>()
                .HasMany(e => e.DestEndLocaMachineList)
                .WithOne(e => e.DestEndLoca)
            ;

            modelBuilder.Entity<LocationModel>()
                .HasMany(e => e.LocaMachLocationList)
                .WithOne(e => e.Loca)
            ;

            modelBuilder.Entity<LocationModel>()
                .HasMany(e => e.LocaMesTaskLocationsList)
                .WithOne(e => e.Loca)
            ;

            modelBuilder.Entity<LocationModel>()
                .HasMany(e => e.LocaPosLocationList)
                .WithOne(e => e.Loca)
            ;

            modelBuilder.Entity<LocationModel>()
                .HasMany(e => e.LocaTagsList)
                .WithOne(e => e.Loca)
            ;

            modelBuilder.Entity<LocationModel>()
                .HasMany(e => e.LocaUnitList)
                .WithOne(e => e.Loca)
            ;

            modelBuilder.Entity<LocationModel>()
                .HasMany(e => e.LocationUnitLocationList)
                .WithOne(e => e.Location)
            ;

            // LotInfo (TLOTINFO)
            modelBuilder.Entity<LotInfoModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("LOTINKEYID")
                );

            modelBuilder.Entity<LotInfoModel>()
                .HasOne(e => e.Item);

            modelBuilder.Entity<LotInfoModel>()
                .HasOne(e => e.Supp);

            modelBuilder.Entity<LotInfoModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<LotInfoModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<LotInfoModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<LotInfoModel>()
                .HasMany(e => e.LotInTagContentList)
                .WithOne(e => e.LotIn)
            ;

            // MachDisplayGroup (TMACHDISPLAYGROUP)
            modelBuilder.Entity<MachDisplayGroupModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("MCDGRPKEYID")
                );

            modelBuilder.Entity<MachDisplayGroupModel>()
                .HasOne(e => e.Parent);

            modelBuilder.Entity<MachDisplayGroupModel>()
                .HasOne(e => e.Fac);

            // MachDisplayGroupLink (TMACHDISPLAYGROUPLINK)
            modelBuilder.Entity<MachDisplayGroupLinkModel>()
                .HasKey(e => new { e.McDGrpKeyId, e.MachKeyId });

            modelBuilder.Entity<MachDisplayGroupLinkModel>()
                .HasOne(e => e.McDGrp);

            modelBuilder.Entity<MachDisplayGroupLinkModel>()
                .HasOne(e => e.Mach);

            // Machine (TMACHINE)
            modelBuilder.Entity<MachineModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("MACHKEYID")
                );

            modelBuilder.Entity<MachineModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<MachineModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<MachineModel>()
                .HasOne(e => e.Ags);

            modelBuilder.Entity<MachineModel>()
                .HasOne(e => e.McTyp);

            modelBuilder.Entity<MachineModel>()
                .HasOne(e => e.DefProg);

            modelBuilder.Entity<MachineModel>()
                .HasOne(e => e.DestApproveLoca);

            modelBuilder.Entity<MachineModel>()
                .HasOne(e => e.DestDisapproveLoca);

            modelBuilder.Entity<MachineModel>()
                .HasOne(e => e.DestEndErrorLoca);

            modelBuilder.Entity<MachineModel>()
                .HasOne(e => e.DestEndLoca);

            modelBuilder.Entity<MachineModel>()
                .HasMany(e => e.RefMachineEventList)
                .WithOne(e => e.RefMachine)
            ;

            modelBuilder.Entity<MachineModel>()
                .HasMany(e => e.MachExtDocRefLinkList)
                .WithOne(e => e.Mach)
            ;

            modelBuilder.Entity<MachineModel>()
                .HasMany(e => e.MachMachLocationList)
                .WithOne(e => e.Mach)
            ;

            modelBuilder.Entity<MachineModel>()
                .HasMany(e => e.RefMachPictureRefList)
                .WithOne(e => e.RefMach)
            ;

            modelBuilder.Entity<MachineModel>()
                .HasMany(e => e.MachProcessList)
                .WithOne(e => e.Mach)
            ;

            // MachineType (TMACHINT)
            modelBuilder.Entity<MachineTypeModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("MCTYPKEYID")
                );

            modelBuilder.Entity<MachineTypeModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<MachineTypeModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<MachineTypeModel>()
                .HasOne(e => e.Manu);

            modelBuilder.Entity<MachineTypeModel>()
                .HasOne(e => e.RepairVendor);

            modelBuilder.Entity<MachineTypeModel>()
                .HasOne(e => e.Supp);

            modelBuilder.Entity<MachineTypeModel>()
                .HasOne(e => e.DefProg);

            modelBuilder.Entity<MachineTypeModel>()
                .HasMany(e => e.McTypExtDocRefLinkList)
                .WithOne(e => e.McTyp)
            ;

            // MachLocation (TMACHLOCATION)
            modelBuilder.Entity<MachLocationModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<MachLocationModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<MachLocationModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<MachLocationModel>()
                .HasOne(e => e.Mach);

            // MesTaskDef (TMESTASKDEF)
            modelBuilder.Entity<MesTaskDefModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("MTDEFKEYID")
                );

            modelBuilder.Entity<MesTaskDefModel>()
                .HasOne(e => e.Fac);

            modelBuilder.Entity<MesTaskDefModel>()
                .HasOne(e => e.Mach);

            modelBuilder.Entity<MesTaskDefModel>()
                .HasMany(e => e.MtDefMesTaskLocationsList)
                .WithOne(e => e.MtDef)
            ;

            // MesTaskLocations (TMESTASKLOCATIONS)
            modelBuilder.Entity<MesTaskLocationsModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<MesTaskLocationsModel>()
                .HasOne(e => e.MtDef);

            // OperationData (TOPDATA)
            modelBuilder.Entity<OperationDataModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("OPDKEYID")
                );

            modelBuilder.Entity<OperationDataModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<OperationDataModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<OperationDataModel>()
                .HasOne(e => e.Cust);

            modelBuilder.Entity<OperationDataModel>()
                .HasOne(e => e.CustStok);

            modelBuilder.Entity<OperationDataModel>()
                .HasOne(e => e.Doct);

            modelBuilder.Entity<OperationDataModel>()
                .HasOne(e => e.Opt);

            modelBuilder.Entity<OperationDataModel>()
                .HasOne(e => e.Pat);

            modelBuilder.Entity<OperationDataModel>()
                .HasOne(e => e.Room);

            modelBuilder.Entity<OperationDataModel>()
                .HasOne(e => e.SuppFac);

            modelBuilder.Entity<OperationDataModel>()
                .HasMany(e => e.RefOperationDataEventList)
                .WithOne(e => e.RefOperationData)
            ;

            modelBuilder.Entity<OperationDataModel>()
                .HasMany(e => e.RefOpDOrderList)
                .WithOne(e => e.RefOpD)
            ;

            modelBuilder.Entity<OperationDataModel>()
                .HasMany(e => e.OpDPatientConsList)
                .WithOne(e => e.OpD)
            ;

            modelBuilder.Entity<OperationDataModel>()
                .HasMany(e => e.OpDUnitList)
                .WithOne(e => e.OpD)
            ;

            modelBuilder.Entity<OperationDataModel>()
                .HasMany(e => e.RefOpdUnitLocationList)
                .WithOne(e => e.RefOpd)
            ;

            // OperationType (TOPTYPE)
            modelBuilder.Entity<OperationTypeModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("OPTKEYID")
                );

            modelBuilder.Entity<OperationTypeModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<OperationTypeModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<OperationTypeModel>()
                .HasOne(e => e.Defcust);

            modelBuilder.Entity<OperationTypeModel>()
                .HasOne(e => e.Defcuststok);

            modelBuilder.Entity<OperationTypeModel>()
                .HasOne(e => e.Defroom);

            modelBuilder.Entity<OperationTypeModel>()
                .HasMany(e => e.OptExtDocRefLinkList)
                .WithOne(e => e.Opt)
            ;

            modelBuilder.Entity<OperationTypeModel>()
                .HasMany(e => e.OpTStocksList)
                .WithOne(e => e.OpT)
            ;

            // Order (TORDER)
            modelBuilder.Entity<OrderModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("ORDKEYID")
                );

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.OrgStok);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.OrgUser);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.SuppStok);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.SuppUser);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.TagTags);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.OrgRefCust);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.OrgRefFac);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.OrgRefSupp);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.OrgInvRefCust);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.OrgInvRefFac);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.OrgInvRefSupp);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.RefOpD);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.SuppRefCust);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.SuppRefFac);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.SuppRefSupp);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.OrdTp);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.SplitOrd);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.CreatedLoca);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.RefOpT);

            modelBuilder.Entity<OrderModel>()
                .HasOne(e => e.UnlockStok);

            modelBuilder.Entity<OrderModel>()
                .HasMany(e => e.SplitOrdOrderList)
                .WithOne(e => e.SplitOrd)
            ;

            modelBuilder.Entity<OrderModel>()
                .HasMany(e => e.OrdOrderLineList)
                .WithOne(e => e.Ord)
            ;

            modelBuilder.Entity<OrderModel>()
                .HasMany(e => e.SuppLaterOrdOrderLineList)
                .WithOne(e => e.SuppLaterOrd)
            ;

            modelBuilder.Entity<OrderModel>()
                .HasMany(e => e.OrdOrderLotInfoList)
                .WithOne(e => e.Ord)
            ;

            modelBuilder.Entity<OrderModel>()
                .HasMany(e => e.OrdPatientConsList)
                .WithOne(e => e.Ord)
            ;

            modelBuilder.Entity<OrderModel>()
                .HasMany(e => e.OrdProductReservationList)
                .WithOne(e => e.Ord)
            ;

            modelBuilder.Entity<OrderModel>()
                .HasMany(e => e.RefOrdUnitLocationList)
                .WithOne(e => e.RefOrd)
            ;

            // OrderLine (TORDLN)
            modelBuilder.Entity<OrderLineModel>()
                .HasOne(e => e.Ord);

            modelBuilder.Entity<OrderLineModel>()
                .HasOne(e => e.SuppLaterOrd);

            modelBuilder.Entity<OrderLineModel>()
                .HasOne(e => e.RefItem);

            modelBuilder.Entity<OrderLineModel>()
                .HasOne(e => e.RefProd);

            modelBuilder.Entity<OrderLineModel>()
                .HasOne(e => e.RefSeri);

            modelBuilder.Entity<OrderLineModel>()
                .HasOne(e => e.ParentKeyOrderLine);

            modelBuilder.Entity<OrderLineModel>()
                .HasOne(e => e.OrgAltItem);

            modelBuilder.Entity<OrderLineModel>()
                .HasOne(e => e.OrgAltProd);

            modelBuilder.Entity<OrderLineModel>()
                .HasMany(e => e.ParentKeyOrderLineList)
                .WithOne(e => e.ParentKeyOrderLine)
            ;

            modelBuilder.Entity<OrderLineModel>()
                .HasMany(e => e.OLnKeyOrderLineAlternativeList)
                .WithOne(e => e.OLnKeyOrderLine)
            ;

            modelBuilder.Entity<OrderLineModel>()
                .HasMany(e => e.OLnKeyOrderLotInfoList)
                .WithOne(e => e.OLnKeyOrderLine)
            ;

            modelBuilder.Entity<OrderLineModel>()
                .HasMany(e => e.OLnKeyTagContentList)
                .WithOne(e => e.OLnKeyOrderLine)
            ;

            // OrderLineAlternative (TORDLNALTERNATIVE)
            modelBuilder.Entity<OrderLineAlternativeModel>()
                .HasOne(e => e.Item);

            modelBuilder.Entity<OrderLineAlternativeModel>()
                .HasOne(e => e.OLnKeyOrderLine);

            modelBuilder.Entity<OrderLineAlternativeModel>()
                .HasOne(e => e.Prod);

            // OrderLotInfo (TORDLOTINFO)
            modelBuilder.Entity<OrderLotInfoModel>()
                .HasKey(e => new { e.LotInKeyId, e.OrdKeyId, e.OLnLine, e.Created, e.LocaKeyId });

            modelBuilder.Entity<OrderLotInfoModel>()
                .HasOne(e => e.LotIn);

            modelBuilder.Entity<OrderLotInfoModel>()
                .HasOne(e => e.Ord);

            modelBuilder.Entity<OrderLotInfoModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<OrderLotInfoModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<OrderLotInfoModel>()
                .HasOne(e => e.OLnKeyOrderLine);

            // OrderTemplate (TORDERTP)
            modelBuilder.Entity<OrderTemplateModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("ORDTPKEYID")
                );

            modelBuilder.Entity<OrderTemplateModel>()
                .HasOne(e => e.OrgStok);

            modelBuilder.Entity<OrderTemplateModel>()
                .HasOne(e => e.SuppStok);

            modelBuilder.Entity<OrderTemplateModel>()
                .HasOne(e => e.OrgRefCust);

            modelBuilder.Entity<OrderTemplateModel>()
                .HasOne(e => e.OrgRefFac);

            modelBuilder.Entity<OrderTemplateModel>()
                .HasOne(e => e.OrgRefSupp);

            modelBuilder.Entity<OrderTemplateModel>()
                .HasOne(e => e.SuppRefFac);

            modelBuilder.Entity<OrderTemplateModel>()
                .HasOne(e => e.SuppRefSupp);

            modelBuilder.Entity<OrderTemplateModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<OrderTemplateModel>()
                .HasOne(e => e.ModifiedUser);

            // Packing (TPACKING)
            modelBuilder.Entity<PackingModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("PACKKEYID")
                );

            modelBuilder.Entity<PackingModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<PackingModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<PackingModel>()
                .HasOne(e => e.Item);

            modelBuilder.Entity<PackingModel>()
                .HasOne(e => e.Fac);

            modelBuilder.Entity<PackingModel>()
                .HasOne(e => e.TagT);

            modelBuilder.Entity<PackingModel>()
                .HasMany(e => e.PackExtDocRefLinkList)
                .WithOne(e => e.Pack)
            ;

            modelBuilder.Entity<PackingModel>()
                .HasMany(e => e.PackProductList)
                .WithOne(e => e.Pack)
            ;

            // Patient (TPATIENT)
            modelBuilder.Entity<PatientModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("PATKEYID")
                );

            modelBuilder.Entity<PatientModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<PatientModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<PatientModel>()
                .HasMany(e => e.PatOperationDataList)
                .WithOne(e => e.Pat)
            ;

            modelBuilder.Entity<PatientModel>()
                .HasMany(e => e.PatPatientConsList)
                .WithOne(e => e.Pat)
            ;

            // PatientCons (TPATCONS)
            modelBuilder.Entity<PatientConsModel>()
                .HasKey(e => e.AutoInc);

            modelBuilder.Entity<PatientConsModel>()
                .HasOne(e => e.EndUser);

            modelBuilder.Entity<PatientConsModel>()
                .HasOne(e => e.Pat);

            modelBuilder.Entity<PatientConsModel>()
                .HasOne(e => e.StartUser);

            modelBuilder.Entity<PatientConsModel>()
                .HasOne(e => e.RefItem);

            modelBuilder.Entity<PatientConsModel>()
                .HasOne(e => e.RefSeri);

            modelBuilder.Entity<PatientConsModel>()
                .HasOne(e => e.RefUnitUnitUnit);

            modelBuilder.Entity<PatientConsModel>()
                .HasOne(e => e.OpD);

            modelBuilder.Entity<PatientConsModel>()
                .HasOne(e => e.Ord);

            modelBuilder.Entity<PatientConsModel>()
                .HasOne(e => e.Loca);

            // PatientLotInfo (TPATCONSLOTINFO)
            modelBuilder.Entity<PatientLotInfoModel>()
                .HasKey(e => new { e.LotInKeyId, e.PatCoAutoInc });

            modelBuilder.Entity<PatientLotInfoModel>()
                .HasOne(e => e.LotIn);

            modelBuilder.Entity<PatientLotInfoModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<PatientLotInfoModel>()
                .HasOne(e => e.Loca);

            // Picture (TPICS)
            modelBuilder.Entity<PictureModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("PICSKEYID")
                );

            modelBuilder.Entity<PictureModel>()
                .HasMany(e => e.PicsPictureRefList)
                .WithOne(e => e.Pics)
            ;

            modelBuilder.Entity<PictureModel>()
                .HasMany(e => e.TipPicsPictureRefList)
                .WithOne(e => e.TipPics)
            ;

            // PictureRef (TPICTREF)
            modelBuilder.Entity<PictureRefModel>()
                .HasKey(e => new { e.RefItemKeyId, e.RefProdKeyId, e.RefUserKeyId, e.RefCatKeyId, e.RefMachKeyId, e.RefUnitUnit, e.ReftrigKeyId, e.RefseriKeyId, e.Series, e.No });

            modelBuilder.Entity<PictureRefModel>()
                .HasOne(e => e.Pics);

            modelBuilder.Entity<PictureRefModel>()
                .HasOne(e => e.TipPics);

            modelBuilder.Entity<PictureRefModel>()
                .HasOne(e => e.RefItem);

            modelBuilder.Entity<PictureRefModel>()
                .HasOne(e => e.RefProd);

            modelBuilder.Entity<PictureRefModel>()
                .HasOne(e => e.RefUser);

            modelBuilder.Entity<PictureRefModel>()
                .HasOne(e => e.RefMach);

            modelBuilder.Entity<PictureRefModel>()
                .HasOne(e => e.RefUnitUnitUnit);

            modelBuilder.Entity<PictureRefModel>()
                .HasOne(e => e.Refseri);

            // PipAuditLog (TPIPAUDITLOG)
            modelBuilder.Entity<PipAuditLogModel>()
                .HasOne(e => e.User);

            modelBuilder.Entity<PipAuditLogModel>()
                .HasOne(e => e.RefUser);

            modelBuilder.Entity<PipAuditLogModel>()
                .HasOne(e => e.Prof);

            modelBuilder.Entity<PipAuditLogModel>()
                .HasOne(e => e.Pat);

            modelBuilder.Entity<PipAuditLogModel>()
                .HasOne(e => e.Opd);

            modelBuilder.Entity<PipAuditLogModel>()
                .HasOne(e => e.Loca);

            // Position (TPOSIT)
            modelBuilder.Entity<PositionModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("POSKEYID")
                );

            modelBuilder.Entity<PositionModel>()
                .HasMany(e => e.PosPosLocationList)
                .WithOne(e => e.Pos)
            ;

            // PosLocation (TPOSLOCA)
            modelBuilder.Entity<PosLocationModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("PLOKEYID")
                );

            modelBuilder.Entity<PosLocationModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<PosLocationModel>()
                .HasOne(e => e.Pos);

            // PrivacyInfoProtectFlds (TPIPFIELDS)
            modelBuilder.Entity<PrivacyInfoProtectFldsModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("PIPFLDAUTOINC")
                );

            // Process (TPROCESS)
            modelBuilder.Entity<ProcessModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateProcessKeyIdGenerator("PROCBATCH")
                );

            modelBuilder.Entity<ProcessModel>()
                .HasOne(e => e.ApproveUser);

            modelBuilder.Entity<ProcessModel>()
                .HasOne(e => e.DisapproveUser);

            modelBuilder.Entity<ProcessModel>()
                .HasOne(e => e.InitiatorUser);

            modelBuilder.Entity<ProcessModel>()
                .HasOne(e => e.Mach);

            modelBuilder.Entity<ProcessModel>()
                .HasOne(e => e.Prog);

            modelBuilder.Entity<ProcessModel>()
                .HasOne(e => e.ScanRefProg);

            modelBuilder.Entity<ProcessModel>()
                .HasOne(e => e.SecondApproveUser);

            modelBuilder.Entity<ProcessModel>()
                .HasMany(e => e.BatchBatchList)
                .WithOne(e => e.BatchProcess)
            ;

            modelBuilder.Entity<ProcessModel>()
                .HasMany(e => e.RefProcessEventList)
                .WithOne(e => e.RefProcess)
            ;

            modelBuilder.Entity<ProcessModel>()
                .HasMany(e => e.ProcBatchIndicatorList)
                .WithOne(e => e.ProcBatchProcess)
            ;

            modelBuilder.Entity<ProcessModel>()
                .HasMany(e => e.BatchUnitList)
                .WithOne(e => e.BatchProcess)
            ;

            modelBuilder.Entity<ProcessModel>()
                .HasMany(e => e.RefProcBatchUnitLocationList)
                .WithOne(e => e.RefProcBatchProcess)
            ;

            // Product (TPRODUCT)
            modelBuilder.Entity<ProductModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("PRODKEYID")
                );

            modelBuilder.Entity<ProductModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<ProductModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<ProductModel>()
                .HasOne(e => e.Cust);

            modelBuilder.Entity<ProductModel>()
                .HasOne(e => e.Item);

            modelBuilder.Entity<ProductModel>()
                .HasOne(e => e.Pack);

            modelBuilder.Entity<ProductModel>()
                .HasOne(e => e.SteriPrgr);

            modelBuilder.Entity<ProductModel>()
                .HasOne(e => e.WashPrgr);

            modelBuilder.Entity<ProductModel>()
                .HasOne(e => e.EndoWashPrGr);

            modelBuilder.Entity<ProductModel>()
                .HasOne(e => e.Fac);

            modelBuilder.Entity<ProductModel>()
                .HasOne(e => e.FTCo);

            modelBuilder.Entity<ProductModel>()
                .HasOne(e => e.FTPl);

            modelBuilder.Entity<ProductModel>()
                .HasMany(e => e.RefProductEventList)
                .WithOne(e => e.RefProduct)
            ;

            modelBuilder.Entity<ProductModel>()
                .HasMany(e => e.ProdExtDocRefLinkList)
                .WithOne(e => e.Prod)
            ;

            modelBuilder.Entity<ProductModel>()
                .HasMany(e => e.RefProdOrderLineList)
                .WithOne(e => e.RefProd)
            ;

            modelBuilder.Entity<ProductModel>()
                .HasMany(e => e.ProdOrderLineAlternativeList)
                .WithOne(e => e.Prod)
            ;

            modelBuilder.Entity<ProductModel>()
                .HasMany(e => e.RefProdPictureRefList)
                .WithOne(e => e.RefProd)
            ;

            modelBuilder.Entity<ProductModel>()
                .HasMany(e => e.ProdProductReservationList)
                .WithOne(e => e.Prod)
            ;

            modelBuilder.Entity<ProductModel>()
                .HasMany(e => e.RefProdSerialList)
                .WithOne(e => e.RefProd)
            ;

            modelBuilder.Entity<ProductModel>()
                .HasMany(e => e.ProdUnitList)
                .WithOne(e => e.Prod)
            ;

            // ProductReservation (TPRODRESERVATION)
            modelBuilder.Entity<ProductReservationModel>()
                .HasOne(e => e.Ord);

            modelBuilder.Entity<ProductReservationModel>()
                .HasOne(e => e.Prod);

            modelBuilder.Entity<ProductReservationModel>()
                .HasOne(e => e.Seri);

            // Profile (TPROFILE)
            modelBuilder.Entity<ProfileModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("PROFKEYID")
                );

            modelBuilder.Entity<ProfileModel>()
                .HasOne(e => e.Ancestor);

            modelBuilder.Entity<ProfileModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<ProfileModel>()
                .HasOne(e => e.ModifiedUser);

            // Program (TPROGRAM)
            modelBuilder.Entity<ProgramModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("PROGKEYID")
                );

            modelBuilder.Entity<ProgramModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<ProgramModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<ProgramModel>()
                .HasOne(e => e.McTyp);

            modelBuilder.Entity<ProgramModel>()
                .HasMany(e => e.ProgExtDocRefLinkList)
                .WithOne(e => e.Prog)
            ;

            modelBuilder.Entity<ProgramModel>()
                .HasMany(e => e.DefProgMachineList)
                .WithOne(e => e.DefProg)
            ;

            modelBuilder.Entity<ProgramModel>()
                .HasMany(e => e.DefProgMachineTypeList)
                .WithOne(e => e.DefProg)
            ;

            modelBuilder.Entity<ProgramModel>()
                .HasMany(e => e.RefProgSerialList)
                .WithOne(e => e.RefProg)
            ;

            // ProgramGroup (TPROGGRP)
            modelBuilder.Entity<ProgramGroupModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("PRGRKEYID")
                );

            modelBuilder.Entity<ProgramGroupModel>()
                .HasMany(e => e.PrgrProgramGroupsList)
                .WithOne(e => e.Prgr)
            ;

            // ProgramGroups (TPRGGRPS)
            modelBuilder.Entity<ProgramGroupsModel>()
                .HasKey(e => new { e.PrgrKeyId, e.Position });

            modelBuilder.Entity<ProgramGroupsModel>()
                .HasOne(e => e.Prgr);

            modelBuilder.Entity<ProgramGroupsModel>()
                .HasOne(e => e.Prog);

            // Room (TROOM)
            modelBuilder.Entity<RoomModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("ROOMKEYID")
                );

            modelBuilder.Entity<RoomModel>()
                .HasOne(e => e.Stok);

            modelBuilder.Entity<RoomModel>()
                .HasMany(e => e.RoomOperationDataList)
                .WithOne(e => e.Room)
            ;

            // Serial (TSERIAL)
            modelBuilder.Entity<SerialModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("SERIKEYID")
                );

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.Pack);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.Stok);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.Supp);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.RefItem);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.RefProd);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.OwnerCust);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.OwnerFac);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.OwnerSupp);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.UnitUnitUnit);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.RefProg);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.FTCo);

            modelBuilder.Entity<SerialModel>()
                .HasOne(e => e.FTPl);

            modelBuilder.Entity<SerialModel>()
                .HasMany(e => e.RefSerialEventList)
                .WithOne(e => e.RefSerial)
            ;

            modelBuilder.Entity<SerialModel>()
                .HasMany(e => e.SeriExtDocRefLinkList)
                .WithOne(e => e.Seri)
            ;

            modelBuilder.Entity<SerialModel>()
                .HasMany(e => e.RefSeriPatientConsList)
                .WithOne(e => e.RefSeri)
            ;

            modelBuilder.Entity<SerialModel>()
                .HasMany(e => e.RefseriPictureRefList)
                .WithOne(e => e.Refseri)
            ;

            modelBuilder.Entity<SerialModel>()
                .HasMany(e => e.SeriProductReservationList)
                .WithOne(e => e.Seri)
            ;

            modelBuilder.Entity<SerialModel>()
                .HasMany(e => e.SeriTagContentList)
                .WithOne(e => e.Seri)
            ;

            modelBuilder.Entity<SerialModel>()
                .HasMany(e => e.RefSeriUnitListList)
                .WithOne(e => e.RefSeri)
            ;

            // StandardComment (TSTANDARDCOMMENT)
            modelBuilder.Entity<StandardCommentModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("STDCOMKEYID")
                );

            modelBuilder.Entity<StandardCommentModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<StandardCommentModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<StandardCommentModel>()
                .HasOne(e => e.Fac);

            // StandardCommentLink (TSTANDARDCOMMENTLINK)
            modelBuilder.Entity<StandardCommentLinkModel>()
                .HasOne(e => e.AckUser);

            modelBuilder.Entity<StandardCommentLinkModel>()
                .HasOne(e => e.StdCom);

            modelBuilder.Entity<StandardCommentLinkModel>()
                .HasOne(e => e.UnitUnitUnit);

            modelBuilder.Entity<StandardCommentLinkModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<StandardCommentLinkModel>()
                .HasOne(e => e.User);

            // Stocks (TSTOCKS)
            modelBuilder.Entity<StocksModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("STOKKEYID")
                );

            modelBuilder.Entity<StocksModel>()
                .HasOne(e => e.Fac);

            modelBuilder.Entity<StocksModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<StocksModel>()
                .HasOne(e => e.RefCust);

            modelBuilder.Entity<StocksModel>()
                .HasOne(e => e.RefFac);

            modelBuilder.Entity<StocksModel>()
                .HasOne(e => e.RefSupp);

            modelBuilder.Entity<StocksModel>()
                .HasOne(e => e.SuppRefFac);

            modelBuilder.Entity<StocksModel>()
                .HasOne(e => e.SuppRefSupp);

            modelBuilder.Entity<StocksModel>()
                .HasOne(e => e.OpT);

            modelBuilder.Entity<StocksModel>()
                .HasMany(e => e.SuppStokOrderList)
                .WithOne(e => e.SuppStok)
            ;

            modelBuilder.Entity<StocksModel>()
                .HasMany(e => e.StokTagsList)
                .WithOne(e => e.Stok)
            ;

            modelBuilder.Entity<StocksModel>()
                .HasMany(e => e.StokUnitList)
                .WithOne(e => e.Stok)
            ;

            modelBuilder.Entity<StocksModel>()
                .HasMany(e => e.RefStocksUnitLocationList)
                .WithOne(e => e.RefStocks)
            ;

            // Supplier (TSUPPLIE)
            modelBuilder.Entity<SupplierModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("SUPPKEYID")
                );

            modelBuilder.Entity<SupplierModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<SupplierModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<SupplierModel>()
                .HasOne(e => e.RepairVendor);

            modelBuilder.Entity<SupplierModel>()
                .HasOne(e => e.Fac);

            modelBuilder.Entity<SupplierModel>()
                .HasMany(e => e.SuppExtDocRefLinkList)
                .WithOne(e => e.Supp)
            ;

            modelBuilder.Entity<SupplierModel>()
                .HasMany(e => e.OrgInvRefSuppOrderList)
                .WithOne(e => e.OrgInvRefSupp)
            ;

            modelBuilder.Entity<SupplierModel>()
                .HasMany(e => e.OrgRefSuppOrderList)
                .WithOne(e => e.OrgRefSupp)
            ;

            modelBuilder.Entity<SupplierModel>()
                .HasMany(e => e.SuppRefSuppOrderList)
                .WithOne(e => e.SuppRefSupp)
            ;

            modelBuilder.Entity<SupplierModel>()
                .HasMany(e => e.OrgRefSuppOrderTemplateList)
                .WithOne(e => e.OrgRefSupp)
            ;

            modelBuilder.Entity<SupplierModel>()
                .HasMany(e => e.SuppRefSuppOrderTemplateList)
                .WithOne(e => e.SuppRefSupp)
            ;

            modelBuilder.Entity<SupplierModel>()
                .HasMany(e => e.RefSuppStocksList)
                .WithOne(e => e.RefSupp)
            ;

            // System (TSYSTEM)
            modelBuilder.Entity<SystemModel>()
                .HasKey(e => e.AllowGEPassword);

            modelBuilder.Entity<SystemModel>()
                .HasOne(e => e.DefDoct);

            modelBuilder.Entity<SystemModel>()
                .HasOne(e => e.DefAss1Doct);

            modelBuilder.Entity<SystemModel>()
                .HasOne(e => e.DefAss2Doct);

            modelBuilder.Entity<SystemModel>()
                .HasOne(e => e.DefAss3Doct);

            modelBuilder.Entity<SystemModel>()
                .HasOne(e => e.DefAss4Doct);

            modelBuilder.Entity<SystemModel>()
                .HasOne(e => e.DefAss5Doct);

            modelBuilder.Entity<SystemModel>()
                .HasOne(e => e.DefRoom);

            modelBuilder.Entity<SystemModel>()
                .HasOne(e => e.MesSenderIdUser);

            // TagContent (TTAGCONTENT)
            modelBuilder.Entity<TagContentModel>()
                .HasKey(e => e.AutoInc);

            modelBuilder.Entity<TagContentModel>()
                .HasOne(e => e.Tags);

            modelBuilder.Entity<TagContentModel>()
                .HasOne(e => e.UnitUnitUnit);

            modelBuilder.Entity<TagContentModel>()
                .HasOne(e => e.ChildTags);

            modelBuilder.Entity<TagContentModel>()
                .HasOne(e => e.IndicIndicatorIndicator);

            modelBuilder.Entity<TagContentModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<TagContentModel>()
                .HasOne(e => e.SplitUnitUnit);

            modelBuilder.Entity<TagContentModel>()
                .HasOne(e => e.Item);

            modelBuilder.Entity<TagContentModel>()
                .HasOne(e => e.LotIn);

            modelBuilder.Entity<TagContentModel>()
                .HasOne(e => e.Seri);

            modelBuilder.Entity<TagContentModel>()
                .HasOne(e => e.OLnKeyOrderLine);

            // Tags (TTAGS)
            modelBuilder.Entity<TagsModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("TAGSKEYID")
                );

            modelBuilder.Entity<TagsModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<TagsModel>()
                .HasOne(e => e.ProcBatchProcess);

            modelBuilder.Entity<TagsModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<TagsModel>()
                .HasOne(e => e.Stok);

            modelBuilder.Entity<TagsModel>()
                .HasOne(e => e.TagT);

            modelBuilder.Entity<TagsModel>()
                .HasMany(e => e.TagOrderList)
                .WithOne(e => e.TagTags)
            ;

            modelBuilder.Entity<TagsModel>()
                .HasMany(e => e.ChildTagsTagContentList)
                .WithOne(e => e.ChildTags)
            ;

            modelBuilder.Entity<TagsModel>()
                .HasMany(e => e.TagsTagContentList)
                .WithOne(e => e.Tags)
            ;

            // TagType (TTAGTYPE)
            modelBuilder.Entity<TagTypeModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("TAGTKEYID")
                );

            modelBuilder.Entity<TagTypeModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<TagTypeModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<TagTypeModel>()
                .HasOne(e => e.Supp);

            modelBuilder.Entity<TagTypeModel>()
                .HasMany(e => e.TagTTagsList)
                .WithOne(e => e.TagT)
            ;

            // Text (TTEXT)
            modelBuilder.Entity<TextModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("TEXTKEYID")
                );

            modelBuilder.Entity<TextModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<TextModel>()
                .HasOne(e => e.ModifiedUser);

            // Unit (TUNIT)
            modelBuilder.Entity<UnitModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateUnitKeyIdGenerator("UNITKEYID")
                );

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.BasketTags);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.BatchProcess);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.Cust);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.Fac);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.NextUnitUnit);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.OpD);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.PackUser);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.PrevUnitUnit);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.Prod);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.Room);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.Seri);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.Stok);

            modelBuilder.Entity<UnitModel>()
                .HasOne(e => e.DryingStok);

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.UnitBatchList)
                .WithOne(e => e.UnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.RefUnitEventList)
                .WithOne(e => e.RefUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.UnitUnitIndicatorUnitList)
                .WithOne(e => e.UnitUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.RefUnitUnitPatientConsList)
                .WithOne(e => e.RefUnitUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.RefUnitUnitPictureRefList)
                .WithOne(e => e.RefUnitUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.UnitUnitSerialList)
                .WithOne(e => e.UnitUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.UnitUnitStandardCommentLinkList)
                .WithOne(e => e.UnitUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.SplitUnitTagContentList)
                .WithOne(e => e.SplitUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.UnitUnitTagContentList)
                .WithOne(e => e.UnitUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.NextUnitUnitList)
                .WithOne(e => e.NextUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.PrevUnitUnitList)
                .WithOne(e => e.PrevUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.PrevUnitUnitFastTrackList)
                .WithOne(e => e.PrevUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.UnitUnitUnitFastTrackList)
                .WithOne(e => e.UnitUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.UnitUnitUnitFastTrackPlanList)
                .WithOne(e => e.UnitUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.RefUnitUnitLocationList)
                .WithOne(e => e.RefUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.UnitUnitUnitLotInfoList)
                .WithOne(e => e.UnitUnitUnit)
            ;

            modelBuilder.Entity<UnitModel>()
                .HasMany(e => e.UnitUnitListList)
                .WithOne(e => e.UnitUnit)
            ;

            // UnitFastTrack (TUNITFASTTRACK)
            modelBuilder.Entity<UnitFastTrackModel>()
                .HasKey(e => e.AutoInc);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.UnitUnitUnit);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.FTCo);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.FTPl);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.CreatorUser);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.CreatorFac);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.CreatorCust);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.CreatorLoca);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.InvoiceFac);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.InvoiceCust);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.InvoiceItem);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.EndUser);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.PrevUnitUnit);

            modelBuilder.Entity<UnitFastTrackModel>()
                .HasOne(e => e.LastUnitLoca);

            // UnitFastTrackPlan (TUNITFASTTRACKPLAN)
            modelBuilder.Entity<UnitFastTrackPlanModel>()
                .HasKey(e => e.AutoInc);

            modelBuilder.Entity<UnitFastTrackPlanModel>()
                .HasOne(e => e.UnitUnitUnit);

            modelBuilder.Entity<UnitFastTrackPlanModel>()
                .HasOne(e => e.FtPl);

            modelBuilder.Entity<UnitFastTrackPlanModel>()
                .HasOne(e => e.StartLoca);

            modelBuilder.Entity<UnitFastTrackPlanModel>()
                .HasOne(e => e.EndLoca);

            // UnitList (TUNITLST)
            modelBuilder.Entity<UnitListModel>()
                .HasOne(e => e.UnitUnit);

            modelBuilder.Entity<UnitListModel>()
                .HasOne(e => e.RefItem);

            modelBuilder.Entity<UnitListModel>()
                .HasOne(e => e.RefSeri);

            modelBuilder.Entity<UnitListModel>()
                .HasOne(e => e.RefAltItem);

            modelBuilder.Entity<UnitListModel>()
                .HasOne(e => e.Loca);

            modelBuilder.Entity<UnitListModel>()
                .HasOne(e => e.Plo);

            modelBuilder.Entity<UnitListModel>()
                .HasOne(e => e.Parent);

            modelBuilder.Entity<UnitListModel>()
                .HasMany(e => e.ParentUnitListList)
                .WithOne(e => e.Parent)
            ;

            // UnitLocation (TUNITLCA)
            modelBuilder.Entity<UnitLocationModel>()
                .HasKey(e => new { e.RefType, e.RefKeyId, e.What, e.Time });

            modelBuilder.Entity<UnitLocationModel>()
                .HasOne(e => e.Location);

            modelBuilder.Entity<UnitLocationModel>()
                .HasOne(e => e.Plo);

            modelBuilder.Entity<UnitLocationModel>()
                .HasOne(e => e.RefStocks);

            modelBuilder.Entity<UnitLocationModel>()
                .HasOne(e => e.RefUnit);

            modelBuilder.Entity<UnitLocationModel>()
                .HasOne(e => e.User);

            modelBuilder.Entity<UnitLocationModel>()
                .HasOne(e => e.RefCust);

            modelBuilder.Entity<UnitLocationModel>()
                .HasOne(e => e.RefProcBatchProcess);

            modelBuilder.Entity<UnitLocationModel>()
                .HasOne(e => e.RefOrd);

            modelBuilder.Entity<UnitLocationModel>()
                .HasOne(e => e.RefOpd);

            // UnitLotInfo (TUNITLOTINFO)
            modelBuilder.Entity<UnitLotInfoModel>()
                .HasKey(e => new { e.LotInKeyId, e.UnitUnit });

            modelBuilder.Entity<UnitLotInfoModel>()
                .HasOne(e => e.LotIn);

            modelBuilder.Entity<UnitLotInfoModel>()
                .HasOne(e => e.UnitUnitUnit);

            modelBuilder.Entity<UnitLotInfoModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<UnitLotInfoModel>()
                .HasOne(e => e.Loca);

            // UnitWeightInfo (TUNITWEIGHTINFO)
            modelBuilder.Entity<UnitWeightInfoModel>()
                .HasKey(e => e.UnitUnit);

            modelBuilder.Entity<UnitWeightInfoModel>()
                .HasOne(e => e.UweIUnitUnit);

            // User (TUSER)
            modelBuilder.Entity<UserModel>()
                .Property(e => e.KeyId)
                .HasValueGenerator((property, entity) =>
                    KeyIdGeneratorFactory.CreateBaseKeyIdGenerator("USERKEYID")
                );

            modelBuilder.Entity<UserModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<UserModel>()
                .HasOne(e => e.ModifiedUser);

            modelBuilder.Entity<UserModel>()
                .HasOne(e => e.Profile);

            modelBuilder.Entity<UserModel>()
                .HasOne(e => e.Fac);

            modelBuilder.Entity<UserModel>()
                .HasMany(e => e.UserCustomerUsersList)
                .WithOne(e => e.User)
            ;

            modelBuilder.Entity<UserModel>()
                .HasMany(e => e.RefUserEventList)
                .WithOne(e => e.RefUser)
            ;

            modelBuilder.Entity<UserModel>()
                .HasMany(e => e.RefUserPictureRefList)
                .WithOne(e => e.RefUser)
            ;

            modelBuilder.Entity<UserModel>()
                .HasMany(e => e.ApproveUserProcessList)
                .WithOne(e => e.ApproveUser)
            ;

            modelBuilder.Entity<UserModel>()
                .HasMany(e => e.DisapproveUserProcessList)
                .WithOne(e => e.DisapproveUser)
            ;

            modelBuilder.Entity<UserModel>()
                .HasMany(e => e.InitiatorUserProcessList)
                .WithOne(e => e.InitiatorUser)
            ;

            modelBuilder.Entity<UserModel>()
                .HasMany(e => e.UserUnitLocationList)
                .WithOne(e => e.User)
            ;

            // UserFieldDef (TUSERFIELDDEFINITION)
            modelBuilder.Entity<UserFieldDefModel>()
                .HasKey(e => e.AutoInc);

            modelBuilder.Entity<UserFieldDefModel>()
                .HasOne(e => e.CreatedUser);

            modelBuilder.Entity<UserFieldDefModel>()
                .HasOne(e => e.ModifiedUser);

            // Map boolean fields to converter
            TDocModelsBuilder.CreateModel(modelBuilder);

            base.OnModelCreating(modelBuilder);
        }
    }
}