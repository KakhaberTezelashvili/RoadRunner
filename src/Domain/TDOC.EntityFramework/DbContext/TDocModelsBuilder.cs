using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

// This file contains all relevant models mapping to the T-DOC database.
// This file was generated by a tool. Only edit for local testing purposes.
namespace TDOC.EntityFramework.DbContext
{
    /// <summary>
    /// Provides model specific configuration.
    /// </summary>
    public static class TDocModelsBuilder
    {
        /// <summary>
        /// Configures field value conversions.
        /// </summary>
        public static void CreateModel(ModelBuilder modelBuilder)
        {
            // Boolean to SQL boolean ("T", "F") converter
            var boolToSqlBoolConverter = new BoolToStringConverter("F", "T");

            // CompositeModel boolean fields
            modelBuilder.Entity<CompositeModel>()
                        .Property(m => m.HasAlternative)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // CustomerModel boolean fields
            modelBuilder.Entity<CustomerModel>()
                        .Property(m => m.CanOrder)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<CustomerModel>()
                        .Property(m => m.DeliveryNote)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<CustomerModel>()
                        .Property(m => m.External)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<CustomerModel>()
                        .Property(m => m.TagsSurvive)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<CustomerModel>()
                        .Property(m => m.Traceability)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // EventModel boolean fields
            modelBuilder.Entity<EventModel>()
                        .Property(m => m.System)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // FactoryModel boolean fields
            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.AllowSkipCleanAndTest)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.AllowSkipDispatch)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.AllowSkipReturn)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.AutoPlayVideos)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.ChargeUsage)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.DropItemSuppOpOrders)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.EquipmentUsage)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.FixedPrices)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.PreDispatch)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.SBFTAllStocks)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.SBFTBlockStartedOp)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.Setweightusage)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.UseColorFields)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryModel>()
                        .Property(m => m.Usedispstockonpack)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // FactoryCustomersModel boolean fields
            modelBuilder.Entity<FactoryCustomersModel>()
                        .Property(m => m.Primary)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // FactoryStandardCommentModel boolean fields
            modelBuilder.Entity<FactoryStandardCommentModel>()
                        .Property(m => m.Primary)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // FactoryUsersModel boolean fields
            modelBuilder.Entity<FactoryUsersModel>()
                        .Property(m => m.Primary)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<FactoryUsersModel>()
                        .Property(m => m.Useguestprofile)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // FastTrackCodeModel boolean fields
            modelBuilder.Entity<FastTrackCodeModel>()
                        .Property(m => m.InvoiceWithUnit)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // FastTrackPlanModel boolean fields
            modelBuilder.Entity<FastTrackPlanModel>()
                        .Property(m => m.InvoiceWithUnit)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // IndicatorModel boolean fields
            modelBuilder.Entity<IndicatorModel>()
                        .Property(m => m.BlockBatch)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<IndicatorModel>()
                        .Property(m => m.BlockDispatch)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<IndicatorModel>()
                        .Property(m => m.LinkedToBatch)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<IndicatorModel>()
                        .Property(m => m.Postregistered)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // IndicatorTypeModel boolean fields
            modelBuilder.Entity<IndicatorTypeModel>()
                        .Property(m => m.CBIMode)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<IndicatorTypeModel>()
                        .Property(m => m.DeductItemStock)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<IndicatorTypeModel>()
                        .Property(m => m.ShareInBatch)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // ItemModel boolean fields
            modelBuilder.Entity<ItemModel>()
                        .Property(m => m.Composite)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<ItemModel>()
                        .Property(m => m.Disposable)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // LocationModel boolean fields
            modelBuilder.Entity<LocationModel>()
                        .Property(m => m.IsMaster)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // MachineModel boolean fields
            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.AllowBatch)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.AllowDataExport)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.AllowLog)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.DefProgFromModel)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.Prescan)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.PrintLabelApprove)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.PrintLabelDisappr)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.PrintLabelEnd)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.PrintLabelInit)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.PrintLabelStart)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.PrintLabelStickers)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.PrintListApprove)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.PrintListDisappr)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.PrintListEnd)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.PrintListInit)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineModel>()
                        .Property(m => m.PrintListStart)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // MachineTypeModel boolean fields
            modelBuilder.Entity<MachineTypeModel>()
                        .Property(m => m.AbsolutePressure)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineTypeModel>()
                        .Property(m => m.AutoCreatedIndic)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineTypeModel>()
                        .Property(m => m.CanAutoCreateBI)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineTypeModel>()
                        .Property(m => m.LoadOnStart)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineTypeModel>()
                        .Property(m => m.NonEndo)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineTypeModel>()
                        .Property(m => m.PressureLogarithmic)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineTypeModel>()
                        .Property(m => m.UseMAP)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<MachineTypeModel>()
                        .Property(m => m.UseRecipe)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // OperationDataModel boolean fields
            modelBuilder.Entity<OperationDataModel>()
                        .Property(m => m.BookingForce)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<OperationDataModel>()
                        .Property(m => m.IncompleteOrder)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<OperationDataModel>()
                        .Property(m => m.OrdersNeedUpdate)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // OrderModel boolean fields
            modelBuilder.Entity<OrderModel>()
                        .Property(m => m.AutoCreated)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<OrderModel>()
                        .Property(m => m.CreatedForOpDPrefList)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<OrderModel>()
                        .Property(m => m.DelIncomplete)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<OrderModel>()
                        .Property(m => m.OrgInvoiceDirect)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<OrderModel>()
                        .Property(m => m.Reordered)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<OrderModel>()
                        .Property(m => m.ReturnReq)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // OrderLineModel boolean fields
            modelBuilder.Entity<OrderLineModel>()
                        .Property(m => m.HasAlternative)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // OrderTemplateModel boolean fields
            modelBuilder.Entity<OrderTemplateModel>()
                        .Property(m => m.OrgInvoiceDirect)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // PipAuditLogModel boolean fields
            modelBuilder.Entity<PipAuditLogModel>()
                        .Property(m => m.UsrAllowSensi)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // PositionModel boolean fields
            modelBuilder.Entity<PositionModel>()
                        .Property(m => m.Disabled)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // PosLocationModel boolean fields
            modelBuilder.Entity<PosLocationModel>()
                        .Property(m => m.Default)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // ProductModel boolean fields
            modelBuilder.Entity<ProductModel>()
                        .Property(m => m.FactorySterilized)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<ProductModel>()
                        .Property(m => m.Loaner)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<ProductModel>()
                        .Property(m => m.PackOnScreen)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<ProductModel>()
                        .Property(m => m.Predis)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<ProductModel>()
                        .Property(m => m.PrintLabel)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<ProductModel>()
                        .Property(m => m.PrintList)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<ProductModel>()
                        .Property(m => m.WeightUsageEnabled)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // ProductReservationModel boolean fields
            modelBuilder.Entity<ProductReservationModel>()
                        .Property(m => m.IsUnitActual)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // ProfileModel boolean fields
            modelBuilder.Entity<ProfileModel>()
                        .Property(m => m.UpdateRequired)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // ProgramModel boolean fields
            modelBuilder.Entity<ProgramModel>()
                        .Property(m => m.ExtLogRequired)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<ProgramModel>()
                        .Property(m => m.SecondUserApproval)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<ProgramModel>()
                        .Property(m => m.Validate)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // RoomModel boolean fields
            modelBuilder.Entity<RoomModel>()
                        .Property(m => m.BlockOrderCreation)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // StocksModel boolean fields
            modelBuilder.Entity<StocksModel>()
                        .Property(m => m.AllowItems)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<StocksModel>()
                        .Property(m => m.AllowNegCount)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<StocksModel>()
                        .Property(m => m.AllowProducts)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<StocksModel>()
                        .Property(m => m.AutoReorder)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<StocksModel>()
                        .Property(m => m.DropItemSuppOnSugg)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<StocksModel>()
                        .Property(m => m.IsTracestock)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<StocksModel>()
                        .Property(m => m.IsTransitStock)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // SupplierModel boolean fields
            modelBuilder.Entity<SupplierModel>()
                        .Property(m => m.Acceptorders)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SupplierModel>()
                        .Property(m => m.Internal)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // SystemModel boolean fields
            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.AllowGEPassword)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.BatchUserVerification)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.Chargeusage)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.EnableIdentArtInComp)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.EnableIdentArtInOrders)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.EnableIdentArtInPrefLists)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.EnableSubstitution)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.Fixedprices)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.PasswordVerifyOnly)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.PipAfterScannerLogOut)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.PipAllowSearch)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.Prodstockitemmoving)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.Readonly)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.Seccomposite)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.UpdOrdOnPrefLstChange)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<SystemModel>()
                        .Property(m => m.Usecriticalcount)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // TagsModel boolean fields
            modelBuilder.Entity<TagsModel>()
                        .Property(m => m.Auto)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // TagTypeModel boolean fields
            modelBuilder.Entity<TagTypeModel>()
                        .Property(m => m.HoldsItems)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<TagTypeModel>()
                        .Property(m => m.SysType)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // UnitModel boolean fields
            modelBuilder.Entity<UnitModel>()
                        .Property(m => m.ReqReturnReg)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // UnitFastTrackModel boolean fields
            modelBuilder.Entity<UnitFastTrackModel>()
                        .Property(m => m.InvoiceDone)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            modelBuilder.Entity<UnitFastTrackModel>()
                        .Property(m => m.Invoicewithunit)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // UnitListModel boolean fields
            modelBuilder.Entity<UnitListModel>()
                        .Property(m => m.Checked)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // UserModel boolean fields
            modelBuilder.Entity<UserModel>()
                        .Property(m => m.ChangePassword)
                        .HasConversion(boolToSqlBoolConverter)
            ;

            // UserFieldDefModel boolean fields
            modelBuilder.Entity<UserFieldDefModel>()
                        .Property(m => m.Active)
                        .HasConversion(boolToSqlBoolConverter)
            ;
        }
    }
}