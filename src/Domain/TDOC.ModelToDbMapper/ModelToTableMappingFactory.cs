// This file contains the factory class responsible for creating model to table mappings.
// This file was generated by a tool. Only edit for local testing purposes.
namespace TDOC.ModelToDbMapper
{
    /// <summary>
    /// Factory responsible for creating model to table mappings.
    /// </summary>
    public static class ModelToTableMappingFactory
    {
        /// <summary>
        /// Creates a new <see cref="ModelToTableMapping"/> representing a mapping between a database table and the corresponding model.
        /// </summary>
        /// <param name="modelOrTableName">Name of the model or database table.</param>
        /// <returns>A <see cref="ModelToTableMapping"/> instance.</returns>
        public static ModelToTableMapping GetModelToTableMapping(string modelOrTableName) => CreateModelToTableMapping(modelOrTableName);

        /// <summary>
        /// Private. Creates a new <see cref="ModelToTableMapping"/> that represents a mapping between a model and a database table.
        /// </summary>
        /// <param name="modelOrTableName">Name of the model or table.</param>
        /// <returns>A <see cref="ModelToTableMapping"/> instance.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="modelOrTableName" /> is <c>null</c> or empty.</exception>
        private static ModelToTableMapping CreateModelToTableMapping(string modelOrTableName)
        {
            if (string.IsNullOrEmpty(modelOrTableName))
            {
                throw new ArgumentNullException($"{nameof(modelOrTableName)} is null or empty.");
            }

            ModelToTableMapping result = CreateModelToTableMapping_01(modelOrTableName);
            if (result == null)
            {
                result = CreateModelToTableMapping_02(modelOrTableName);
                if (result == null)
                {
                    result = CreateModelToTableMapping_03(modelOrTableName);
                    if (result == null)
                    {
                        result = CreateModelToTableMapping_04(modelOrTableName);
                        if (result == null)
                        {
                            result = CreateModelToTableMapping_05(modelOrTableName);
                            if (result == null)
                            {
                                result = CreateModelToTableMapping_06(modelOrTableName);
                                if (result == null)
                                {
                                    result = CreateModelToTableMapping_07(modelOrTableName);
                                    if (result == null)
                                    {
                                        result = CreateModelToTableMapping_08(modelOrTableName);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return result;
        }

        private static ModelToTableMapping CreateModelToTableMapping_01(string modelOrTableName)
        {
            StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase;

            ModelToTableMapping result = null;

            #region Mappings

            if (modelOrTableName.Equals("ActionModel", stringComparison) || modelOrTableName.Equals("TACTION", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ACTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ACT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ACT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "ACT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ACT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "ACTCRITERIA", "criteria", "string", "string", "", "", "", "F", "F", "F" },
                    { "ACTDBCRITERIA", "dBCriteria", "string", "string", "", "", "", "F", "F", "F" },
                    { "ACTDESC", "desc", "string", "string", "", "", "", "F", "F", "F" },
                    { "ACTMESPRIORITY", "mesPriority", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ACTMESSEVERITY", "mesSeverity", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ACTNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "ACTPARENTKEYID", "parentKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ACTTYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TACTION",
                    "ActionModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ActionDelayLogModel", stringComparison) || modelOrTableName.Equals("TACTIONDELAYLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ACTDLOGAUTOINC", "autoinc", "int", "number", "", "", "", "F", "F", "F" },
                    { "ACTDLOGLASTUPDATE", "lastUpdate", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "ACTDLOGPROCESSED", "processed", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "ACTDLOGPROPERTIES", "properties", "string", "string", "", "", "", "F", "F", "F" },
                    { "ACTDLOGTABLEKEYID", "tableKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ACTDLOGTABLENAME", "tableName", "string", "string", "", "", "", "F", "F", "F" },
                    { "ACTDLOGTYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TACTIONDELAYLOG",
                    "ActionDelayLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ActionLogModel", stringComparison) || modelOrTableName.Equals("TACTIONLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ACTLOGAUTOINC", "autoinc", "int", "number", "", "", "", "F", "F", "F" },
                    { "ACTLOGDATE", "date", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "ACTLOGPROCESSED", "processed", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "ACTLOGPROPERTIES", "properties", "string", "string", "", "", "", "F", "F", "F" },
                    { "ACTLOGTYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TACTIONLOG",
                    "ActionLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ActionSubscriberModel", stringComparison) || modelOrTableName.Equals("TACTIONSUBSCRIBER", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ACTSUBSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ACTSUBS_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ACTSUBS_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "ACTSUBS_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ACTSUBS_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "ACTSUBSACTKEYID", "actKeyId", "int", "number", "", "", "", "F", "F", "F" },
                    { "ACTSUBSMEGTKEYID", "megtKeyId", "int?", "number", "", "MessageUserGroupModel", "Megt", "F", "F", "F" },
                    { "ACTSUBSUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TACTIONSUBSCRIBER",
                    "ActionSubscriberModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ActionTemplatesModel", stringComparison) || modelOrTableName.Equals("TACTIONTEMPLATES", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ACTTMPACTKEYID", "actKeyId", "int", "number", "", "ActionModel", "Act", "F", "F", "F" },
                    { "ACTTMPMSGTKEYID", "msgTKeyId", "int", "number", "", "MessageTemplateModel", "MsgT", "F", "F", "F" },
                    { "ACTTMPTRANSMITKIND", "transKind", "int", "number", "TransmitKind", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TACTIONTEMPLATES",
                    "ActionTemplatesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ADGroupModel", stringComparison) || modelOrTableName.Equals("TADGRP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ADGRPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ADGRPADREF", "aDRef", "string", "string", "", "", "", "F", "F", "F" },
                    { "ADGRPDISABLED", "disabled", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "ADGRPFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "ADGrpFac", "F", "F", "F" },
                    { "ADGRPNESTING", "nesting", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ADGRPPRIORITY", "priority", "int", "number", "", "", "", "F", "F", "F" },
                    { "ADGRPPROFKEYID", "profKeyId", "int", "number", "", "ProfileModel", "ADGrpProf", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TADGRP",
                    "ADGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("AGSModel", stringComparison) || modelOrTableName.Equals("TAGS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "AGSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "AGS_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "AGS_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "AGS_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "AGS_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "AGSINFO", "info", "string", "string", "", "", "", "F", "F", "F" },
                    { "AGSMASTERQUEUEKEYID", "masterQueueKeyId", "int?", "number", "", "AGSModel", "MasterQueue", "F", "F", "F" },
                    { "AGSMAXLOADS", "maxloads", "int?", "number", "", "", "", "F", "F", "F" },
                    { "AGSNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "AGSREFNUM", "refNum", "int?", "number", "", "", "", "F", "F", "F" },
                    { "AGSTEXT", "text", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TAGS",
                    "AGSModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("AGSQueueModel", stringComparison) || modelOrTableName.Equals("TAGSQUEUE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "AGSQKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "AGSQAGSKEYID", "aGSKeyId", "int?", "number", "", "AGSModel", "AGS", "F", "F", "F" },
                    { "AGSQLOAD", "load", "int", "number", "", "TagsModel", "LoadTags", "F", "F", "F" },
                    { "AGSQLOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "AGSQPLOKEYID", "ploKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "AGSQREFPREKEYID", "refPreKeyId", "int?", "number", "", "ProgramRecipeModel", "RefPre", "F", "F", "F" },
                    { "AGSQREFPROGKEYID", "refProgKeyId", "int?", "number", "", "ProgramModel", "RefProg", "F", "F", "F" },
                    { "AGSQSCANTIME", "scantime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "AGSQSETTINGS", "settings", "int?", "number", "", "", "", "F", "F", "F" },
                    { "AGSQSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "AGSQUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TAGSQUEUE",
                    "AGSQueueModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ALProcessApproveModel", stringComparison) || modelOrTableName.Equals("TALPROCESSAPPROVE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ALPAPROCBATCH", "procBatch", "int", "number", "", "ProcessModel", "ProcBatchProcess", "F", "F", "F" },
                    { "ALPAQANSKEYID", "qAnsKeyId", "int", "number", "", "QuestionAnswerModel", "QAns", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TALPROCESSAPPROVE",
                    "ALProcessApproveModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("AuditLogModel", stringComparison) || modelOrTableName.Equals("TAUDIT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "AUDCATEGORY", "category", "int?", "number", "", "", "", "F", "F", "F" },
                    { "AUDEVENT", "event", "int?", "number", "", "", "", "F", "F", "F" },
                    { "AUDPLOKEYID", "ploKeyId", "int", "number", "", "PosLocationModel", "Plo", "F", "F", "F" },
                    { "AUDTEXT", "text", "string", "string", "", "", "", "F", "F", "F" },
                    { "AUDTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "AUDTYPE", "type", "int", "number", "", "", "", "F", "F", "F" },
                    { "AUDUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" },
                    { "AUDWHAT", "what", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TAUDIT",
                    "AuditLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("BarcodeModel", stringComparison) || modelOrTableName.Equals("TBARCODE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "BARBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "BARFLAGS", "flags", "int?", "number", "", "", "", "F", "F", "F" },
                    { "BARGS1AI", "gS1AI", "int?", "number", "", "", "", "F", "F", "F" },
                    { "BAROWNERCUSTKEYID", "ownerCustKeyId", "int?", "number", "", "CustomerModel", "OwnerCust", "F", "F", "F" },
                    { "BARPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "BARREFCUSTKEYID", "refCustKeyId", "int?", "number", "", "CustomerModel", "RefCust", "F", "F", "F" },
                    { "BARREFDOCTKEYID", "refDoctKeyId", "int?", "number", "", "DoctorModel", "RefDoct", "F", "F", "F" },
                    { "BARREFINDICINDICATOR", "refIndicIndicator", "int?", "number", "", "IndicatorModel", "RefIndicIndicatorIndicator", "F", "F", "F" },
                    { "BARREFINTYPKEYID", "refInTypKeyId", "int?", "number", "", "IndicatorTypeModel", "RefInTyp", "F", "F", "F" },
                    { "BARREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "BARREFLOCAKEYID", "refLocaKeyId", "int?", "number", "", "LocationModel", "RefLoca", "F", "F", "F" },
                    { "BARREFMACHKEYID", "refMachKeyId", "int?", "number", "", "MachineModel", "RefMach", "F", "F", "F" },
                    { "BARREFMACROKEYID", "refMacroKeyId", "int?", "number", "", "MacroModel", "RefMacro", "F", "F", "F" },
                    { "BARREFPATKEYID", "refPatKeyId", "int?", "number", "", "PatientModel", "RefPat", "F", "F", "F" },
                    { "BARREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" },
                    { "BARREFPROGKEYID", "refProgKeyId", "int?", "number", "", "ProgramModel", "RefProg", "F", "F", "F" },
                    { "BARREFROOMKEYID", "refRoomKeyId", "int?", "number", "", "RoomModel", "RefRoom", "F", "F", "F" },
                    { "BARREFSERIKEYID", "refSeriKeyId", "int?", "number", "", "SerialModel", "RefSeri", "F", "F", "F" },
                    { "BARREFSTOKKEYID", "refStokKeyId", "int?", "number", "", "StocksModel", "RefStok", "F", "F", "F" },
                    { "BARREFSUPPKEYID", "refSuppKeyId", "int?", "number", "", "SupplierModel", "RefSupp", "F", "F", "F" },
                    { "BARREFTAGSKEYID", "refTagsKeyId", "int?", "number", "", "TagsModel", "RefTags", "F", "F", "F" },
                    { "BARREFUSERKEYID", "refUserKeyId", "int?", "number", "", "UserModel", "RefUser", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TBARCODE",
                    "BarcodeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("BatchModel", stringComparison) || modelOrTableName.Equals("TBATCH", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "BATBATCH", "batch", "int", "number", "", "ProcessModel", "BatchProcess", "F", "F", "F" },
                    { "BATCHPLKEYID", "chPlKeyId", "int?", "number", "", "ChamberPlacementsModel", "ChPl", "F", "F", "F" },
                    { "BATSTATUS", "status", "int?", "number", "BatchUnitStatus", "", "", "F", "F", "F" },
                    { "BATTYPE", "type", "int", "number", "", "", "", "F", "F", "F" },
                    { "BATUNIT", "unit", "int", "number", "", "UnitModel", "UnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TBATCH",
                    "BatchModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("BcTpModel", stringComparison) || modelOrTableName.Equals("TBARCTMP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "BCTPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "BCTP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "BCTP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "BCTP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "BCTP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "BCTPDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "BCTPNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "BCTPNUMCOLUMNS", "numColumns", "int?", "number", "", "", "", "F", "F", "F" },
                    { "BCTPNUMROWS", "numRows", "int?", "number", "", "", "", "F", "F", "F" },
                    { "BCTPPAGECOUNT", "pageCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "BCTPVERSION", "version", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TBARCTMP",
                    "BcTpModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("BITypeModel", stringComparison) || modelOrTableName.Equals("TBITYPE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "BITYPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "BITYP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "BITYP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "BITYP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "BITYP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "BITYPAUTOCREATEDINDIC", "autoCreatedIndic", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "BITYPCAPCOLOR", "capColor", "int?", "number", "", "", "", "F", "F", "F" },
                    { "BITYPCOOLINGTIME", "coolingTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "BITYPINCUBATIONTIME", "incubationTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "BITYPNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "BITYPPROCESSEDCOLOR", "processedColor", "int?", "number", "", "", "", "F", "F", "F" },
                    { "BITYPSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "BITYPTYPE", "type", "string", "string", "", "", "", "F", "T", "F" },
                    { "BITYPUNPROCESSEDCOLOR", "unProcessedColor", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TBITYPE",
                    "BITypeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("BITypePlacementLinkModel", stringComparison) || modelOrTableName.Equals("TBITYPEPLACEMENTLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "BIPLAUTOINC", "autoinc", "int", "number", "", "", "", "F", "F", "F" },
                    { "BIPLBITYPKEYID", "bITypKeyId", "int", "number", "", "BITypeModel", "BITyp", "F", "F", "F" },
                    { "BIPLCHPLKEYID", "chPlKeyId", "int", "number", "", "ChamberPlacementsModel", "ChPl", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TBITYPEPLACEMENTLINK",
                    "BITypePlacementLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CalendarModel", stringComparison) || modelOrTableName.Equals("TCALENDAR", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CALKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CAL_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CAL_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "CAL_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CAL_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "CALNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "CALPARENTCALKEYID", "parentCalKeyId", "int?", "number", "", "CalendarModel", "ParentCal", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCALENDAR",
                    "CalendarModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CatalogModel", stringComparison) || modelOrTableName.Equals("TCATALOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CATKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CAT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CAT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "CAT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CAT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "CATCATALOGNO", "catalogNo", "string", "string", "", "", "", "F", "T", "F" },
                    { "CATCOSTPRICE", "costPrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "CATDISPOSABLE", "disposable", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "CATITGRPKEYID", "itGrpKeyId", "int?", "number", "", "ItemGroupModel", "ItGrp", "F", "F", "F" },
                    { "CATITSPCKEYID", "itspcKeyId", "int?", "number", "", "ItemSpecialtyModel", "Itspc", "F", "F", "F" },
                    { "CATLENGTH", "length", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CATLIFESPAN", "lifeSpan", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CATMANUFACTORNO", "manufactorNo", "string", "string", "", "", "", "F", "F", "F" },
                    { "CATMANUKEYID", "manuKeyId", "int?", "number", "", "SupplierModel", "Manu", "F", "F", "F" },
                    { "CATMATERIAL", "material", "int?", "number", "", "TextModel", "MaterialText", "F", "F", "F" },
                    { "CATMATERIALSNUM", "materialsNum", "string", "string", "", "", "", "F", "F", "F" },
                    { "CATMAXPRESSURE", "maxPressure", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CATMAXTEMP", "maxTemp", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CATORDERMINCOUNT", "orderMinCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CATORDERSTDCOUNT", "orderStdCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CATORDERSTDUOMKEYID", "orderstduomKeyId", "int?", "number", "", "ItemUOMModel", "Orderstduom", "F", "F", "F" },
                    { "CATOTHERUNITCOUNT", "otherUnitCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CATOTHERUOMKEYID", "otheruomKeyId", "int?", "number", "", "ItemUOMModel", "Otheruom", "F", "F", "F" },
                    { "CATREPAIRVENDORKEYID", "repairVendorKeyId", "int?", "number", "", "SupplierModel", "RepairVendor", "F", "F", "F" },
                    { "CATSTERILIZATIONTYPE", "sterilizationType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CATSUPPKEYID", "suppKeyId", "int?", "number", "", "SupplierModel", "Supp", "F", "F", "F" },
                    { "CATTEXT", "text", "string", "string", "", "", "", "F", "F", "F" },
                    { "CATTIP", "tip", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CATUNITCOUNT", "unitCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CATUOMKEYID", "uomKeyId", "int?", "number", "", "ItemUOMModel", "Uom", "F", "F", "F" },
                    { "CATWARRANTY", "warranty", "int?", "number", "", "TextModel", "WarrantyText", "F", "F", "F" },
                    { "CATWEIGHT", "weight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CATWIDTH", "width", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCATALOG",
                    "CatalogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CatRefModel", stringComparison) || modelOrTableName.Equals("TCATREF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CATREFPRIMREFKEYID", "primRefKeyId", "int", "number", "", "CatalogModel", "PrimRef", "F", "F", "F" },
                    { "CATREFSECREFKEYID", "secRefKeyId", "int", "number", "", "CatalogModel", "SecRef", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCATREF",
                    "CatRefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ChamberPlacementsModel", stringComparison) || modelOrTableName.Equals("TCHPLACEMENT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CHPLKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CHPLMACHKEYID", "machKeyId", "int", "number", "", "MachineModel", "Mach", "F", "F", "F" },
                    { "CHPLNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "CHPLNUMBER", "number", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CHPLPLACEMENT", "placement", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TCHPLACEMENT",
                    "ChamberPlacementsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ClientTeamModel", stringComparison) || modelOrTableName.Equals("TCLIENTTEAM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CLITKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CLIT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CLIT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "CLIT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CLIT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "CLITNAME", "name", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TCLIENTTEAM",
                    "ClientTeamModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CompAlternativeModel", stringComparison) || modelOrTableName.Equals("TCOMPALTERNATIVE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CPALTKEY", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CPALTCOMPKEY", "compkey", "int", "number", "", "CompositeModel", "CompkeyComposite", "F", "F", "F" },
                    { "CPALTITEMKEYID", "itemKeyId", "int", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "CPALTPRIORITY", "priority", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCOMPALTERNATIVE",
                    "CompAlternativeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CompositeModel", stringComparison) || modelOrTableName.Equals("TCOMP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "COMPKEY", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "COMPCOMPITEMKEYID", "compItemKeyId", "int", "number", "", "ItemModel", "CompItem", "F", "F", "F" },
                    { "COMPCOUNT", "count", "int", "number", "", "", "", "F", "F", "F" },
                    { "COMPCRITICALCOUNT", "criticalCount", "int", "number", "", "", "", "F", "F", "F" },
                    { "COMPHASALTERNATIVE", "hasAlternative", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "COMPIDENTLINEUSAGE", "identLineUsage", "int", "number", "IdentArticleLineUsage", "", "", "F", "F", "F" },
                    { "COMPPLACEMENT", "placement", "int?", "number", "", "TextModel", "PlacementText", "F", "F", "F" },
                    { "COMPPOSITION", "position", "int", "number", "", "", "", "F", "F", "F" },
                    { "COMPREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "COMPREFTEXTKEYID", "refTextKeyId", "int?", "number", "", "TextModel", "RefText", "F", "F", "F" },
                    { "COMPSPLITTAGNO", "splitTagNo", "int?", "number", "", "", "", "F", "F", "F" },
                    { "COMPTEXT", "text", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCOMP",
                    "CompositeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ConfigurationHistoryModel", stringComparison) || modelOrTableName.Equals("TCONFIGHIST", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CFGHIDATA", "data", "string", "string", "", "", "", "F", "F", "F" },
                    { "CFGHIFILEAGE", "fileage", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CFGHINAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "CFGHITIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "CFGHITYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCONFIGHIST",
                    "ConfigurationHistoryModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ContactModel", stringComparison) || modelOrTableName.Equals("TCONTACT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CONTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CONT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CONT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "CONT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CONT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "CONTBIRTHDAY", "birthday", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CONTCELLPHONE", "cellPhone", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTCHILDREN", "children", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTCONTTYPE", "contType", "int?", "number", "", "TextModel", "ContTypeText", "F", "F", "F" },
                    { "CONTEMAIL", "email", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTHOMEADDRESS1", "homeAddress1", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTHOMEADDRESS2", "homeAddress2", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTHOMECITY", "homeCity", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTHOMECOUNTRY", "homeCountry", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTHOMEEMAIL", "homeEmail", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTHOMEFAX", "homeFax", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTHOMEPHONE", "homePhone", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTHOMEWEBSITE", "homeWebSite", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "CONTOFFICEFAX", "officeFax", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTOFFICEPHONE", "officePhone", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTPAGER", "pager", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTREFCUSTKEYID", "refCustKeyId", "int?", "number", "", "CustomerModel", "RefCust", "F", "F", "F" },
                    { "CONTREFSUPPKEYID", "refSuppKeyId", "int?", "number", "", "SupplierModel", "RefSupp", "F", "F", "F" },
                    { "CONTREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTSPOUSE", "spouse", "string", "string", "", "", "", "F", "F", "F" },
                    { "CONTVMAIL", "vmail", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCONTACT",
                    "ContactModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CountChangeReasonModel", stringComparison) || modelOrTableName.Equals("TCOUNTCHANGEREASON", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CCREKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CCRE_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CCRE_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "CCRE_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CCRE_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "CCRECOMMENTOPTION", "commentOption", "int", "number", "", "", "", "F", "F", "F" },
                    { "CCREDEFCOMMENT", "defComment", "string", "string", "", "", "", "F", "F", "F" },
                    { "CCREFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "CCREID", "id", "string", "string", "", "", "", "F", "T", "F" },
                    { "CCRENAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "CCREREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "CCRESTATUS", "status", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCOUNTCHANGEREASON",
                    "CountChangeReasonModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CountChangesModel", stringComparison) || modelOrTableName.Equals("TCOUNTCHANGES", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CCHKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CCHCCREKEYID", "cCReKeyId", "int?", "number", "", "CountChangeReasonModel", "CCRe", "F", "F", "F" },
                    { "CCHCOMMENT", "comment", "string", "string", "", "", "", "F", "F", "F" },
                    { "CCHCPDKEYID", "cpdKeyId", "int", "number", "", "CountingPointDataModel", "Cpd", "F", "F", "F" },
                    { "CCHDIFFERENCE", "difference", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CCHFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "CCHORDCNTKEYID", "ordCntKeyId", "int?", "number", "", "OrderCountLstModel", "OrdCnt", "F", "F", "F" },
                    { "CCHRPAKEYID", "rpaKeyId", "int?", "number", "", "RepairModel", "Rpa", "F", "F", "F" },
                    { "CCHTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "CCHULSTKEYID", "uLstKeyId", "int?", "number", "", "UnitListModel", "ULst", "F", "F", "F" },
                    { "CCHUNITUNIT", "unitUnit", "int?", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" },
                    { "CCHUSERKEYID", "userKeyId", "int", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCOUNTCHANGES",
                    "CountChangesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CountCountingSetModel", stringComparison) || modelOrTableName.Equals("TCOUNTCOUNTINGSET", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CPCPSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CPCPSALLOWUSERTOIGNORE", "allowUserToIgnore", "int", "number", "", "", "", "F", "F", "F" },
                    { "CPCPSCNTPNTKEYID", "cntPntKeyId", "int", "number", "", "CountingPointModel", "CntPnt", "F", "F", "F" },
                    { "CPCPSCNTPSKEYID", "cntPsKeyId", "int", "number", "", "CountingPointSetModel", "CntPs", "F", "F", "F" },
                    { "CPCPSREGISTERTYPE", "registerType", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCOUNTCOUNTINGSET",
                    "CountCountingSetModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CountingPointModel", stringComparison) || modelOrTableName.Equals("TCOUNTINGPOINT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CNTPNTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CNTPNT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CNTPNT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "CNTPNT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CNTPNT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "CNTPNTENABLED", "enabled", "int", "number", "", "", "", "F", "F", "F" },
                    { "CNTPNTID", "id", "string", "string", "", "", "", "F", "T", "F" },
                    { "CNTPNTMISMATCHDEF", "mismatchDef", "int", "number", "", "", "", "F", "F", "F" },
                    { "CNTPNTNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "CNTPNTPREFILLATREPACKUNITSTATUSES", "prefillAtRepackUnitStatuses", "string", "string", "", "", "", "F", "F", "F" },
                    { "CNTPNTPROCESS", "process", "int", "number", "", "", "", "F", "F", "F" },
                    { "CNTPNTREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "CNTPNTSINGLEPACKS", "singlePacks", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "CNTPNTUIPREFILL", "uIPrefill", "int", "number", "", "", "", "F", "F", "F" },
                    { "CNTPNTUITYPE", "uIType", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCOUNTINGPOINT",
                    "CountingPointModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CountingPointDataModel", stringComparison) || modelOrTableName.Equals("TCOUNTINGPOINTDATA", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CPDKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CPDCPCPSKEYID", "cpCpSKeyId", "int", "number", "", "CountCountingSetModel", "CpCpS", "F", "F", "F" },
                    { "CPDOPDKEYID", "opdKeyId", "int?", "number", "", "OperationDataModel", "Opd", "F", "F", "F" },
                    { "CPDSTATUS", "status", "int", "number", "CountDatStatus", "", "", "F", "F", "F" },
                    { "CPDTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "CPDUNITUNIT", "unitUnit", "int?", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCOUNTINGPOINTDATA",
                    "CountingPointDataModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CountingPointDataUsersModel", stringComparison) || modelOrTableName.Equals("TCOUNTINGPOINTDATAUSERS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CPDUSRKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CPDUSRCPDKEYID", "cpdKeyId", "int", "number", "", "CountingPointDataModel", "Cpd", "F", "F", "F" },
                    { "CPDUSRCREATINGUSERKEYID", "creatingUserKeyId", "int", "number", "", "UserModel", "CreatingUser", "F", "F", "F" },
                    { "CPDUSRLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "CPDUSRPLOKEYID", "ploKeyId", "int", "number", "", "PosLocationModel", "Plo", "F", "F", "F" },
                    { "CPDUSRROLE", "role", "int", "number", "CountDatUsersUserRole", "", "", "F", "F", "F" },
                    { "CPDUSRTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "CPDUSRUSERKEYID", "userKeyId", "int", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCOUNTINGPOINTDATAUSERS",
                    "CountingPointDataUsersModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CountingPointSetModel", stringComparison) || modelOrTableName.Equals("TCOUNTINGPOINTSET", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CNTPSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CNTPS_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CNTPS_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "CNTPS_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CNTPS_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "CNTPSID", "id", "string", "string", "", "", "", "F", "T", "F" },
                    { "CNTPSNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "CNTPSREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCOUNTINGPOINTSET",
                    "CountingPointSetModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CountingPointUnitCheckModel", stringComparison) || modelOrTableName.Equals("TCPUNITCHECK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TCPUNITCHECK",
                    "CountingPointUnitCheckModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CustomerModel", stringComparison) || modelOrTableName.Equals("TCUST", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CUSTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CUST_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CUST_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "CUST_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CUST_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "CUSTACCOUNT", "account", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTADDRESS1", "address1", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTADDRESS2", "address2", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTARRIVEDLGRPKEYID", "arrivedLGrpKeyId", "int?", "number", "", "LocationGroupModel", "ArrivedLGrp", "F", "F", "F" },
                    { "CUSTAVAILABLELGRPKEYID", "availablelgrpKeyId", "int?", "number", "", "LocationGroupModel", "Availablelgrp", "F", "F", "F" },
                    { "CUSTAVGONSITESTORETIME", "avgOnSiteStoreTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTAVGOPDURATION", "avgOpDuration", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTCALKEYID", "calKeyId", "int?", "number", "", "CalendarModel", "Cal", "F", "F", "F" },
                    { "CUSTCANORDER", "canOrder", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "CUSTCHARGEOPTIONS", "chargeOptions", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTCITY", "city", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTCNTPSKEYID", "cntpsKeyId", "int?", "number", "", "CountingPointSetModel", "Cntps", "F", "F", "F" },
                    { "CUSTCOLOR", "color", "short?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTCOUNTRY", "country", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTCUSITEKEYID", "cuSiteKeyId", "int?", "number", "", "CustSiteModel", "CuSite", "F", "F", "F" },
                    { "CUSTCUSTOMER", "customer", "string", "string", "", "", "", "F", "T", "F" },
                    { "CUSTDEFSTOKKEYID", "defStokKeyId", "int?", "number", "", "StocksModel", "DefStok", "F", "F", "F" },
                    { "CUSTDELADDRESS1", "delAddress1", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTDELADDRESS2", "delAddress2", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTDELCITY", "delCity", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTDELCOUNTRY", "delCountry", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTDELEMAIL", "delEmail", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTDELFAX", "delFax", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTDELGLN", "delGln", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTDELIVERYNOTE", "deliveryNote", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "CUSTDELPKEYID", "delPKeyId", "int?", "number", "", "DeliveryPlanModel", "DelP", "F", "F", "F" },
                    { "CUSTDELTELEPHONE", "delTelephone", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTEMAIL", "email", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTENDOSETIME", "endoSETime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTEXTERNAL", "external", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "CUSTFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "CUSTFAX", "fax", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTFLAGS1", "flags1", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTGLN", "gln", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTINTPICKTIME", "intPickTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTINTTRANSTIMEARRIVE", "intTransTimeArrive", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTINTTRANSTIMEDEPART", "intTransTimeDepart", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTINVOICECUSTKEYID", "invoiceCustKeyId", "int?", "number", "", "CustomerModel", "InvoiceCust", "F", "F", "F" },
                    { "CUSTINVOICEREBATE", "invoiceRebate", "double?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTLINEREBATE", "lineRebate", "double?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTMINORDERLEADTIME", "minOrderLeadTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTORDERBOOKINGMODE", "orderBookingMode", "int?", "number", "CustOrderBookingMode", "", "", "F", "F", "F" },
                    { "CUSTPREDISPATCHMODE", "preDispatchMode", "int?", "number", "CustPreDispatchMode", "", "", "F", "F", "F" },
                    { "CUSTREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTREORDERMODE", "reordermode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSTSHORTNAME", "shortName", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "CUSTSTGRKEYID", "stGrKeyId", "int?", "number", "", "StockGroupModel", "StGr", "F", "F", "F" },
                    { "CUSTTAGSSURVIVE", "tagsSurvive", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "CUSTTELEPHONE", "telephone", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTTRACEABILITY", "traceability", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "CUSTUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTWEBPASSWORD", "webPassword", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTWEBSITE", "webSite", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSTWEBUSER", "webUser", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCUST",
                    "CustomerModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CustomerUsersModel", stringComparison) || modelOrTableName.Equals("TCUSTUSER", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CUUSERCUSTKEYID", "custKeyId", "int", "number", "", "CustomerModel", "Cust", "F", "F", "F" },
                    { "CUUSERUSERKEYID", "userKeyId", "int", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCUSTUSER",
                    "CustomerUsersModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CustSiteModel", stringComparison) || modelOrTableName.Equals("TCUSTSITE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CUSITEKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CUSITE_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CUSITE_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "CUSITE_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CUSITE_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "CUSITEAVGONSITESTORETIME", "avgOnSiteStoreTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSITEAVGOPDURATION", "avgOpDuration", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSITECNTPSKEYID", "cntpsKeyId", "int?", "number", "", "CountingPointSetModel", "Cntps", "F", "F", "F" },
                    { "CUSITEDELGLN", "delGLN", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEDELPKEYID", "delPKeyId", "int?", "number", "", "DeliveryPlanModel", "DelP", "F", "F", "F" },
                    { "CUSITEDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEGLN", "gLN", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEINTPICKTIME", "intPickTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSITEINTTRANSTIMEARRIVE", "intTransTimeArrive", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSITEINTTRANSTIMEDEPART", "intTransTimeDepart", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUSITENAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITESITE", "site", "string", "string", "", "", "", "F", "T", "F" },
                    { "CUSITEUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUSITEUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCUSTSITE",
                    "CustSiteModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("CustTransActModel", stringComparison) || modelOrTableName.Equals("TCUSTINV", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "CUTRNKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "CUTRN_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CUTRN_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "CUTRN_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CUTRN_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "CUTRNACCOUNT", "account", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUTRNAMOUNT", "amount", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "CUTRNAPPROVED", "approved", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "CUTRNAPPROVEDKEYID", "approvedKeyId", "int?", "number", "", "UserModel", "ApprovedUser", "F", "F", "F" },
                    { "CUTRNCUSTKEYID", "custKeyId", "int?", "number", "", "CustomerModel", "Cust", "F", "F", "F" },
                    { "CUTRNORIGINCUSTKEYID", "originCustKeyId", "int?", "number", "", "CustomerModel", "OriginCust", "F", "F", "F" },
                    { "CUTRNREF", "ref", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUTRNSTATUS", "status", "int?", "number", "", "", "", "F", "F", "F" },
                    { "CUTRNTEXT", "text", "string", "string", "", "", "", "F", "F", "F" },
                    { "CUTRNTIME", "time", "DateTime?", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TCUSTINV",
                    "CustTransActModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("DefaultsModel", stringComparison) || modelOrTableName.Equals("TDEFAULT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "DEFFACKEYID", "facKeyId", "int", "number", "", "", "", "F", "F", "F" },
                    { "DEFFIELD", "field", "string", "string", "", "", "", "F", "F", "F" },
                    { "DEFTABLE", "table", "string", "string", "", "", "", "F", "F", "F" },
                    { "DEFUSERKEYID", "userKeyId", "int", "number", "", "", "", "F", "F", "F" },
                    { "DEFVALUE", "value", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TDEFAULT",
                    "DefaultsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("DefaultsBlobModel", stringComparison) || modelOrTableName.Equals("TDEFBLOB", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "DEFBFACKEYID", "facKeyId", "int", "number", "", "", "", "F", "F", "F" },
                    { "DEFBFIELD", "field", "string", "string", "", "", "", "F", "F", "F" },
                    { "DEFBTABLE", "table", "string", "string", "", "", "", "F", "F", "F" },
                    { "DEFBUSERKEYID", "userKeyId", "int", "number", "", "", "", "F", "F", "F" },
                    { "DEFBVALUE", "value", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TDEFBLOB",
                    "DefaultsBlobModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("DeliveryPlanModel", stringComparison) || modelOrTableName.Equals("TDELIVERYPLAN", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "DELPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "DELP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "DELP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "DELP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "DELP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "DELPALLOWINECC", "allowInECC", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "DELPID", "id", "string", "string", "", "", "", "F", "T", "F" },
                    { "DELPNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "DELPOUTSIDEHOURS", "outsideHours", "int", "number", "", "", "", "F", "F", "F" },
                    { "DELPREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TDELIVERYPLAN",
                    "DeliveryPlanModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("DeliveryPlanRuleModel", stringComparison) || modelOrTableName.Equals("TDELIVERYPLANRULE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "DELPRAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "DELPRDELPKEYID", "delPKeyId", "int", "number", "", "DeliveryPlanModel", "DelP", "F", "F", "F" },
                    { "DELPRFREQDAYS", "freqDays", "int?", "number", "", "", "", "F", "F", "F" },
                    { "DELPRFREQTIME", "freqTime", "int", "number", "", "", "", "F", "F", "F" },
                    { "DELPRFREQTYPE", "freqType", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TDELIVERYPLANRULE",
                    "DeliveryPlanRuleModel",
                    columnToPropertyMappings
                );
            }

            return result;

            #endregion Mappings
        }

        private static ModelToTableMapping CreateModelToTableMapping_02(string modelOrTableName)
        {
            StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase;

            ModelToTableMapping result = null;

            #region Mappings

            if (modelOrTableName.Equals("DeltaModel", stringComparison) || modelOrTableName.Equals("TDELTA", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "DELNEWITEMSERIKEYID", "newItemSeriKeyId", "int", "number", "", "SerialModel", "NewItemSeri", "F", "F", "F" },
                    { "DELOLDITEMSERIKEYID", "oldItemSeriKeyId", "int", "number", "", "SerialModel", "OldItemSeri", "F", "F", "F" },
                    { "DELPRODSERIKEYID", "prodSeriKeyId", "int", "number", "", "SerialModel", "ProdSeri", "F", "F", "F" },
                    { "DELUNIT", "unit", "int", "number", "", "UnitModel", "UnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TDELTA",
                    "DeltaModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("DesktopModel", stringComparison) || modelOrTableName.Equals("TDESKTOP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "DESKKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "DESKAPPTYPE", "appType", "int", "number", "TDOCAppType", "", "", "F", "F", "F" },
                    { "DESKDATA", "data", "string", "string", "", "", "", "F", "F", "F" },
                    { "DESKTIME", "time", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "DESKUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" },
                    { "DESKVERSION", "version", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TDESKTOP",
                    "DesktopModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("DoctorModel", stringComparison) || modelOrTableName.Equals("TDOCTOR", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "DOCTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "DOCT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "DOCT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "DOCT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "DOCT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "DOCTBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTCALKEYID", "calKeyId", "int?", "number", "", "CalendarModel", "Cal", "F", "F", "F" },
                    { "DOCTINITIALS", "initials", "string", "string", "", "", "", "F", "T", "F" },
                    { "DOCTNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "DOCTUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "DOCTUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TDOCTOR",
                    "DoctorModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("DryerLogModel", stringComparison) || modelOrTableName.Equals("TDRYERLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "DRYLOGAUTOINC", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "DRYLOGDATA", "data", "int?", "number", "", "", "", "F", "F", "F" },
                    { "DRYLOGMACHKEYID", "machKeyId", "int", "number", "", "MachineModel", "Mach", "F", "F", "F" },
                    { "DRYLOGMACHTIME", "machTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "DRYLOGSUBTYPE", "subType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "DRYLOGTEXTDATA", "textData", "string", "string", "", "", "", "F", "F", "F" },
                    { "DRYLOGTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "DRYLOGTYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TDRYERLOG",
                    "DryerLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("DryerPlacementLogModel", stringComparison) || modelOrTableName.Equals("TDRYERPLACEMENTLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "DRYPLLAUTOINC", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "DRYPLLCHPLKEYID", "chPlKeyId", "int", "number", "", "ChamberPlacementsModel", "ChPl", "F", "F", "F" },
                    { "DRYPLLELAPSEDTIME", "elapsedTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "DRYPLLMACHTIME", "machTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "DRYPLLSCOPEID", "scopeId", "string", "string", "", "", "", "F", "F", "F" },
                    { "DRYPLLTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "DRYPLLTYPE", "type", "int", "number", "", "", "", "F", "F", "F" },
                    { "DRYPLLUSERID", "userId", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TDRYERPLACEMENTLOG",
                    "DryerPlacementLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("DryerProcessModel", stringComparison) || modelOrTableName.Equals("TDRYERPROCESS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "DRPRCCHPLKEYID", "chPlKeyId", "int?", "number", "", "ChamberPlacementsModel", "ChPl", "F", "F", "F" },
                    { "DRPRCENDTIME", "endTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "DRPRCENDUSERKEYID", "endUserKeyId", "int?", "number", "", "UserModel", "EndUser", "F", "F", "F" },
                    { "DRPRCMACHKEYID", "machKeyId", "int", "number", "", "MachineModel", "Mach", "F", "F", "F" },
                    { "DRPRCSTARTTIME", "startTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "DRPRCSTARTUSERKEYID", "startUserKeyId", "int?", "number", "", "UserModel", "StartUser", "F", "F", "F" },
                    { "DRPRCSTATUS", "status", "int", "number", "DryerProcessStatus", "", "", "F", "F", "F" },
                    { "DRPRCUNIT", "unit", "int", "number", "", "UnitModel", "UnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TDRYERPROCESS",
                    "DryerProcessModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("EmgCaseCartTypeModel", stringComparison) || modelOrTableName.Equals("TEMGCASECARTTYPE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "EMGCTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "EMGCT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "EMGCT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "EMGCT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "EMGCT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "EMGCTCUSITEKEYID", "cuSiteKeyId", "int?", "number", "", "CustSiteModel", "CuSite", "F", "F", "F" },
                    { "EMGCTDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "EMGCTID", "id", "string", "string", "", "", "", "F", "T", "F" },
                    { "EMGCTNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "EMGCTOPTKEYID", "optKeyId", "int?", "number", "", "OperationTypeModel", "Opt", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TEMGCASECARTTYPE",
                    "EmgCaseCartTypeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("EmgCaseCartTypeLinkModel", stringComparison) || modelOrTableName.Equals("TEMGCASECARTTYPELINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TEMGCASECARTTYPELINK",
                    "EmgCaseCartTypeLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("EndoDryingMethodsModel", stringComparison) || modelOrTableName.Equals("TENDODRYINGMETHOD", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "EDMKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "EDMMETHOD", "method", "string", "string", "", "", "", "F", "T", "F" },
                    { "EDMNAME", "name", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TENDODRYINGMETHOD",
                    "EndoDryingMethodsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ESignatureDefsModel", stringComparison) || modelOrTableName.Equals("TESIGDEFS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ESIDKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ESID_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ESID_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "ESID_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ESID_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "ESIDNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "ESIDS1OPTION", "s1Option", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ESIDS1PROMPT", "s1Prompt", "string", "string", "", "", "", "F", "F", "F" },
                    { "ESIDS1UGRPKEYID", "s1UGrpKeyId", "int?", "number", "", "UserGroupsModel", "S1UGrp", "F", "F", "F" },
                    { "ESIDS2PROMPT", "s2Prompt", "string", "string", "", "", "", "F", "F", "F" },
                    { "ESIDS2UGRPKEYID", "s2UGrpKeyId", "int?", "number", "", "UserGroupsModel", "S2UGrp", "F", "F", "F" },
                    { "ESIDS3PROMPT", "s3Prompt", "string", "string", "", "", "", "F", "F", "F" },
                    { "ESIDS3UGRPKEYID", "s3UGrpKeyId", "int?", "number", "", "UserGroupsModel", "S3UGrp", "F", "F", "F" },
                    { "ESIDS4PROMPT", "s4Prompt", "string", "string", "", "", "", "F", "F", "F" },
                    { "ESIDS4UGRPKEYID", "s4UGrpKeyId", "int?", "number", "", "UserGroupsModel", "S4UGrp", "F", "F", "F" },
                    { "ESIDWHATEXPLANATION", "whatExplanation", "string", "string", "", "", "", "F", "F", "F" },
                    { "ESIDWHATPROMPT", "whatPrompt", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TESIGDEFS",
                    "ESignatureDefsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ESignaturesModel", stringComparison) || modelOrTableName.Equals("TESIGS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ESIGCOMPLETE", "complete", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "ESIGESIDKEYID", "eSidKeyId", "int", "number", "", "ESignatureDefsModel", "ESid", "F", "F", "F" },
                    { "ESIGREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "ESIGS1EXTID", "s1ExtId", "string", "string", "", "", "", "F", "F", "F" },
                    { "ESIGS1USERKEYID", "s1UserKeyId", "int?", "number", "", "UserModel", "S1User", "F", "F", "F" },
                    { "ESIGS2EXTID", "s2ExtId", "string", "string", "", "", "", "F", "F", "F" },
                    { "ESIGS2USERKEYID", "s2UserKeyId", "int?", "number", "", "UserModel", "S2User", "F", "F", "F" },
                    { "ESIGS3EXTID", "s3ExtId", "string", "string", "", "", "", "F", "F", "F" },
                    { "ESIGS3USERKEYID", "s3UserKeyId", "int?", "number", "", "UserModel", "S3User", "F", "F", "F" },
                    { "ESIGS4EXTID", "s4ExtId", "string", "string", "", "", "", "F", "F", "F" },
                    { "ESIGS4USERKEYID", "s4UserKeyId", "int?", "number", "", "UserModel", "S4User", "F", "F", "F" },
                    { "ESIGWHEN", "when", "DateTime?", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TESIGS",
                    "ESignaturesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("EventModel", stringComparison) || modelOrTableName.Equals("TEVENT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "EVNTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "EVNT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "EVNT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "EVNT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "EVNT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "EVNTEVENT", "event", "string", "string", "", "", "", "F", "F", "F" },
                    { "EVNTEVENTSYSTYPE", "eventsystype", "int?", "number", "", "", "", "F", "F", "F" },
                    { "EVNTINFO", "info", "string", "string", "", "", "", "F", "F", "F" },
                    { "EVNTPLOKEYID", "ploKeyId", "int?", "number", "", "PosLocationModel", "Plo", "F", "F", "F" },
                    { "EVNTREFKEYID", "refKeyId", "int", "number", "", "IndicatorModel", "RefIndicator", "F", "F", "F" },
                    { "EVNTSYSDATA", "sysdata", "string", "string", "", "", "", "F", "F", "F" },
                    { "EVNTSYSTEM", "system", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "EVNTTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "EVNTTYPE", "type", "int", "number", "TableTypes", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TEVENT",
                    "EventModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ExpTimePointsModel", stringComparison) || modelOrTableName.Equals("TEXPTIMEPOINTS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ETPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ETPCUSTKEYID", "custKeyId", "int?", "number", "", "CustomerModel", "Cust", "F", "F", "F" },
                    { "ETPTIMEPOINTTYPE", "timePointType", "int", "number", "", "", "", "F", "F", "F" },
                    { "ETPVALUE", "value", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TEXPTIMEPOINTS",
                    "ExpTimePointsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ExtDocRefInfoModel", stringComparison) || modelOrTableName.Equals("TEXTDOCREFINFO", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "EDRIKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "EDRIDISPLAYCOUNT", "displayCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "EDRIEDSKEYID", "eDSKeyId", "int?", "number", "", "ExtDocStoreModel", "EDS", "F", "F", "F" },
                    { "EDRIFILETIME", "fileTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "EDRILASTDISPLAYED", "lastDisplayed", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "EDRINAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "EDRIPATH", "path", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TEXTDOCREFINFO",
                    "ExtDocRefInfoModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ExtDocRefLinkModel", stringComparison) || modelOrTableName.Equals("TEXTDOCREFLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "EDRLCUSTKEYID", "custKeyId", "int?", "number", "", "CustomerModel", "Cust", "F", "F", "F" },
                    { "EDRLDOCTKEYID", "doctKeyId", "int?", "number", "", "DoctorModel", "Doct", "F", "F", "F" },
                    { "EDRLEDRIKEYID", "eDRIKeyId", "int", "number", "", "ExtDocRefInfoModel", "EDRI", "F", "F", "F" },
                    { "EDRLITEMKEYID", "itemKeyId", "int?", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "EDRLLOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "EDRLMACHKEYID", "machKeyId", "int?", "number", "", "MachineModel", "Mach", "F", "F", "F" },
                    { "EDRLMCTYPKEYID", "mcTypKeyId", "int?", "number", "", "MachineTypeModel", "McTyp", "F", "F", "F" },
                    { "EDRLOPTKEYID", "optKeyId", "int?", "number", "", "OperationTypeModel", "Opt", "F", "F", "F" },
                    { "EDRLPACKKEYID", "packKeyId", "int?", "number", "", "PackingModel", "Pack", "F", "F", "F" },
                    { "EDRLPOSITION", "position", "int", "number", "", "", "", "F", "F", "F" },
                    { "EDRLPREKEYID", "preKeyId", "int?", "number", "", "ProgramRecipeModel", "Pre", "F", "F", "F" },
                    { "EDRLPRODKEYID", "prodKeyId", "int?", "number", "", "ProductModel", "Prod", "F", "F", "F" },
                    { "EDRLPROGKEYID", "progKeyId", "int?", "number", "", "ProgramModel", "Prog", "F", "F", "F" },
                    { "EDRLPROTKEYID", "protKeyId", "int?", "number", "", "ProcedureTypeModel", "Prot", "F", "F", "F" },
                    { "EDRLSERIKEYID", "seriKeyId", "int?", "number", "", "SerialModel", "Seri", "F", "F", "F" },
                    { "EDRLSUPPKEYID", "suppKeyId", "int?", "number", "", "SupplierModel", "Supp", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TEXTDOCREFLINK",
                    "ExtDocRefLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ExtDocStoreModel", stringComparison) || modelOrTableName.Equals("TEXTDOCSTORE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "EDSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "EDSEXCLUDELIST", "excludeList", "string", "string", "", "", "", "F", "F", "F" },
                    { "EDSINCLUDELIST", "includeList", "string", "string", "", "", "", "F", "F", "F" },
                    { "EDSNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "EDSPATH", "path", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TEXTDOCSTORE",
                    "ExtDocStoreModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryModel", stringComparison) || modelOrTableName.Equals("TFACTORY", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FACKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "FAC_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FAC_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "FAC_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FAC_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "FACADDRESS1", "address1", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACADDRESS2", "address2", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACALLOWSKIPCLEANANDTEST", "allowSkipCleanAndTest", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FACALLOWSKIPDISPATCH", "allowSkipDispatch", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FACALLOWSKIPRETURN", "allowSkipReturn", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FACAUTOPLAYVIDEOS", "autoPlayVideos", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FACCALKEYID", "calKeyId", "int?", "number", "", "CalendarModel", "Cal", "F", "F", "F" },
                    { "FACCHARGEUSAGE", "chargeUsage", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FACCITY", "city", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACCNTPSKEYID", "cntpsKeyId", "int?", "number", "", "CountingPointSetModel", "Cntps", "F", "F", "F" },
                    { "FACCOUNTRY", "country", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACCUSTORDACCEPTMODE", "custOrdAcceptMode", "int?", "number", "FactoryCustOrderAcceptMode", "", "", "F", "F", "F" },
                    { "FACDECITEMSTOCKONPACK", "decItemStockOnPack", "int?", "number", "DecNonDispItemStockOnPack", "", "", "F", "F", "F" },
                    { "FACDEDUCTITEMSFROMSTOCK", "deductItemsFromStock", "int", "number", "FacDeductItemsFromStockInOpType", "", "", "F", "F", "F" },
                    { "FACDEFADMINLOCAKEYID", "defAdminLocaKeyId", "int?", "number", "", "LocationModel", "DefAdminLoca", "F", "F", "F" },
                    { "FACDEFAVGONSITESTORETIME", "defAvgOnSiteStoreTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACDEFAVGOPDURATION", "defAvgOpDuration", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACDEFDISPATCHRESTRICT", "defDispatchRestrict", "int", "number", "", "", "", "F", "F", "F" },
                    { "FACDEFITEMSHELVINGTIME", "defItemShelvingTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACDEFITEMSTOKKEYID", "defItemStokKeyId", "int?", "number", "", "StocksModel", "DefItemStok", "F", "F", "F" },
                    { "FACDEFMESPICKINGCAPACITY", "defMESPickingCapacity", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACDEFMESRESVSTOKKEYID", "defMESResvStokKeyId", "int?", "number", "", "StocksModel", "DefMESResvStok", "F", "F", "F" },
                    { "FACDEFMESSTOKKEYID", "defMESStokKeyId", "int?", "number", "", "StocksModel", "DefMESStok", "F", "F", "F" },
                    { "FACDEFORDSUPPSTOKKEYID", "defOrdSuppStokKeyId", "int?", "number", "", "StocksModel", "DefOrdSuppStok", "F", "F", "F" },
                    { "FACDEFPRODTRACETYPE", "defProdTraceType", "int?", "number", "FactoryDefProdTraceType", "", "", "F", "F", "F" },
                    { "FACDEFPRODUCTSTOKKEYID", "defProductStokKeyId", "int?", "number", "", "StocksModel", "DefProductStok", "F", "F", "F" },
                    { "FACDEFSERIALDISPRESTRICT", "defSerialDispRestrict", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACDEFSUPPCALKEYID", "defSuppCalKeyId", "int?", "number", "", "CalendarModel", "DefSuppCal", "F", "F", "F" },
                    { "FACDEFSUPPORDERDELTIME", "defSuppOrderDelTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACDEFSUPPORDERHANDLTIME", "defSuppOrderHandlTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACDEFSUPPORDERRAMPTIME", "defSuppOrderRampTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACDEFSUPPORDERTRANSTIME", "defSuppOrderTransTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACDEFWPLANKEYID", "defWPlanKeyId", "int?", "number", "", "WeightPlanModel", "DefWPlan", "F", "F", "F" },
                    { "FACDELADDRESS1", "delAddress1", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACDELADDRESS2", "delAddress2", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACDELCITY", "delCity", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACDELCOUNTRY", "delCountry", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACDELEMAIL", "delEmail", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACDELFAX", "delFax", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACDELPKEYID", "delPKeyId", "int?", "number", "", "DeliveryPlanModel", "DelP", "F", "F", "F" },
                    { "FACDELTASCANMODE", "deltaScanMode", "int?", "number", "DeltaScanMode", "", "", "F", "F", "F" },
                    { "FACDELTELEPHONE", "delTelephone", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACDROPITEMSUPPOPORDERS", "dropItemSuppOpOrders", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "FACEMAIL", "email", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACENDOCYCLETOCAB", "endoCycleToCab", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACENDODEFCABKEYID", "endoDefCabKeyId", "int?", "number", "", "StocksModel", "EndoDefCab", "F", "F", "F" },
                    { "FACENDODEFFSPLKEYID", "endoDefFSPlKeyId", "int?", "number", "", "FixedStockPlacementsModel", "EndoDefFSPl", "F", "F", "F" },
                    { "FACENDODRYINGMODE", "endodryingmode", "int?", "number", "ManualEndoDryingMode", "", "", "F", "F", "F" },
                    { "FACENDOHATKEYID", "endoHaTKeyId", "int?", "number", "", "HandlingTypesModel", "EndoHaT", "F", "F", "F" },
                    { "FACENDOSETIME", "endoSETime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACENDOSHELFDELAY", "endoShelfDelay", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACENDOSHELFRELTIME", "endoShelfRelTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACEXPIRETYPE", "expiretype", "int", "number", "ExpireType", "", "", "F", "F", "F" },
                    { "FACFACRESTRICTMODE", "facrestrictmode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACFACTORY", "factory", "string", "string", "", "", "", "F", "T", "F" },
                    { "FACFAX", "fax", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACFIXEDPRICES", "fixedPrices", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FACFTMAXCODEDURATION", "fTMaxCodeDuration", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FACFTMAXPLANDURATION", "fTMaxPlanDuration", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FACFTPLKEYID", "fTPlKeyId", "int?", "number", "", "FastTrackPlanModel", "FTPl", "F", "F", "F" },
                    { "FACGUESTPROFKEYID", "guestprofKeyId", "int?", "number", "", "ProfileModel", "Guestprof", "F", "F", "F" },
                    { "FACHOURCOSTS", "hourCosts", "decimal", "number", "", "", "", "F", "F", "F" },
                    { "FACINCITEMSTOCKONPACK", "incItemStockOnPack", "int?", "number", "IncNonDispItemStockOnPack", "", "", "F", "F", "F" },
                    { "FACINDICAPPROVELOCAKEYID", "indicApproveLocaKeyId", "int?", "number", "", "LocationModel", "IndicApproveLoca", "F", "F", "F" },
                    { "FACINDICDISAPPLOCAKEYID", "indicDisappLocaKeyId", "int?", "number", "", "LocationModel", "IndicDisappLoca", "F", "F", "F" },
                    { "FACINDICPENDINGLOCAKEYID", "indicPendingLocaKeyId", "int?", "number", "", "LocationModel", "IndicPendingLoca", "F", "F", "F" },
                    { "FACITEMALTPRICEMODE", "itemAltPriceMode", "int?", "number", "ItemAltPricingMode", "", "", "F", "F", "F" },
                    { "FACITEMDISPALTPRICEMODE", "itemDispAltPriceMode", "int?", "number", "ItemAltPricingMode", "", "", "F", "F", "F" },
                    { "FACITEMDISPPRICEMODE", "itemDispPriceMode", "int?", "number", "ItemPricingMode", "", "", "F", "F", "F" },
                    { "FACITEMPRICEMODE", "itemPriceMode", "int?", "number", "ItemPricingMode", "", "", "F", "F", "F" },
                    { "FACLOADNUMBERUSAGE", "loadnumberUsage", "int", "number", "", "", "", "F", "F", "F" },
                    { "FACMONEYROUNDING", "moneyRounding", "double", "number", "", "", "", "F", "F", "F" },
                    { "FACNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACORDERBOOKINGMODE", "orderBookingMode", "int?", "number", "FacOrderBookingMode", "", "", "F", "F", "F" },
                    { "FACPREDISPATCH", "preDispatch", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FACREFNO", "refNo", "int", "number", "", "", "", "F", "F", "F" },
                    { "FACREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACREPAIRERROR", "repairError", "int?", "number", "", "TextModel", "RepairErrorText", "F", "F", "F" },
                    { "FACREPAIRMODE", "repairmode", "int", "number", "RepairMode", "", "", "F", "F", "F" },
                    { "FACSBFTALLSTOCKS", "sBFTAllStocks", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FACSBFTBLOCKSTARTEDOP", "sBFTBlockStartedOp", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FACSBFTDISPATCHEDLGRPKEYID", "sBFTDispatchedLGrpKeyId", "int?", "number", "", "LocationGroupModel", "SBFTDispatchedLGrp", "F", "F", "F" },
                    { "FACSBFTESCFTCOKEYID", "sBFTEscFTCoKeyId", "int?", "number", "", "FastTrackCodeModel", "SBFTEscFTCo", "F", "F", "F" },
                    { "FACSBFTESCTIME", "sBFTEscTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACSBFTFTCOKEYID", "sBFTFTCoKeyId", "int?", "number", "", "FastTrackCodeModel", "SBFTFTCo", "F", "F", "F" },
                    { "FACSBFTMAXDELTIME", "sBFTMaxDelTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACSBFTMINDELTIME", "sBFTMinDelTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACSBFTMODE", "sBFTMode", "int?", "number", "FastTrackStockBasedMode", "", "", "F", "F", "F" },
                    { "FACSBFTORDERSFILTER", "sBFTOrdersFilter", "int?", "number", "FastTrackStockBasedOrdersFilter", "", "", "F", "F", "F" },
                    { "FACSEALCOUNT", "sealCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACSEALPRINT", "sealPrint", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACSETWEIGHTUSAGE", "setweightusage", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FACSHORTNAME", "shortname", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "FACSTGRKEYID", "stgrKeyId", "int?", "number", "", "StockGroupModel", "Stgr", "F", "F", "F" },
                    { "FACSUAMATCHCONDITIONS", "sUAMatchConditions", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACSUAMAXUSERCOMPLEXITY", "sUAMaxUserComplexity", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACSUAMINPRODCOMPLEXITY", "sUAMinProdComplexity", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACSUAREQPRODTYPE", "sUAReqProdType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACTELEPHONE", "telephone", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACTRACESTOKKEYID", "traceStokKeyId", "int?", "number", "", "StocksModel", "TraceStok", "F", "F", "F" },
                    { "FACTRANSITSTOKKEYID", "transitStokKeyId", "int?", "number", "", "StocksModel", "TransitStok", "F", "F", "F" },
                    { "FACTYPE", "type", "int", "number", "", "", "", "F", "F", "F" },
                    { "FACUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACUISTARTMODE", "uIStartMode", "int?", "number", "ScanUIStartMode", "", "", "F", "F", "F" },
                    { "FACUSECOLORFIELDS", "useColorFields", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FACUSEDISPSTOCKONPACK", "usedispstockonpack", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FACUSENTLOGIN", "useNTLogin", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACWEBITEMLOCATORCOLUMNS", "webitemlocatorcolumns", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACWEBLOCAKEYID", "webLocaKeyId", "int?", "number", "", "LocationModel", "WebLoca", "F", "F", "F" },
                    { "FACWEBORDERINITSTATUS", "webOrderInitStatus", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FACWEBPRODLOCATORCOLUMNS", "webprodlocatorcolumns", "string", "string", "", "", "", "F", "F", "F" },
                    { "FACWEBSITE", "website", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACTORY",
                    "FactoryModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryAutoFTStocksModel", stringComparison) || modelOrTableName.Equals("TFACTORYAUTOFTSTOCKS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FAFTSFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FAFTSSTOKKEYID", "stokKeyId", "int", "number", "", "StocksModel", "Stok", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACTORYAUTOFTSTOCKS",
                    "FactoryAutoFTStocksModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryCountChangeReasonModel", stringComparison) || modelOrTableName.Equals("TFACCCRE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FCCCRECCREKEYID", "cCReKeyId", "int", "number", "", "CountChangeReasonModel", "CCRe", "F", "F", "F" },
                    { "FCCCREFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FCCCREPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACCCRE",
                    "FactoryCountChangeReasonModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryCustomersModel", stringComparison) || modelOrTableName.Equals("TFACCUST", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FCCUSTCUSTKEYID", "custKeyId", "int", "number", "", "CustomerModel", "Cust", "F", "F", "F" },
                    { "FCCUSTFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FCCUSTPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACCUST",
                    "FactoryCustomersModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryItemGroupsModel", stringComparison) || modelOrTableName.Equals("TFACITGRP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FCITGRPFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FCITGRPITGRPKEYID", "itgrpKeyId", "int", "number", "", "ItemGroupModel", "Itgrp", "F", "F", "F" },
                    { "FCITGRPPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACITGRP",
                    "FactoryItemGroupsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryItemsModel", stringComparison) || modelOrTableName.Equals("TFACITEM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FCITEMFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FCITEMITEMKEYID", "itemKeyId", "int", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "FCITEMPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACITEM",
                    "FactoryItemsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryItemSpecialitiesModel", stringComparison) || modelOrTableName.Equals("TFACITSPC", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FCITSPCFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FCITSPCITSPCKEYID", "itspcKeyId", "int", "number", "", "ItemSpecialtyModel", "Itspc", "F", "F", "F" },
                    { "FCITSPCPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACITSPC",
                    "FactoryItemSpecialitiesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryPackingsModel", stringComparison) || modelOrTableName.Equals("TFACPACK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FCPACKFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FCPACKPACKKEYID", "packKeyId", "int", "number", "", "PackingModel", "Pack", "F", "F", "F" },
                    { "FCPACKPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACPACK",
                    "FactoryPackingsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryProductsModel", stringComparison) || modelOrTableName.Equals("TFACPROD", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FCPRODFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FCPRODPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FCPRODPRODKEYID", "prodKeyId", "int", "number", "", "ProductModel", "Prod", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACPROD",
                    "FactoryProductsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryRepairTypeModel", stringComparison) || modelOrTableName.Equals("TFACRPTYP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FCRPTYPFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FCRPTYPPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FCRPTYPRPTYPKEYID", "rptypKeyId", "int", "number", "", "RepairTypeModel", "Rptyp", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACRPTYP",
                    "FactoryRepairTypeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryStandardCommentModel", stringComparison) || modelOrTableName.Equals("TFACSTDCOMMENT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FCSTDCFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FCSTDCPPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FCSTDCSTDCOMKEYID", "stdComKeyId", "int", "number", "", "StandardCommentModel", "StdCom", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACSTDCOMMENT",
                    "FactoryStandardCommentModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactorySuppliersModel", stringComparison) || modelOrTableName.Equals("TFACSUPP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FCSUPPFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FCSUPPPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FCSUPPSUPPKEYID", "suppKeyId", "int", "number", "", "SupplierModel", "Supp", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACSUPP",
                    "FactorySuppliersModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryTimeRuleModel", stringComparison) || modelOrTableName.Equals("TFACTIMERULEGROUP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TFACTIMERULEGROUP",
                    "FactoryTimeRuleModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FactoryUsersModel", stringComparison) || modelOrTableName.Equals("TFACUSER", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FCUSERFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FCUSERPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FCUSERUSEGUESTPROFILE", "useguestprofile", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FCUSERUSERKEYID", "userKeyId", "int", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFACUSER",
                    "FactoryUsersModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FakeStockModel", stringComparison) || modelOrTableName.Equals("TFAKESTK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FASTKDELIVEREDCOUNT", "deliveredCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FASTKPACKEDCOUNT", "packedCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FASTKPRODKEYID", "prodKeyId", "int", "number", "", "ProductModel", "Prod", "F", "F", "F" },
                    { "FASTKREPAIRCOUNT", "repairCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FASTKSTOCKCOUNT", "stockCount", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFAKESTK",
                    "FakeStockModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FastTrackCodeModel", stringComparison) || modelOrTableName.Equals("TFASTTRACKCODE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FTCOKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "FTCO_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FTCO_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "FTCO_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FTCO_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "FTCOCODE", "code", "string", "string", "", "", "", "F", "T", "F" },
                    { "FTCODESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "FTCODISPLAYMODE", "displayMode", "int?", "number", "FastTrackDisplayMode", "", "", "F", "F", "F" },
                    { "FTCOENDLOGRPKEYID", "endLoGrpKeyId", "int?", "number", "", "LocationGroupModel", "EndLoGrp", "F", "F", "F" },
                    { "FTCOENDSTATUS", "endStatus", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FTCOENDTIME", "endTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FTCOINVOICEITEMKEYID", "invoiceItemKeyId", "int?", "number", "", "ItemModel", "InvoiceItem", "F", "F", "F" },
                    { "FTCOINVOICEPRICE", "invoicePrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "FTCOINVOICETO", "invoiceTo", "int", "number", "FastTrackInvoiceType", "", "", "F", "F", "F" },
                    { "FTCOINVOICEWITHUNIT", "invoiceWithUnit", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FTCONAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "FTCOPRIORITY", "priority", "int", "number", "", "", "", "F", "F", "F" },
                    { "FTCOSTARTLOGRPKEYID", "startLoGrpKeyId", "int?", "number", "", "LocationGroupModel", "StartLoGrp", "F", "F", "F" },
                    { "FTCOSTARTSTATUS", "startStatus", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FTCOSTARTTIME", "startTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FTCOSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "FTCOTYPE", "type", "int", "number", "FastTrackCodeType", "", "", "F", "F", "F" },
                    { "FTCOWEEKDAYS", "weekdays", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFASTTRACKCODE",
                    "FastTrackCodeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FastTrackPlanModel", stringComparison) || modelOrTableName.Equals("TFASTTRACKPLAN", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FTPLKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "FTPL_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FTPL_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "FTPL_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FTPL_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "FTPLDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "FTPLDISPLAYMODE", "displayMode", "int?", "number", "FastTrackDisplayMode", "", "", "F", "F", "F" },
                    { "FTPLINVOICEITEMKEYID", "invoiceItemKeyId", "int?", "number", "", "ItemModel", "InvoiceItem", "F", "F", "F" },
                    { "FTPLINVOICEPRICE", "invoicePrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "FTPLINVOICETO", "invoiceTo", "int?", "number", "FastTrackInvoiceType", "", "", "F", "F", "F" },
                    { "FTPLINVOICEWITHUNIT", "invoiceWithUnit", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FTPLNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "FTPLPLAN", "plan", "string", "string", "", "", "", "F", "T", "F" },
                    { "FTPLPRIORITY", "priority", "int", "number", "", "", "", "F", "F", "F" },
                    { "FTPLSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFASTTRACKPLAN",
                    "FastTrackPlanModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FastTrackPlanStepsModel", stringComparison) || modelOrTableName.Equals("TFASTTRACKPLANSTEPS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FTPLSENDLOCAKEYID", "endLocaKeyId", "int?", "number", "", "LocationModel", "EndLoca", "F", "F", "F" },
                    { "FTPLSENDLOGRPKEYID", "endLoGrpKeyId", "int?", "number", "", "LocationGroupModel", "EndLoGrp", "F", "F", "F" },
                    { "FTPLSENDUNITSTATUS", "endUnitStatus", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FTPLSFTPLKEYID", "fTPLKeyId", "int", "number", "", "FastTrackPlanModel", "FTPL", "F", "F", "F" },
                    { "FTPLSSTARTLOCAKEYID", "startLocaKeyId", "int?", "number", "", "LocationModel", "StartLoca", "F", "F", "F" },
                    { "FTPLSSTARTLOGRPKEYID", "startLoGrpKeyId", "int?", "number", "", "LocationGroupModel", "StartLoGrp", "F", "F", "F" },
                    { "FTPLSSTARTUNITSTATUS", "startUnitStatus", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FTPLSSTEPNO", "stepNo", "int", "number", "", "", "", "F", "F", "F" },
                    { "FTPLSTIMESTANDARD", "timeStandard", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFASTTRACKPLANSTEPS",
                    "FastTrackPlanStepsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FastTrackRulesModel", stringComparison) || modelOrTableName.Equals("TFASTTRACKRULES", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FTRUKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "FTRU_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FTRU_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "FTRU_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FTRU_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "FTRUCHECKEDAT", "checkedAt", "int", "number", "", "", "", "F", "F", "F" },
                    { "FTRUCHECKLOCGRPKEYID", "checkLocGrpKeyId", "int?", "number", "", "LocationGroupModel", "CheckLocGrp", "F", "F", "F" },
                    { "FTRUDEFINITION", "definition", "string", "string", "", "", "", "F", "F", "F" },
                    { "FTRUDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "FTRUDISPLAYMODE", "displayMode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FTRUINVOICEITEMKEYID", "invoiceItemKeyId", "int?", "number", "", "ItemModel", "InvoiceItem", "F", "F", "F" },
                    { "FTRUINVOICEPRICE", "invoicePrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "FTRUINVOICETO", "invoiceTo", "int", "number", "", "", "", "F", "F", "F" },
                    { "FTRUINVOICEWITHUNIT", "invoiceWithUnit", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FTRUNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "FTRUPRIORITY", "priority", "int", "number", "", "", "", "F", "F", "F" },
                    { "FTRURULE", "rule", "string", "string", "", "", "", "F", "T", "F" },
                    { "FTRUSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "FTRUSYSID", "sysid", "int?", "number", "", "", "", "F", "F", "F" },
                    { "FTRUUNITSTATUSFILTER", "unitStatusFilter", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFASTTRACKRULES",
                    "FastTrackRulesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FastTrackRuleScopeModel", stringComparison) || modelOrTableName.Equals("TFASTTRACKRULESCOPE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FTRSCALLOWCHANGE", "allowchange", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FTRSCAPPLYTOALL", "applytoall", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FTRSCFTRUKEYID", "fTRuKeyId", "int", "number", "", "FastTrackRulesModel", "FTRu", "F", "F", "F" },
                    { "FTRSCMEMBERTYPE", "memberType", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFASTTRACKRULESCOPE",
                    "FastTrackRuleScopeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FastTrackRuleSelectionModel", stringComparison) || modelOrTableName.Equals("TFASTTRACKRULESELECTION", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FTRUSENABLED", "enabled", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "FTRUSFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FTRUSFTRUKEYID", "fTRuKeyId", "int", "number", "", "FastTrackRulesModel", "FTRu", "F", "F", "F" },
                    { "FTRUSPRODKEYID", "prodKeyId", "int", "number", "", "ProductModel", "Prod", "F", "F", "F" },
                    { "FTRUSSERIKEYID", "seriKeyId", "int", "number", "", "SerialModel", "Seri", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFASTTRACKRULESELECTION",
                    "FastTrackRuleSelectionModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FastTrackTempCodesModel", stringComparison) || modelOrTableName.Equals("TFASTTRACKTEMPCODES", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FTTMCFTCOKEYID", "fTCoKeyId", "int", "number", "", "FastTrackCodeModel", "FTCo", "F", "F", "F" },
                    { "FTTMCFTTMPKEYID", "fTTmpKeyId", "int", "number", "", "FastTrackTemplateModel", "FTTmp", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFASTTRACKTEMPCODES",
                    "FastTrackTempCodesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FastTrackTemplateModel", stringComparison) || modelOrTableName.Equals("TFASTTRACKTEMPLATE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FTTMPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "FTTMP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FTTMP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "FTTMP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "FTTMP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "FTTMPDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "FTTMPNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "FTTMPTEMPLATE", "template", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TFASTTRACKTEMPLATE",
                    "FastTrackTemplateModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FavoritesModel", stringComparison) || modelOrTableName.Equals("TFAVORITES", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FAVAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "FAVFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "FAVLOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "FAVREFCUSTKEYID", "refCustKeyId", "int?", "number", "", "CustomerModel", "RefCust", "F", "F", "F" },
                    { "FAVREFDOCTKEYID", "refDoctKeyId", "int?", "number", "", "DoctorModel", "RefDoct", "F", "F", "F" },
                    { "FAVREFFTCOKEYID", "refFtCoKeyId", "int?", "number", "", "FastTrackCodeModel", "RefFtCo", "F", "F", "F" },
                    { "FAVREFFTPLKEYID", "refFtPlKeyId", "int?", "number", "", "FastTrackPlanModel", "RefFtPl", "F", "F", "F" },
                    { "FAVREFINTYPKEYID", "refInTypKeyId", "int?", "number", "", "IndicatorTypeModel", "RefInTyp", "F", "F", "F" },
                    { "FAVREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "FAVREFMACHKEYID", "refMachKeyId", "int?", "number", "", "MachineModel", "RefMach", "F", "F", "F" },
                    { "FAVREFOPTKEYID", "refOpTKeyId", "int?", "number", "", "OperationTypeModel", "RefOpT", "F", "F", "F" },
                    { "FAVREFPACKKEYID", "refPackKeyId", "int?", "number", "", "PackingModel", "RefPack", "F", "F", "F" },
                    { "FAVREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" },
                    { "FAVREFPROGKEYID", "refProgKeyId", "int?", "number", "", "ProgramModel", "RefProg", "F", "F", "F" },
                    { "FAVREFROOMKEYID", "refRoomKeyId", "int?", "number", "", "RoomModel", "RefRoom", "F", "F", "F" },
                    { "FAVREFRPTYPKEYID", "refRpTypKeyId", "int?", "number", "", "RepairTypeModel", "RefRpTyp", "F", "F", "F" },
                    { "FAVREFSERIKEYID", "refSeriKeyId", "int?", "number", "", "SerialModel", "RefSeri", "F", "F", "F" },
                    { "FAVREFSTOKKEYID", "refStokKeyId", "int?", "number", "", "StocksModel", "RefStok", "F", "F", "F" },
                    { "FAVREFSUPPKEYID", "refSuppKeyId", "int?", "number", "", "SupplierModel", "RefSupp", "F", "F", "F" },
                    { "FAVUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFAVORITES",
                    "FavoritesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FixedStockPlacementsModel", stringComparison) || modelOrTableName.Equals("TFIXEDSTOCKPLACEMENT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FSPLKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "FSPLNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "FSPLPLACEMENT", "placement", "string", "string", "", "", "", "F", "T", "F" },
                    { "FSPLSTOKKEYID", "stokKeyId", "int", "number", "", "StocksModel", "Stok", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFIXEDSTOCKPLACEMENT",
                    "FixedStockPlacementsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("FuzzySearchLogModel", stringComparison) || modelOrTableName.Equals("TFUZZYSEARCHLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "FSLKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "FSLACTIONTYPE", "actionType", "int", "number", "", "", "", "F", "F", "F" },
                    { "FSLCREATEDATE", "createdDate", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "FSLKEYIDS", "keyIDs", "string", "string", "", "", "", "F", "F", "F" },
                    { "FSLTABLENAME", "tableName", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TFUZZYSEARCHLOG",
                    "FuzzySearchLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("GLNInfoModel", stringComparison) || modelOrTableName.Equals("TGLNINFO", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "GLNIKEY", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "GLNI_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "GLNI_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "GLNI_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "GLNI_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "GLNIGLN", "gLN", "string", "string", "", "", "", "F", "T", "F" },
                    { "GLNINAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "GLNIREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TGLNINFO",
                    "GLNInfoModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("HandlingResultModel", stringComparison) || modelOrTableName.Equals("THANDLINGRESULT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "HARERROR", "error", "int", "number", "", "TextModel", "ErrorText", "F", "F", "F" },
                    { "HARHASKEYID", "haSKeyId", "int", "number", "", "HandlingStepModel", "HaS", "F", "F", "F" },
                    { "HARLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "HARREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "HARRESULT", "result", "int", "number", "HandlingStepResult", "", "", "F", "F", "F" },
                    { "HARTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "HARUNIT", "unit", "int", "number", "", "UnitModel", "UnitUnit", "F", "F", "F" },
                    { "HARUSERKEYID", "userKeyId", "int", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "THANDLINGRESULT",
                    "HandlingResultModel",
                    columnToPropertyMappings
                );
            }

            return result;

            #endregion Mappings
        }

        private static ModelToTableMapping CreateModelToTableMapping_03(string modelOrTableName)
        {
            StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase;

            ModelToTableMapping result = null;

            #region Mappings

            if (modelOrTableName.Equals("HandlingStepModel", stringComparison) || modelOrTableName.Equals("THANDLINGSTEP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "HASKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "HAS_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "HAS_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "HAS_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "HAS_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "HASDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "HASNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "HASSTEP", "step", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "THANDLINGSTEP",
                    "HandlingStepModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("HandlingStepBindingModel", stringComparison) || modelOrTableName.Equals("THANDLINGSTEPBINDING", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "HABERROROPTION", "errorOption", "int", "number", "", "", "", "F", "F", "F" },
                    { "HABHASKEYID", "haSKeyId", "int", "number", "", "HandlingStepModel", "HaS", "F", "F", "F" },
                    { "HABHATKEYID", "haTKeyId", "int", "number", "", "HandlingTypesModel", "HaT", "F", "F", "F" },
                    { "HABMANDATORY", "mandatory", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "HABSTEPNO", "stepNo", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "THANDLINGSTEPBINDING",
                    "HandlingStepBindingModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("HandlingTypesModel", stringComparison) || modelOrTableName.Equals("THANDLINGTYPES", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "HATKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "HAT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "HAT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "HAT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "HAT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "HATID", "id", "string", "string", "", "", "", "F", "T", "F" },
                    { "HATNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "HATREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "THANDLINGTYPES",
                    "HandlingTypesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("HistoryModel", stringComparison) || modelOrTableName.Equals("THISTORY", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "HISTFIELD", "field", "string", "string", "", "", "", "F", "F", "F" },
                    { "HISTOPERATION", "operation", "int", "number", "", "", "", "F", "F", "F" },
                    { "HISTTABLE", "table", "string", "string", "", "", "", "F", "F", "F" },
                    { "HISTTABLEKEYID", "tableKeyId", "int", "number", "", "", "", "F", "F", "F" },
                    { "HISTTABLEKEYID2", "tableKeyID2", "int", "number", "", "", "", "F", "F", "F" },
                    { "HISTTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "HISTUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" },
                    { "HISTVALUE", "value", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "THISTORY",
                    "HistoryModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IdenticalArticleGroupModel", stringComparison) || modelOrTableName.Equals("TIDENTICALARTICLEGROUP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INARTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "INARTFORCEALTARTICLES", "forcealtarticles", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "INARTNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "INARTTYPE", "type", "int", "number", "SubstitutionArticleType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TIDENTICALARTICLEGROUP",
                    "IdenticalArticleGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IdenticalTagTypeGroupModel", stringComparison) || modelOrTableName.Equals("TIDENTICALTAGTYPEGROUP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INTTGKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "INTTGTAGTYPE", "tagType", "int", "number", "TagType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TIDENTICALTAGTYPEGROUP",
                    "IdenticalTagTypeGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IdentitySrvPersistedGrantModel", stringComparison) || modelOrTableName.Equals("TIDENTITYSERVERPERSISTEDGRANT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "IDSRVPGCLIENTID", "keyId", "string", "string", "", "", "", "T", "F", "F" },
                    { "IDSRVPGCREATIONTIME", "creationTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "IDSRVPGDATA", "data", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDSRVPGEXPIRATION", "expiration", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "IDSRVPGKEYID", "keyId", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDSRVPGSUBJECTID", "subjectId", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDSRVPGTYPE", "type", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TIDENTITYSERVERPERSISTEDGRANT",
                    "IdentitySrvPersistedGrantModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ImportHolidayLocationModel", stringComparison) || modelOrTableName.Equals("TIMPHOLLOC", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TIMPHOLLOC",
                    "ImportHolidayLocationModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IncubatorBatchModel", stringComparison) || modelOrTableName.Equals("TINCUBATORBATCH", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INCBAUTOINDICATOR", "autoIndicator", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "INCBBATCH", "batch", "int", "number", "", "", "", "F", "T", "F" },
                    { "INCBCHPLKEYID", "chPlKeyId", "int", "number", "", "ChamberPlacementsModel", "ChPl", "F", "F", "F" },
                    { "INCBENDTIME", "endTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "INCBINCUBATIONTIME", "incubationTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "INCBINDICINDICATOR", "indicIndicator", "int", "number", "", "IndicatorModel", "IndicIndicatorIndicator", "F", "F", "F" },
                    { "INCBLOGENDINWLOGAUTOINC", "logEndInwLogAutoInc", "int?", "number", "", "IncubatorWellLogModel", "LogEndInwLogAutoIncIncubatorWellLog", "F", "F", "F" },
                    { "INCBLOGRESULT", "logResult", "int", "number", "IncuBatchLogResult", "", "", "F", "F", "F" },
                    { "INCBLOGRESULTTIME", "logResultTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "INCBLOGSTARTINWLOGAUTOINC", "logStartInwLogAutoInc", "int?", "number", "", "IncubatorWellLogModel", "LogStartInwLogAutoIncIncubatorWellLog", "F", "F", "F" },
                    { "INCBLOGSTATUS", "logStatus", "int", "number", "IncuBatchLogStatus", "", "", "F", "F", "F" },
                    { "INCBREPORTTYPE", "reportType", "int?", "number", "FlowMachReportType", "", "", "F", "F", "F" },
                    { "INCBSTARTTIME", "startTime", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINCUBATORBATCH",
                    "IncubatorBatchModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IncubatorLogModel", stringComparison) || modelOrTableName.Equals("TINCUBATORLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INCLOGAUTOINC", "autoinc", "int", "number", "", "", "", "F", "F", "F" },
                    { "INCLOGCONFIG", "config", "string", "string", "", "", "", "F", "F", "F" },
                    { "INCLOGMACHKEYID", "machKeyId", "int", "number", "", "MachineModel", "Mach", "F", "F", "F" },
                    { "INCLOGMACHTIME", "machTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "INCLOGTEMPERATURE", "temperature", "int?", "number", "", "", "", "F", "F", "F" },
                    { "INCLOGTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "INCLOGTYPE", "type", "int", "number", "FlowMachLogType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINCUBATORLOG",
                    "IncubatorLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IncubatorWellLogModel", stringComparison) || modelOrTableName.Equals("TINCUBATORWELLLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INWLOGAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "INWLOGCHPLKEYID", "chPlKeyId", "int", "number", "", "ChamberPlacementsModel", "ChPl", "F", "F", "F" },
                    { "INWLOGMACHTIME", "machTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "INWLOGNATIVEERROR", "nativeError", "int", "number", "", "", "", "F", "F", "F" },
                    { "INWLOGNATIVEERRORTEXT", "nativeErrorText", "string", "string", "", "", "", "F", "F", "F" },
                    { "INWLOGTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "INWLOGWELLSTATUS", "wellStatus", "int", "number", "WellStatus", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINCUBATORWELLLOG",
                    "IncubatorWellLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IndicatorModel", stringComparison) || modelOrTableName.Equals("TINDICATOR", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INDICINDICATOR", "keyId", "int", "number", "", "", "", "T", "T", "F" },
                    { "INDICBLOCKBATCH", "blockBatch", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "INDICBLOCKDISPATCH", "blockDispatch", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "INDICCBIINDICATOR", "cBIIndicator", "int?", "number", "", "IndicatorModel", "CBIIndicatorIndicator", "F", "F", "F" },
                    { "INDICERROR", "error", "int?", "number", "", "TextModel", "ErrorText", "F", "F", "F" },
                    { "INDICEXTREF", "extRef", "string", "string", "", "", "", "F", "F", "F" },
                    { "INDICINTYPKEYID", "inTypKeyId", "int", "number", "", "IndicatorTypeModel", "InTyp", "F", "F", "F" },
                    { "INDICLINKEDTOBATCH", "linkedToBatch", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "INDICPOSTREGISTERED", "postregistered", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "INDICPROCBATCH", "procBatch", "int?", "number", "", "ProcessModel", "ProcBatchProcess", "F", "F", "F" },
                    { "INDICSERIAL", "serial", "string", "string", "", "", "", "F", "F", "F" },
                    { "INDICSTATUS", "status", "int", "number", "IndicStatus", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINDICATOR",
                    "IndicatorModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IndicatorActionModel", stringComparison) || modelOrTableName.Equals("TINDICACTION", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INACTACTION", "action", "int", "number", "InActAction", "", "", "F", "F", "F" },
                    { "INACTCHPLKEYID", "chPlKeyId", "int?", "number", "", "ChamberPlacementsModel", "ChPl", "F", "F", "F" },
                    { "INACTINDICINDICATOR", "indicIndicator", "int", "number", "", "IndicatorModel", "IndicIndicatorIndicator", "F", "F", "F" },
                    { "INACTINTYSKEYID", "inTySKeyId", "int?", "number", "", "IndicatorTypeStepsModel", "InTyS", "F", "F", "F" },
                    { "INACTRESULT", "result", "int?", "number", "InActResult", "", "", "F", "F", "F" },
                    { "INACTTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "INACTUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINDICACTION",
                    "IndicatorActionModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IndicatorLotInfoModel", stringComparison) || modelOrTableName.Equals("TINDICLOTINFO", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ILOTIN_CREATED", "created", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "ILOTIN_CREATEDKEYID", "createdKeyId", "int", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "ILOTININDICINDICATOR", "indicIndicator", "int", "number", "", "IndicatorModel", "IndicIndicatorIndicator", "F", "F", "F" },
                    { "ILOTINLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "ILOTINLOTINKEYID", "lotInKeyId", "int", "number", "", "LotInfoModel", "LotIn", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINDICLOTINFO",
                    "IndicatorLotInfoModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IndicatorProductModel", stringComparison) || modelOrTableName.Equals("TINDICPROD", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INPRDCOUNT", "count", "int", "number", "", "", "", "F", "F", "F" },
                    { "INPRDINTYPKEYID", "inTypKeyId", "int", "number", "", "IndicatorTypeModel", "InTyp", "F", "F", "F" },
                    { "INPRDPRODKEYID", "prodKeyId", "int", "number", "", "ProductModel", "Prod", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINDICPROD",
                    "IndicatorProductModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IndicatorProgramModel", stringComparison) || modelOrTableName.Equals("TINDICPROG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INPRGCOUNT", "count", "int", "number", "", "", "", "F", "F", "F" },
                    { "INPRGINTYPKEYID", "inTypKeyId", "int", "number", "", "IndicatorTypeModel", "InTyp", "F", "F", "F" },
                    { "INPRGPROGKEYID", "progKeyId", "int", "number", "", "ProgramModel", "Prog", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINDICPROG",
                    "IndicatorProgramModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IndicatorTypeModel", stringComparison) || modelOrTableName.Equals("TINDICATORTYPE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INTYPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "INTYP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "INTYP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "INTYP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "INTYP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "INTYPBITYPKEYID", "bITypKeyId", "int?", "number", "", "BITypeModel", "BITyp", "F", "F", "F" },
                    { "INTYPCBIMODE", "cBIMode", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "INTYPDEDUCTITEMSTOCK", "deductItemStock", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "INTYPDELAYEDONDISAPPROVE", "delayedOnDisapprove", "int", "number", "", "", "", "F", "F", "F" },
                    { "INTYPDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "INTYPIMMEDIATEONDISAPPROVE", "immediateOnDisapprove", "int", "number", "", "", "", "F", "F", "F" },
                    { "INTYPITEMKEYID", "itemKeyId", "int", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "INTYPNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "INTYPRESULTTYPE", "resultType", "int", "number", "InTypResultType", "", "", "F", "F", "F" },
                    { "INTYPSHAREINBATCH", "shareInBatch", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "INTYPSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "INTYPTYPE", "type", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TINDICATORTYPE",
                    "IndicatorTypeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IndicatorTypeStepsModel", stringComparison) || modelOrTableName.Equals("TINDICATORTYPESTEPS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INTYSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "INTYSINCUBATIONTIME", "incubationTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "INTYSINTYPKEYID", "inTypKeyId", "int", "number", "", "IndicatorTypeModel", "InTyp", "F", "F", "F" },
                    { "INTYSNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "INTYSSTEPNO", "stepNo", "int", "number", "", "", "", "F", "T", "F" },
                    { "INTYSSYSID", "sysId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "INTYSUNBLOCK", "unblock", "int", "number", "InTySUnblock", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINDICATORTYPESTEPS",
                    "IndicatorTypeStepsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IndicatorUnitModel", stringComparison) || modelOrTableName.Equals("TINDICUNIT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INUNTINDICINDICATOR", "indicIndicator", "int", "number", "", "IndicatorModel", "IndicIndicatorIndicator", "F", "F", "F" },
                    { "INUNTUNITUNIT", "unitUnit", "int", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINDICUNIT",
                    "IndicatorUnitModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("InfoOverviewConfigModel", stringComparison) || modelOrTableName.Equals("TINFOOVERVIEWCONFIG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "IOCKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "IOC_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "IOC_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "IOC_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "IOC_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "IOCCONFIGCLASS", "configClass", "string", "string", "", "", "", "F", "F", "F" },
                    { "IOCCONFIGDATA", "configData", "string", "string", "", "", "", "F", "F", "F" },
                    { "IOCDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "IOCNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "IOCTYPE", "type", "int", "number", "InfoOverviewType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINFOOVERVIEWCONFIG",
                    "InfoOverviewConfigModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("InfoOverviewPositionLinkModel", stringComparison) || modelOrTableName.Equals("TIOPOSLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "IOPIOCKEYID", "iOCKeyId", "int", "number", "", "InfoOverviewConfigModel", "IOC", "F", "F", "F" },
                    { "IOPLSKEYID", "lSKeyId", "int", "number", "", "LinkStatModel", "LS", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TIOPOSLINK",
                    "InfoOverviewPositionLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("InputDefsModel", stringComparison) || modelOrTableName.Equals("TINPUTDEF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "IDEFKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "IDEF_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "IDEF_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "IDEF_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "IDEF_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "IDEFAUTOACCEPT", "autoAccept", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "IDEFBARLENGTH1", "barLength1", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IDEFBARLENGTH2", "barLength2", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IDEFBARLENGTH3", "barLength3", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IDEFBARLENGTH4", "barLength4", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IDEFBARLENGTH5", "barLength5", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IDEFBAROFFSET1", "barOffset1", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IDEFBAROFFSET2", "barOffset2", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IDEFBAROFFSET3", "barOffset3", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IDEFBAROFFSET4", "barOffset4", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IDEFBAROFFSET5", "barOffset5", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IDEFBARPREFIX1", "barPrefix1", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFBARPREFIX2", "barPrefix2", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFBARPREFIX3", "barPrefix3", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFBARPREFIX4", "barPrefix4", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFBARPREFIX5", "barPrefix5", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFMASK1", "mask1", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFMASK2", "mask2", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFMASK3", "mask3", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFMASK4", "mask4", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFMASK5", "mask5", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "IDEFOPTION1", "option1", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IDEFPROMPT1", "prompt1", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFPROMPT2", "prompt2", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFPROMPT3", "prompt3", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFPROMPT4", "prompt4", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFPROMPT5", "prompt5", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFREQUIRED1", "required1", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "IDEFREQUIRED2", "required2", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "IDEFREQUIRED3", "required3", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "IDEFREQUIRED4", "required4", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "IDEFREQUIRED5", "required5", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "IDEFWHATEXPLANATION", "whatExplanation", "string", "string", "", "", "", "F", "F", "F" },
                    { "IDEFWHATPROMPT", "whatPrompt", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINPUTDEF",
                    "InputDefsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("InputReplyModel", stringComparison) || modelOrTableName.Equals("TINPUTREPLY", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "IREPIDEFKEYID", "iDefKeyId", "int", "number", "", "InputDefsModel", "IDef", "F", "F", "F" },
                    { "IREPLOTKEYID", "lotKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IREPPLOKEYID", "ploKeyId", "int?", "number", "", "PosLocationModel", "Plo", "F", "F", "F" },
                    { "IREPREPLY1", "reply1", "string", "string", "", "", "", "F", "F", "F" },
                    { "IREPREPLY2", "reply2", "string", "string", "", "", "", "F", "F", "F" },
                    { "IREPREPLY3", "reply3", "string", "string", "", "", "", "F", "F", "F" },
                    { "IREPREPLY4", "reply4", "string", "string", "", "", "", "F", "F", "F" },
                    { "IREPREPLY5", "reply5", "string", "string", "", "", "", "F", "F", "F" },
                    { "IREPTIME", "time", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "IREPUNIT", "unit", "int?", "number", "", "UnitModel", "UnitUnit", "F", "F", "F" },
                    { "IREPUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINPUTREPLY",
                    "InputReplyModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IntercomGroupModel", stringComparison) || modelOrTableName.Equals("TINTERCOMGROUP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INTGRPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "INTGRP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "INTGRP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "INTGRP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "INTGRP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "INTGRPFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "INTGRPID", "id", "string", "string", "", "", "", "F", "T", "F" },
                    { "INTGRPNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "INTGRPSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINTERCOMGROUP",
                    "IntercomGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("IntercomGroupMembersModel", stringComparison) || modelOrTableName.Equals("TINTERCOMGROUPMEMBERS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "INTMEMKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "INTMEM_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "INTMEM_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "INTMEM_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "INTMEM_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "INTMEMAGENT", "agent", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "INTMEMINTGRPKEYID", "intGrpKeyId", "int", "number", "", "IntercomGroupModel", "IntGrp", "F", "F", "F" },
                    { "INTMEMLSKEYID", "lsKeyId", "int", "number", "", "LinkStatModel", "Ls", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TINTERCOMGROUPMEMBERS",
                    "IntercomGroupMembersModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("InterfaceSystemsModel", stringComparison) || modelOrTableName.Equals("TIESYSTEMS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "IESYSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "IESYSDESCRIPTION", "description", "string", "string", "", "", "", "F", "F", "F" },
                    { "IESYSID", "id", "int", "number", "", "", "", "F", "T", "F" },
                    { "IESYSNAME", "name", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TIESYSTEMS",
                    "InterfaceSystemsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("InterfaceTableChangesModel", stringComparison) || modelOrTableName.Equals("TIETBLCHANGES", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "IECHNCHANGETYPE", "changeType", "int", "number", "", "", "", "F", "F", "F" },
                    { "IECHNIDENTITY", "identity", "int", "number", "", "", "", "F", "F", "F" },
                    { "IECHNMAINKEYID", "mainKeyId", "int", "number", "", "", "", "F", "F", "F" },
                    { "IECHNMAINKEYIDFIELD", "mainKeyIDField", "string", "string", "", "", "", "F", "F", "F" },
                    { "IECHNMASTERFIELDNAME", "masterFieldName", "string", "string", "", "", "", "F", "F", "F" },
                    { "IECHNMASTERFIELDNEWVALUE", "masterFieldNewValue", "string", "string", "", "", "", "F", "F", "F" },
                    { "IECHNMASTERFIELDOLDVALUE", "masterFieldOldValue", "string", "string", "", "", "", "F", "F", "F" },
                    { "IECHNSECONDKEYID", "secondKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IECHNSECONDKEYIDFIELD", "secondKeyIDField", "string", "string", "", "", "", "F", "F", "F" },
                    { "IECHNTABLENAME", "tableName", "string", "string", "", "", "", "F", "F", "F" },
                    { "IECHNTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TIETBLCHANGES",
                    "InterfaceTableChangesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("InterfaceTableChangeSubsModel", stringComparison) || modelOrTableName.Equals("TIETBLCHANGESUBS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "IETSUBJOBKEYID", "jobKeyId", "int", "number", "", "JobModel", "Job", "F", "F", "F" },
                    { "IETSUBLASTIDENTITY", "lastIdentity", "int?", "number", "", "", "", "F", "F", "F" },
                    { "IETSUBLASTUPDATETIME", "lastUpdateTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "IETSUBSTARTTIME", "startTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "IETSUBTABLENAME", "tableName", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TIETBLCHANGESUBS",
                    "InterfaceTableChangeSubsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ItemModel", stringComparison) || modelOrTableName.Equals("TITEM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ITEMKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ITEM_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ITEM_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "ITEM_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ITEM_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "ITEMBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMCATKEYID", "catKeyId", "int?", "number", "", "CatalogModel", "Cat", "F", "F", "F" },
                    { "ITEMCOLOR", "color", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMCOMPOSITE", "composite", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "ITEMCOSTPRICE", "costprice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMDIFFICULTY", "difficulty", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMDIFFICULTYMODE", "difficultyMode", "int", "number", "ItemDifficultyMode", "", "", "F", "F", "F" },
                    { "ITEMDISCARDLEVEL", "discardLevel", "int", "number", "", "", "", "F", "F", "F" },
                    { "ITEMDISPOSABLE", "disposable", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "ITEMDISPPRICE", "dispPrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMEXTERNALTEXT", "externalText", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMEXTERNALTYPE", "externalType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "ITEMHOSPITALDESCRIPTION", "hospitalDescription", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMINARTKEYID", "inArtKeyId", "int?", "number", "", "IdenticalArticleGroupModel", "InArt", "F", "F", "F" },
                    { "ITEMINFO", "info", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMITEM", "item", "string", "string", "", "", "", "F", "T", "F" },
                    { "ITEMITGRPKEYID", "itGrpKeyId", "int?", "number", "", "ItemGroupModel", "ItGrp", "F", "F", "F" },
                    { "ITEMITSPCKEYID", "itspcKeyId", "int?", "number", "", "ItemSpecialtyModel", "Itspc", "F", "F", "F" },
                    { "ITEMLENGTH", "length", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMLIFESPAN", "lifespan", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMMANUFACTORNO", "manufactorNo", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMMANUKEYID", "manuKeyId", "int?", "number", "", "SupplierModel", "Manu", "F", "F", "F" },
                    { "ITEMMATERIAL", "material", "int?", "number", "", "TextModel", "MaterialText", "F", "F", "F" },
                    { "ITEMMATERIALSNUM", "materialsNum", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMMAXPRESSURE", "maxPressure", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMMAXTEMP", "maxTemp", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMORDERLEADTIME", "orderLeadTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMORDERMINCOUNT", "orderMinCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMORDERSTDCOUNT", "orderStdCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMORDERSTDUOMKEYID", "orderstduomKeyId", "int?", "number", "", "ItemUOMModel", "Orderstduom", "F", "F", "F" },
                    { "ITEMOTHERMINCOUNT", "otherMinCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMOTHERUNITCOUNT", "otherUnitCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMOTHERUOMKEYID", "otheruomKeyId", "int?", "number", "", "ItemUOMModel", "Otheruom", "F", "F", "F" },
                    { "ITEMREPAIRVENDORKEYID", "repairVendorKeyId", "int?", "number", "", "SupplierModel", "RepairVendor", "F", "F", "F" },
                    { "ITEMRESERVATIONMODE", "reservationMode", "int?", "number", "ItemReservationMode", "", "", "F", "F", "F" },
                    { "ITEMSALESMINCOUNT", "salesMinCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMSALESPRCODE", "salesPrCode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMSALESPRICE", "salesPrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMSALESRESTRICTION", "salesRestriction", "int?", "number", "ItemSalesRestriction", "", "", "F", "F", "F" },
                    { "ITEMSALESUNITCOUNT", "salesUnitCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMSALESUOMKEYID", "salesuomKeyId", "int?", "number", "", "ItemUOMModel", "Salesuom", "F", "F", "F" },
                    { "ITEMSERIALMASK", "serialmask", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMSHELVINGTIME", "shelvingTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMSPLITCOUNT", "splitCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "ITEMSUPPKEYID", "suppKeyId", "int?", "number", "", "SupplierModel", "Supp", "F", "F", "F" },
                    { "ITEMSUPPLIERNO", "supplierNo", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMTAGTKEYID", "tagTKeyId", "int?", "number", "", "TagTypeModel", "TagT", "F", "F", "F" },
                    { "ITEMTEXT", "text", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMTIP", "tip", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMTOTALCOSTPRICE", "totalcostprice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMTOTALSALESPRICE", "totalsalesprice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMTOTALUSAGEPRICE", "totalusageprice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMTRACETYPE", "traceType", "int?", "number", "ItemTraceType", "", "", "F", "F", "F" },
                    { "ITEMTYPE", "type", "int", "number", "", "", "", "F", "F", "F" },
                    { "ITEMUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITEMUNITCOUNT", "unitcount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMUOMKEYID", "uomKeyId", "int?", "number", "", "ItemUOMModel", "Uom", "F", "F", "F" },
                    { "ITEMUSAGEPRCODE", "usagePrCode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMUSAGEPRICE", "usagePrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMWARRENTY", "warrenty", "int?", "number", "", "TextModel", "WarrentyText", "F", "F", "F" },
                    { "ITEMWEIGHT", "weight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMWEIGHTMODE", "weightMode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ITEMWIDTH", "width", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TITEM",
                    "ItemModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ItemExchangeModel", stringComparison) || modelOrTableName.Equals("TITEMEXCHANGE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "IEXAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "IEXMISSING", "missing", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "IEXREFFACKEYID", "refFacKeyId", "int", "number", "", "FactoryModel", "RefFac", "F", "F", "F" },
                    { "IEXREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "IEXREFLOCAKEYID", "refLocaKeyId", "int", "number", "", "LocationModel", "RefLoca", "F", "F", "F" },
                    { "IEXREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" },
                    { "IEXREFPRODSERIKEYID", "refProdSeriKeyId", "int?", "number", "", "SerialModel", "RefProdSeri", "F", "F", "F" },
                    { "IEXREFSERIKEYID", "refSeriKeyId", "int?", "number", "", "SerialModel", "RefSeri", "F", "F", "F" },
                    { "IEXREFUNITUNIT", "refUnitUnit", "int?", "number", "", "UnitModel", "RefUnitUnitUnit", "F", "F", "F" },
                    { "IEXREFUSERKEYID", "refUserKeyId", "int", "number", "", "UserModel", "RefUser", "F", "F", "F" },
                    { "IEXTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TITEMEXCHANGE",
                    "ItemExchangeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ItemGroupModel", stringComparison) || modelOrTableName.Equals("TITEMGRP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ITGRPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ITGRPDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITGRPFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "ITGRPITEMGROUP", "itemGroup", "string", "string", "", "", "", "F", "T", "F" },
                    { "ITGRPNAME", "name", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TITEMGRP",
                    "ItemGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ItemReservationModel", stringComparison) || modelOrTableName.Equals("TITEMRESERVATION", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "IRESVKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "IRESVCOUNT", "count", "int", "number", "", "", "", "F", "F", "F" },
                    { "IRESVEXPDELTIME", "expDelTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "IRESVITEMKEYID", "itemKeyId", "int", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "IRESVOLNLINE", "olnLine", "int", "number", "", "", "", "F", "F", "F" },
                    { "IRESVORDKEYID", "ordKeyId", "int", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "IRESVREQDELTIME", "reqDelTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "IRESVSTATE", "state", "int", "number", "ReservationState", "", "", "F", "F", "F" },
                    { "IRESVSTATEFIRSTOK", "stateFirstOk", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "IRESVSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "IRESVSTOKKEYID", "stokKeyId", "int?", "number", "", "StocksModel", "Stok", "F", "F", "F" },
                    { "IRESVTYPE", "type", "int", "number", "ItemReservationType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TITEMRESERVATION",
                    "ItemReservationModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ItemSerialUsageModel", stringComparison) || modelOrTableName.Equals("TITEMSERIALUSAGE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ISUITEMSERIKEYID", "itemSeriKeyId", "int", "number", "", "SerialModel", "ItemSeri", "F", "F", "F" },
                    { "ISULOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "ISUPACKPRODKEYID", "packProdKeyId", "int?", "number", "", "ProductModel", "PackProd", "F", "F", "F" },
                    { "ISUPACKUSERKEYID", "packUserKeyId", "int?", "number", "", "UserModel", "PackUser", "F", "F", "F" },
                    { "ISUPRODSERIKEYID", "prodSeriKeyId", "int?", "number", "", "SerialModel", "ProdSeri", "F", "F", "F" },
                    { "ISUSERIALTYPE", "serialType", "int", "number", "SerialType", "", "", "F", "F", "F" },
                    { "ISUUNITUNIT", "unitUnit", "int?", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TITEMSERIALUSAGE",
                    "ItemSerialUsageModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ItemSpecialtyModel", stringComparison) || modelOrTableName.Equals("TITEMSPC", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ITSPCKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ITSPCDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITSPCFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "ITSPCNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITSPCSPECIALTY", "specialty", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TITEMSPC",
                    "ItemSpecialtyModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ItemUOMModel", stringComparison) || modelOrTableName.Equals("TITEMUOM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ITUOMKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ITUOMDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITUOMNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "ITUOMUOM", "uom", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TITEMUOM",
                    "ItemUOMModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("JobModel", stringComparison) || modelOrTableName.Equals("TJOB", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "JOBKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "JOBCONFIGDATA", "configData", "string", "string", "", "", "", "F", "F", "F" },
                    { "JOBDESCRIPTION", "description", "string", "string", "", "", "", "F", "F", "F" },
                    { "JOBDISABLED", "disabled", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "JOBDISPLAYINDEX", "displayIndex", "int?", "number", "", "", "", "F", "F", "F" },
                    { "JOBIESYSKEYID", "iESysKeyId", "int?", "number", "", "InterfaceSystemsModel", "IESys", "F", "F", "F" },
                    { "JOBJGRPKEYID", "jGrpKeyId", "int", "number", "", "JobGroupModel", "JGrp", "F", "F", "F" },
                    { "JOBLASTPACKAGEID", "lastPackageId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "JOBMASTERJOBKEYID", "masterjobKeyId", "int?", "number", "", "JobModel", "Masterjob", "F", "F", "F" },
                    { "JOBNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "JOBSCHEDULE", "schedule", "string", "string", "", "", "", "F", "F", "F" },
                    { "JOBSYSCONFIGDATA", "sysConfigData", "string", "string", "", "", "", "F", "F", "F" },
                    { "JOBSYSNAME", "sysName", "string", "string", "", "", "", "F", "F", "F" },
                    { "JOBTYPEID", "typeId", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TJOB",
                    "JobModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("JobDataQueueModel", stringComparison) || modelOrTableName.Equals("TJOBDATAQUEUE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "JDQKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "JDQDESTFAILACTION", "destFailAction", "int?", "number", "JobDataQueueDestFailAction", "", "", "F", "F", "F" },
                    { "JDQDESTJOBKEYID", "destJobKeyId", "int", "number", "", "JobModel", "DestJob", "F", "F", "F" },
                    { "JDQDESTJOBRKEYID", "destJobRKeyId", "int?", "number", "", "JobRunsModel", "DestJobR", "F", "F", "F" },
                    { "JDQDESTSTATUS", "destStatus", "int?", "number", "JobDataQueueDestStatus", "", "", "F", "F", "F" },
                    { "JDQDESTTIME", "destTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "JDQSOURCEJOBKEYID", "sourceJobKeyId", "int", "number", "", "JobModel", "SourceJob", "F", "F", "F" },
                    { "JDQSOURCEJOBRKEYID", "sourceJobRKeyId", "int?", "number", "", "JobRunsModel", "SourceJobR", "F", "F", "F" },
                    { "JDQSOURCESTATUS", "sourceStatus", "int?", "number", "JobDataQueueSourceStatus", "", "", "F", "F", "F" },
                    { "JDQSOURCETIME", "sourceTime", "DateTime?", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TJOBDATAQUEUE",
                    "JobDataQueueModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("JobGroupModel", stringComparison) || modelOrTableName.Equals("TJOBGRP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "JGRPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "JGRPDESCRIPTION", "description", "string", "string", "", "", "", "F", "F", "F" },
                    { "JGRPDISABLED", "disabled", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "JGRPDISPLAYINDEX", "displayIndex", "int?", "number", "", "", "", "F", "F", "F" },
                    { "JGRPJOBTYPE", "jobType", "int", "number", "JobType", "", "", "F", "F", "F" },
                    { "JGRPJSRVKEYID", "jSrvKeyId", "int", "number", "", "JobServerModel", "JSrv", "F", "F", "F" },
                    { "JGRPNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "JGRPSYSID", "sysId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "JGRPSYSNAME", "sysName", "string", "string", "", "", "", "F", "F", "F" },
                    { "JGRPTYPE", "type", "int", "number", "JobGroupType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TJOBGRP",
                    "JobGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("JobLogModel", stringComparison) || modelOrTableName.Equals("TJOBLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "JOBLAUTOINC", "keyId", "long", "number", "", "", "", "T", "F", "F" },
                    { "JOBLDATA", "data", "string", "string", "", "", "", "F", "F", "F" },
                    { "JOBLEVENT", "event", "int", "number", "", "", "", "F", "F", "F" },
                    { "JOBLJOBKEYID", "jobKeyId", "int?", "number", "", "JobModel", "Job", "F", "F", "F" },
                    { "JOBLJOBRKEYID", "jobRKeyId", "int?", "number", "", "JobRunsModel", "JobR", "F", "F", "F" },
                    { "JOBLJSRVKEYID", "jSrvKeyId", "int", "number", "", "JobServerModel", "JSrv", "F", "F", "F" },
                    { "JOBLMESSAGE", "message", "string", "string", "", "", "", "F", "F", "F" },
                    { "JOBLTIME", "time", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "JOBLTYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TJOBLOG",
                    "JobLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("JobOutputModel", stringComparison) || modelOrTableName.Equals("TJOBOUTPUT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "JOUTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "JOUTDATATYPE", "dataType", "int", "number", "JobOutputType", "", "", "F", "F", "F" },
                    { "JOUTDISPLAYNAME", "displayName", "string", "string", "", "", "", "F", "F", "F" },
                    { "JOUTFILENAME", "filename", "string", "string", "", "", "", "F", "F", "F" },
                    { "JOUTJOBKEYID", "jobKeyId", "int", "number", "", "JobModel", "Job", "F", "F", "F" },
                    { "JOUTJOBRKEYID", "jobRKeyId", "int", "number", "", "JobRunsModel", "JobR", "F", "F", "F" },
                    { "JOUTPACKAGEID", "packageId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "JOUTSYSNAME", "sysName", "string", "string", "", "", "", "F", "T", "F" },
                    { "JOUTTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TJOBOUTPUT",
                    "JobOutputModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("JobRunsModel", stringComparison) || modelOrTableName.Equals("TJOBRUNS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "JOBRKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "JOBRCONFIGDATA", "configData", "string", "string", "", "", "", "F", "F", "F" },
                    { "JOBRENDTIME", "endTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "JOBRIDLERUN", "idleRun", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "JOBRJOBKEYID", "jobKeyId", "int", "number", "", "JobModel", "Job", "F", "F", "F" },
                    { "JOBRJSRVKEYID", "jSrvKeyId", "int", "number", "", "JobServerModel", "JSrv", "F", "F", "F" },
                    { "JOBRRESULT", "result", "int", "number", "", "", "", "F", "F", "F" },
                    { "JOBRSTARTTIME", "startTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "JOBRSYSCONFIGDATA", "sysConfigData", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TJOBRUNS",
                    "JobRunsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("JobServerModel", stringComparison) || modelOrTableName.Equals("TJOBSRV", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "JSRVKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "JSRVCONFIGDATA", "configData", "string", "string", "", "", "", "F", "F", "F" },
                    { "JSRVDESCRIPTION", "description", "string", "string", "", "", "", "F", "F", "F" },
                    { "JSRVLINKSTATID", "linkStatId", "string", "string", "", "", "", "F", "F", "F" },
                    { "JSRVNAME", "name", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TJOBSRV",
                    "JobServerModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("JobTaskModel", stringComparison) || modelOrTableName.Equals("TJOBTASK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TJOBTASK",
                    "JobTaskModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("KPIAlertDefModel", stringComparison) || modelOrTableName.Equals("TKPIALERTDEF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "KPIAKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "KPIATYPE", "type", "int", "number", "", "", "", "F", "F", "F" },
                    { "KPIAVALUE", "value", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TKPIALERTDEF",
                    "KPIAlertDefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("KPIDiplayAlertDefModel", stringComparison) || modelOrTableName.Equals("TKPIDISPLAYALERTDEF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "KPIDAKPIAKEYID", "kPIAKeyId", "int", "number", "", "KPIAlertDefModel", "KPIA", "F", "F", "F" },
                    { "KPIDAKPIDKEYID", "kPIDKeyId", "int", "number", "", "KPIDisplayDefModel", "KPID", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TKPIDISPLAYALERTDEF",
                    "KPIDiplayAlertDefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("KPIDisplayDefModel", stringComparison) || modelOrTableName.Equals("TKPIDISPLAYDEF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "KPIDKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "KPIDCAPTION", "caption", "string", "string", "", "", "", "F", "F", "F" },
                    { "KPIDMEASUREMENT", "measurement", "string", "string", "", "", "", "F", "F", "F" },
                    { "KPIDNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "KPIDSYSID", "sysId", "int", "number", "", "", "", "F", "F", "F" },
                    { "KPIDUPDATEFREQ", "updateFreq", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TKPIDISPLAYDEF",
                    "KPIDisplayDefModel",
                    columnToPropertyMappings
                );
            }

            return result;

            #endregion Mappings
        }

        private static ModelToTableMapping CreateModelToTableMapping_04(string modelOrTableName)
        {
            StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase;

            ModelToTableMapping result = null;

            #region Mappings

            if (modelOrTableName.Equals("KPIFuncDisplayDefModel", stringComparison) || modelOrTableName.Equals("TKPIFUNCDISPLAYDEF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "KPIFDKPIDKEYID", "kPIDKeyId", "int", "number", "", "KPIDisplayDefModel", "KPID", "F", "F", "F" },
                    { "KPIFDKPIFKEYID", "kPIFKeyId", "int", "number", "", "KPIFunctDefModel", "KPIF", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TKPIFUNCDISPLAYDEF",
                    "KPIFuncDisplayDefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("KPIFunctDefModel", stringComparison) || modelOrTableName.Equals("TKPIFUNCTIONDEF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "KPIFKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "KPIFCODEFUNC", "codeFunc", "string", "string", "", "", "", "F", "F", "F" },
                    { "KPIFNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "KPIFSAVEFREQ", "saveFreq", "int", "number", "", "", "", "F", "F", "F" },
                    { "KPIFSAVEHISTTYPE", "savehisttype", "int", "number", "", "", "", "F", "F", "F" },
                    { "KPIFSQLFUNC", "sqlFunc", "string", "string", "", "", "", "F", "F", "F" },
                    { "KPIFSYSID", "sysId", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TKPIFUNCTIONDEF",
                    "KPIFunctDefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("KPIValuesModel", stringComparison) || modelOrTableName.Equals("TKPIVALUES", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "KPIVAUTOINC", "autoinc", "int", "number", "", "", "", "F", "F", "F" },
                    { "KPIVFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "KPIVKPIFKEYID", "kPIFKeyId", "int", "number", "", "KPIFunctDefModel", "KPIF", "F", "F", "F" },
                    { "KPIVPRODTYPE", "prodType", "int", "number", "", "", "", "F", "F", "F" },
                    { "KPIVTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "KPIVVALUE", "alue", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TKPIVALUES",
                    "KPIValuesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("LastValueModel", stringComparison) || modelOrTableName.Equals("TLASTVALUE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "LASTVKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "LASTVVALUE", "value", "string", "string", "", "", "", "F", "F", "F" },
                    { "LASTVVALUETIME", "valueTime", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TLASTVALUE",
                    "LastValueModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("LBWitnessModel", stringComparison) || modelOrTableName.Equals("TLBWITNESS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "LBWID", "id", "int", "number", "", "", "", "F", "F", "F" },
                    { "LBWMASTERHOSTNAME", "masterHostname", "string", "string", "", "", "", "F", "F", "F" },
                    { "LBWMASTERLASTCONTACT", "masterLastContact", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TLBWITNESS",
                    "LBWitnessModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("LicenseBindingModel", stringComparison) || modelOrTableName.Equals("TLICENSEBINDING", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "LICBINDCLIENTID", "clientId", "string", "string", "", "", "", "F", "F", "F" },
                    { "LICBINDCLIENTIPADDRESS", "clientIPAddress", "string", "string", "", "", "", "F", "F", "F" },
                    { "LICBINDCONNECTIONID", "connectionId", "string", "string", "", "", "", "F", "F", "F" },
                    { "LICBINDCREATETIME", "createTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "LICBINDREFRESHTIME", "refreshTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "LICBINDSERVERNAME", "serverName", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TLICENSEBINDING",
                    "LicenseBindingModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("LinkStatModel", stringComparison) || modelOrTableName.Equals("TLINKSTAT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "LSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "LSBLOCKPIPIOS", "blockPIPIOs", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "LSDEFLABELRPL", "defLabelRPL", "int?", "number", "", "", "", "F", "F", "F" },
                    { "LSDEFLISTRPL", "defListRPL", "int?", "number", "", "", "", "F", "F", "F" },
                    { "LSDEFSCALENO", "defScaleNo", "int?", "number", "", "", "", "F", "F", "F" },
                    { "LSID", "id", "string", "string", "", "", "", "F", "T", "F" },
                    { "LSIOCTYPES", "iOCTypes", "int?", "number", "", "", "", "F", "F", "F" },
                    { "LSMAINTMODESTATE", "maintModeState", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TLINKSTAT",
                    "LinkStatModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("LoadingEquipmentModel", stringComparison) || modelOrTableName.Equals("TLOADEQUIP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "LEQKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "LEQ_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "LEQ_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "LEQ_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "LEQ_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "LEQNAME", "name", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TLOADEQUIP",
                    "LoadingEquipmentModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("LoanerHandlingModel", stringComparison) || modelOrTableName.Equals("TLOANERHANDLING", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TLOANERHANDLING",
                    "LoanerHandlingModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("LoanerManProfileModel", stringComparison) || modelOrTableName.Equals("TLOANERMANPROFILE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TLOANERMANPROFILE",
                    "LoanerManProfileModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("LocaGrpMembersModel", stringComparison) || modelOrTableName.Equals("TLOCAGRPMEMBERS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "LGRMLGRPKEYID", "lGrpKeyId", "int", "number", "", "LocationGroupModel", "LGrp", "F", "F", "F" },
                    { "LGRMLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TLOCAGRPMEMBERS",
                    "LocaGrpMembersModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("LocaPrinterModel", stringComparison) || modelOrTableName.Equals("TLOCAPRN", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "LOPRLOCAKEYID", "locaKeyId", "int", "number", "", "", "", "F", "F", "F" },
                    { "LOPRREPTYPE", "repType", "int", "number", "", "", "", "F", "F", "F" },
                    { "LOPRRPL", "rPL", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TLOCAPRN",
                    "LocaPrinterModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("LocationModel", stringComparison) || modelOrTableName.Equals("TLOCATIO", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "LOCAKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "LOCA_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "LOCA_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "LOCA_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "LOCA_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "LOCAAUTOSTOKKEYID", "autoStokKeyId", "int?", "number", "", "StocksModel", "AutoStok", "F", "F", "F" },
                    { "LOCABARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "LOCADEFUSERKEYID", "defUserKeyId", "int?", "number", "", "UserModel", "DefUser", "F", "F", "F" },
                    { "LOCADESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "LOCADIRECTION", "direction", "int", "number", "", "", "", "F", "F", "F" },
                    { "LOCAFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "LOCAIDLEMACROKEYID", "idlemacroKeyId", "int?", "number", "", "MacroModel", "Idlemacro", "F", "F", "F" },
                    { "LOCAIDLEMACROTIME", "idlemacrotime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "LOCAISMASTER", "isMaster", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "LOCAMACROKEYID", "macroKeyId", "int?", "number", "", "MacroModel", "Macro", "F", "F", "F" },
                    { "LOCAMASTERLOCAKEYID", "masterLocaKeyId", "int?", "number", "", "LocationModel", "MasterLoca", "F", "F", "F" },
                    { "LOCAMESCONFIG", "mesConfig", "string", "string", "", "", "", "F", "F", "F" },
                    { "LOCANAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "LOCAPROCESS", "process", "int", "number", "ProcessType", "", "", "F", "F", "F" },
                    { "LOCAPROCESSOPT", "processOpt", "string", "string", "", "", "", "F", "F", "F" },
                    { "LOCASTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "LOCASTOKKEYID", "stokKeyId", "int?", "number", "", "StocksModel", "Stok", "F", "F", "F" },
                    { "LOCASUBPROCESS", "subProcess", "int", "number", "LocaSubProcessType", "", "", "F", "F", "F" },
                    { "LOCAUIAVAILABILITY", "uIAvailability", "int?", "number", "UILocaAvailability", "", "", "F", "F", "F" },
                    { "LOCAUILDKEYID", "uiLdKeyId", "int?", "number", "", "UILayerDefModel", "UiLd", "F", "F", "F" },
                    { "LOCAUISTARTMODE", "uIStartMode", "int?", "number", "ScanUIStartMode", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TLOCATIO",
                    "LocationModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("LocationGroupModel", stringComparison) || modelOrTableName.Equals("TLOCATIONGROUP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "LGRPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "LGRP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "LGRP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "LGRP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "LGRP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "LGRPDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "LGRPLOCATIONGROUP", "locationGroup", "string", "string", "", "", "", "F", "T", "F" },
                    { "LGRPNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "LGRPVICINITY", "vicinity", "bool", "boolean", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TLOCATIONGROUP",
                    "LocationGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("LotInfoModel", stringComparison) || modelOrTableName.Equals("TLOTINFO", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "LOTINKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "LOTIN_CREATED", "created", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "LOTIN_CREATEDKEYID", "createdKeyId", "int", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "LOTIN_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "LOTIN_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "LOTINEXPIREDATE", "expireDate", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "LOTINITEMKEYID", "itemKeyId", "int?", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "LOTINLASTUSED", "lastUsed", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "LOTINLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "LOTINLOT", "lot", "string", "string", "", "", "", "F", "T", "F" },
                    { "LOTINREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "LOTINSTATUS", "status", "int", "number", "LotStatus", "", "", "F", "F", "F" },
                    { "LOTINSUPPKEYID", "suppKeyId", "int?", "number", "", "SupplierModel", "Supp", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TLOTINFO",
                    "LotInfoModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MachConsParamsModel", stringComparison) || modelOrTableName.Equals("TMACHCONSPARAMS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MCOPAMCOTYKEYID", "mCoTyKeyId", "int", "number", "", "MachConsTypeModel", "MCoTy", "F", "F", "F" },
                    { "MCOPAPPAKEYID", "pPaKeyId", "int", "number", "", "ProgramParamModel", "PPa", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACHCONSPARAMS",
                    "MachConsParamsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MachConsTypeModel", stringComparison) || modelOrTableName.Equals("TMACHCONSTYPE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MCOTYKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MCOTYMCTYPKEYID", "mcTypKeyId", "int?", "number", "", "MachineTypeModel", "McTyp", "F", "F", "F" },
                    { "MCOTYNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "MCOTYPUMPCAPACITY", "pumpCapacity", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCOTYSYSTYPE", "sysType", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACHCONSTYPE",
                    "MachConsTypeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MachDisplayGroupModel", stringComparison) || modelOrTableName.Equals("TMACHDISPLAYGROUP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MCDGRPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MCDGRPDISPLAYGROUP", "displayGroup", "string", "string", "", "", "", "F", "T", "F" },
                    { "MCDGRPFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "MCDGRPNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "MCDGRPREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACHDISPLAYGROUP",
                    "MachDisplayGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MachDisplayGroupLinkModel", stringComparison) || modelOrTableName.Equals("TMACHDISPLAYGROUPLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MCDLNKMACHKEYID", "machKeyId", "int", "number", "", "MachineModel", "Mach", "F", "F", "F" },
                    { "MCDLNKMCDGRPKEYID", "mcDGrpKeyId", "int", "number", "", "MachDisplayGroupModel", "McDGrp", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACHDISPLAYGROUPLINK",
                    "MachDisplayGroupLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MachineModel", stringComparison) || modelOrTableName.Equals("TMACHINE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MACHKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MACH_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MACH_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "MACH_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MACH_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "MACHACTUALPROGRAMCHECK", "actualProgramCheck", "int?", "number", "ActualProgramCheck", "", "", "F", "F", "F" },
                    { "MACHAGSKEYID", "agsKeyId", "int?", "number", "", "AGSModel", "Ags", "F", "F", "F" },
                    { "MACHALLOWBATCH", "allowBatch", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHALLOWDATAEXPORT", "allowDataExport", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHALLOWLOG", "allowLog", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHCHARGENUMMODE", "chargenummode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MACHCONFDATA", "confData", "string", "string", "", "", "", "F", "F", "F" },
                    { "MACHCYCLECOUNT", "cycleCount", "int", "number", "", "", "", "F", "F", "F" },
                    { "MACHDEFPROGFROMMODEL", "defProgFromModel", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHDEFPROGKEYID", "defProgKeyId", "int?", "number", "", "ProgramModel", "DefProg", "F", "F", "F" },
                    { "MACHDESTAPPROVELOCAKEYID", "destApproveLocaKeyId", "int?", "number", "", "LocationModel", "DestApproveLoca", "F", "F", "F" },
                    { "MACHDESTDISAPPROVELOCAKEYID", "destDisapproveLocaKeyId", "int?", "number", "", "LocationModel", "DestDisapproveLoca", "F", "F", "F" },
                    { "MACHDESTENDERRORLOCAKEYID", "destEndErrorLocaKeyId", "int?", "number", "", "LocationModel", "DestEndErrorLoca", "F", "F", "F" },
                    { "MACHDESTENDLOCAKEYID", "destEndLocaKeyId", "int?", "number", "", "LocationModel", "DestEndLoca", "F", "F", "F" },
                    { "MACHINFO", "info", "string", "string", "", "", "", "F", "F", "F" },
                    { "MACHINITBATCHCOUNT", "initBatchCount", "int", "number", "", "", "", "F", "F", "F" },
                    { "MACHLASTCYCLECOUNT", "lastCycleCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MACHLASTMINUTESON", "lastMinutesOn", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MACHLASTMINUTESRUN", "lastMinutesRun", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MACHLOADONSTART", "loadOnStart", "int", "number", "MachineLoadOnStart", "", "", "F", "F", "F" },
                    { "MACHLOGBATCHCONTENT", "logBatchContent", "int", "number", "LogBatchContent", "", "", "F", "F", "F" },
                    { "MACHMCTYPKEYID", "mcTypKeyId", "int", "number", "", "MachineTypeModel", "McTyp", "F", "F", "F" },
                    { "MACHMINUTESON", "minutesOn", "int", "number", "", "", "", "F", "F", "F" },
                    { "MACHMINUTESRUN", "minutesRun", "int", "number", "", "", "", "F", "F", "F" },
                    { "MACHNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "MACHPRESCAN", "prescan", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHPRINTLABELAPPROVE", "printLabelApprove", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHPRINTLABELDISAPPR", "printLabelDisappr", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHPRINTLABELEND", "printLabelEnd", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHPRINTLABELINIT", "printLabelInit", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHPRINTLABELSTART", "printLabelStart", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHPRINTLABELSTICKERS", "printLabelStickers", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHPRINTLISTAPPROVE", "printListApprove", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHPRINTLISTDISAPPR", "printListDisappr", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHPRINTLISTEND", "printListEnd", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHPRINTLISTINIT", "printListInit", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHPRINTLISTSTART", "printListStart", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MACHPRINTNATIVEPDF", "printNativePdf", "int", "number", "", "", "", "F", "F", "F" },
                    { "MACHREFNUM", "refNum", "int", "number", "", "", "", "F", "F", "F" },
                    { "MACHSERIALNO", "serialNo", "string", "string", "", "", "", "F", "F", "F" },
                    { "MACHTEXT", "text", "string", "string", "", "", "", "F", "F", "F" },
                    { "MACHUPDATEINTERVAL", "updateinterval", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MACHWARNEMPTYBATCH", "warnemptybatch", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACHINE",
                    "MachineModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MachineConsumablesModel", stringComparison) || modelOrTableName.Equals("TMACHCONS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MACOKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MACOBATCHCOUNT", "batchCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MACOENDUSE", "endUse", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MACOEXPIRE", "expire", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MACOLOTNO", "lotNo", "string", "string", "", "", "", "F", "F", "F" },
                    { "MACOMACHKEYID", "machKeyId", "int?", "number", "", "MachineModel", "Mach", "F", "F", "F" },
                    { "MACOMCOTYKEYID", "mCoTyKeyId", "int", "number", "", "MachConsTypeModel", "MCoTy", "F", "F", "F" },
                    { "MACOPURCHASE", "purchase", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "MACOSTARTUSE", "startUse", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MACOSTATUS", "status", "int", "number", "MachConsStatus", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACHCONS",
                    "MachineConsumablesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MachineLogModel", stringComparison) || modelOrTableName.Equals("TMACHLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MCLOGBATCH", "batch", "int?", "number", "", "ProcessModel", "BatchProcess", "F", "F", "F" },
                    { "MCLOGCODE", "code", "int", "number", "", "", "", "F", "F", "F" },
                    { "MCLOGCYCLE", "cycle", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCLOGMACHKEYID", "machKeyId", "int", "number", "", "MachineModel", "Mach", "F", "F", "F" },
                    { "MCLOGPHASE", "phase", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCLOGPROGRAM", "program", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCLOGSUBPHASE", "subPhase", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCLOGTEXT", "text", "string", "string", "", "", "", "F", "F", "F" },
                    { "MCLOGTYPE", "type", "int?", "number", "MachLogTypes", "", "", "F", "F", "F" },
                    { "MCLOGUSEDTIME", "usedTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCLOGWHEN", "when", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACHLOG",
                    "MachineLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MachineProfileModel", stringComparison) || modelOrTableName.Equals("TMACHPROF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MCPRODATA", "data", "string", "string", "", "", "", "F", "F", "F" },
                    { "MCPROFILEAGE", "fileage", "int", "number", "", "", "", "F", "F", "F" },
                    { "MCPRONAME", "name", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACHPROF",
                    "MachineProfileModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MachineTypeModel", stringComparison) || modelOrTableName.Equals("TMACHINT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MCTYPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MCTYP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MCTYP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "MCTYP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MCTYP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "MCTYPABSOLUTEPRESSURE", "absolutePressure", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MCTYPAUTOCREATEDINDIC", "autoCreatedIndic", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MCTYPBASKETDEPTH", "basketDepth", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPBASKETFITS", "basketFits", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPBASKETHEIGHT", "basketHeight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPBASKETWIDTH", "basketWidth", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPCANAUTOCREATEBI", "canAutoCreateBI", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MCTYPCBIUSAGEMODE", "cBIUsageMode", "int?", "number", "CBIUsageMode", "", "", "F", "F", "F" },
                    { "MCTYPDEFPROGKEYID", "defProgKeyId", "int?", "number", "", "ProgramModel", "DefProg", "F", "F", "F" },
                    { "MCTYPFIXEDTIME", "fixedTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPINCUBATORTYPE", "incubatorType", "int", "number", "IncubatorType", "", "", "F", "F", "F" },
                    { "MCTYPLOGBATCHREGERROR", "logBatchRegError", "int", "number", "", "TextModel", "LogBatchRegErrorText", "F", "F", "F" },
                    { "MCTYPLOGBATCHREGMODE", "logBatchRegMode", "int", "number", "LogBatchRegMode", "", "", "F", "F", "F" },
                    { "MCTYPMANUKEYID", "manuKeyId", "int?", "number", "", "SupplierModel", "Manu", "F", "F", "F" },
                    { "MCTYPMAXENDO", "maxEndo", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPMAXLOADCOUNT", "maxLoadCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPMAXPERPLACEMENT", "maxPerPlacement", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPMAXPRES", "maxPres", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPMAXTEMP", "maxTemp", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPMINPRES", "minPres", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPMINTEMP", "minTemp", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "MCTYPNONENDO", "nonEndo", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MCTYPPLACEMENTCOUNT", "placementCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPPLACEMENTMODE", "placementMode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPPLACEMENTUSGMODE", "placementUsgMode", "int?", "number", "MachPlacementUsageMode", "", "", "F", "F", "F" },
                    { "MCTYPPRESSUREDECIMALS", "pressureDecimals", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPPRESSURELOGARITHMIC", "pressureLogarithmic", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MCTYPPRESSURETYPE", "pressureType", "int", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPRELATIVETIME", "relativeTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPREPAIRVENDORKEYID", "repairVendorKeyId", "int?", "number", "", "SupplierModel", "RepairVendor", "F", "F", "F" },
                    { "MCTYPSTANDARDERROR", "standardError", "int", "number", "", "TextModel", "StandardErrorText", "F", "F", "F" },
                    { "MCTYPSUPPKEYID", "suppKeyId", "int?", "number", "", "SupplierModel", "Supp", "F", "F", "F" },
                    { "MCTYPTECHERROR", "techError", "int?", "number", "", "TextModel", "TechErrorText", "F", "F", "F" },
                    { "MCTYPTEMPDECIMALS", "tempDecimals", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPTEMPTYPE", "tempType", "int", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPTEXT", "text", "string", "string", "", "", "", "F", "F", "F" },
                    { "MCTYPTYPE", "type", "int", "number", "", "", "", "F", "F", "F" },
                    { "MCTYPUSEMAP", "useMAP", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MCTYPUSERECIPE", "useRecipe", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MCTYPVOLUME", "volume", "double?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACHINT",
                    "MachineTypeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MachLoadEquipModel", stringComparison) || modelOrTableName.Equals("TMACLEQ", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MLELEQKEYID", "leqKeyId", "int", "number", "", "LoadingEquipmentModel", "Leq", "F", "F", "F" },
                    { "MLEMCTYPKEYID", "mctypKeyId", "int", "number", "", "MachineTypeModel", "Mctyp", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACLEQ",
                    "MachLoadEquipModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MachLocationModel", stringComparison) || modelOrTableName.Equals("TMACHLOCATION", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MCLOCAUTOINC", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MCLOC_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MCLOC_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "MCLOC_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MCLOC_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "MCLOCLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "MCLOCMACHKEYID", "machKeyId", "int", "number", "", "MachineModel", "Mach", "F", "F", "F" },
                    { "MCLOCPOSITION", "position", "int", "number", "", "", "", "F", "F", "F" },
                    { "MCLOCVISIBILITY", "visibility", "int", "number", "MachineVisiblity", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACHLOCATION",
                    "MachLocationModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MachRuleResultModel", stringComparison) || modelOrTableName.Equals("TMACHRULERESULT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MCRRREFMACHKEYID", "refMachKeyId", "int", "number", "", "MachineModel", "RefMach", "F", "F", "F" },
                    { "MCRRREFMTRUKEYID", "refMTRUKeyId", "int", "number", "", "McTypRuleModel", "RefMTRU", "F", "F", "F" },
                    { "MCRRREFPROCBATCH", "refProcBatch", "int?", "number", "", "ProcessModel", "RefProcBatchProcess", "F", "F", "F" },
                    { "MCRRREFUSERKEYID", "refUserKeyId", "int", "number", "", "UserModel", "RefUser", "F", "F", "F" },
                    { "MCRRRESULT", "result", "int", "number", "McRuleResult", "", "", "F", "F", "F" },
                    { "MCRRTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACHRULERESULT",
                    "MachRuleResultModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MacroModel", stringComparison) || modelOrTableName.Equals("TMACRO", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MACRKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MACR_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MACR_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "MACR_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MACR_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "MACRBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "MACRMACRO", "macro", "string", "string", "", "", "", "F", "T", "F" },
                    { "MACRNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "MACRREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMACRO",
                    "MacroModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("McTypRuleModel", stringComparison) || modelOrTableName.Equals("TMCTYPRULE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MTRUKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MTRUINTERVAL", "interval", "int", "number", "", "", "", "F", "F", "F" },
                    { "MTRUINTERVALTYPE", "intervalType", "int", "number", "MachTypeRuleIntervalType", "", "", "F", "F", "F" },
                    { "MTRUMCTYPKEYID", "mcTypKeyId", "int", "number", "", "MachineTypeModel", "McTyp", "F", "F", "F" },
                    { "MTRUNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "MTRUPROGKEYID", "progKeyId", "int", "number", "", "ProgramModel", "Prog", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMCTYPRULE",
                    "McTypRuleModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MediaImportDataModel", stringComparison) || modelOrTableName.Equals("TMEDIAIMPORTDATA", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TMEDIAIMPORTDATA",
                    "MediaImportDataModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MediaImportFolderModel", stringComparison) || modelOrTableName.Equals("TMEDIAIMPORTFOLDER", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TMEDIAIMPORTFOLDER",
                    "MediaImportFolderModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MesOutTaskModel", stringComparison) || modelOrTableName.Equals("TMESOUTTASK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MOTASKKEY", "keyId", "long", "number", "", "", "", "T", "F", "F" },
                    { "MOTASKCOUNT", "count", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MOTASKCREATED", "created", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "MOTASKDISPLAYNAME", "displayName", "string", "string", "", "", "", "F", "F", "F" },
                    { "MOTASKLOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "MOTASKMTDEFKEYID", "mtDefKeyId", "int", "number", "", "MesTaskDefModel", "MtDef", "F", "F", "F" },
                    { "MOTASKPRIORITY", "priority", "int", "number", "", "", "", "F", "F", "F" },
                    { "MOTASKPROGRAM", "program", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MOTASKSIZETYPE", "sizeType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MOTASKSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "MOTASKUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESOUTTASK",
                    "MesOutTaskModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MesOutTaskEventModel", stringComparison) || modelOrTableName.Equals("TMESOUTTASKEVENT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MOTEVKEY", "keyId", "long", "number", "", "", "", "T", "F", "F" },
                    { "MOTEVERRORCODE", "errorCode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MOTEVERRORTEXT", "errorText", "string", "string", "", "", "", "F", "F", "F" },
                    { "MOTEVJDQKEYID", "jDQKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MOTEVMOTASKKEY", "moTaskKey", "long", "number", "", "MesOutTaskModel", "MoTaskKeyMesOutTask", "F", "F", "F" },
                    { "MOTEVSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "MOTEVSTATUSTEXT", "statusText", "string", "string", "", "", "", "F", "F", "F" },
                    { "MOTEVTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESOUTTASKEVENT",
                    "MesOutTaskEventModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MesOutTaskTagListModel", stringComparison) || modelOrTableName.Equals("TMESOUTTASKTAGLIST", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MOTLISTMOTASKKEY", "moTaskKey", "long", "number", "", "MesOutTaskModel", "MoTaskKeyMesOutTask", "F", "F", "F" },
                    { "MOTLISTTAGSKEYID", "tagsKeyId", "int", "number", "", "TagsModel", "Tags", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESOUTTASKTAGLIST",
                    "MesOutTaskTagListModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MesRawLogModel", stringComparison) || modelOrTableName.Equals("TMESRAWLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MRLKEY", "keyId", "long", "number", "", "", "", "T", "F", "F" },
                    { "MRLCREATED", "created", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "MRLID", "id", "string", "string", "", "", "", "F", "F", "F" },
                    { "MRLURL", "url", "string", "string", "", "", "", "F", "F", "F" },
                    { "MRLXML", "xml", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESRAWLOG",
                    "MesRawLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MessageModel", stringComparison) || modelOrTableName.Equals("TMESSAGE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MESKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MES_CREATED", "created", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "MESEXPIRY", "expiry", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MESPARENTMESKEYID", "parentMesKeyId", "int?", "number", "", "MessageModel", "MesParentMes", "F", "F", "F" },
                    { "MESPRIORITY", "priority", "int", "number", "", "", "", "F", "F", "F" },
                    { "MESSEVERITY", "severity", "int", "number", "", "", "", "F", "F", "F" },
                    { "MESSTARTDATE", "startDate", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MESUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "MesUser", "F", "F", "F" },
                    { "MESUSRACKREQ", "usrAckReq", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESSAGE",
                    "MessageModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MessageGroupProfileLinkModel", stringComparison) || modelOrTableName.Equals("TMESSAGEGROUPPROFILELINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MGPLKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MERLPROFKEYID", "profKeyId", "int", "number", "", "", "", "F", "F", "F" },
                    { "MGPLMEGTKEYID", "meGtKeyId", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESSAGEGROUPPROFILELINK",
                    "MessageGroupProfileLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MessageLabelLinksModel", stringComparison) || modelOrTableName.Equals("TMESSAGELABELLINKS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MSGLBLDATELABELED", "dateLabeled", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "MSGLBLRECIPIENTKEYID", "recipientKeyId", "int", "number", "", "", "", "F", "F", "F" },
                    { "MSGLBLRECIPIENTTYPE", "recipientType", "int", "number", "", "", "", "F", "F", "F" },
                    { "MSGLBLREFMESKEYID", "refMesKeyId", "int", "number", "", "MessageModel", "MsglblRefMes", "F", "F", "F" },
                    { "MSGLBLREFMSGLBKEYID", "refMsgLbKeyId", "int", "number", "", "MessageLabelsModel", "MsglblRefMsgLb", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESSAGELABELLINKS",
                    "MessageLabelLinksModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MessageLabelsModel", stringComparison) || modelOrTableName.Equals("TMESSAGELABELS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MSGLBKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MSGLBDESCRIPTION", "description", "string", "string", "", "", "", "F", "F", "F" },
                    { "MSGLBHIDDEN", "hidden", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MSGLBIMAGEINDEX", "imageIndex", "int", "number", "", "", "", "F", "F", "F" },
                    { "MSGLBLNO", "lno", "int", "number", "", "", "", "F", "F", "F" },
                    { "MSGLBMOVETO", "moveTo", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MSGLBNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "MSGLBREFUSERKEYID", "refUserKeyId", "int?", "number", "", "UserModel", "MsglbRefUser", "F", "F", "F" },
                    { "MSGLBTYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESSAGELABELS",
                    "MessageLabelsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MessageRecipientLinkModel", stringComparison) || modelOrTableName.Equals("TMESSAGERECIPIENTLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MERLKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MERLMESKEYID", "mesKeyId", "int", "number", "", "MessageModel", "MerlMes", "F", "F", "F" },
                    { "MERLRECIPIENTKEYID", "recipientKeyId", "int", "number", "", "", "", "F", "F", "F" },
                    { "MERLRECIPIENTTYPE", "recipientType", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESSAGERECIPIENTLINK",
                    "MessageRecipientLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MessageTemplateModel", stringComparison) || modelOrTableName.Equals("TMESSAGETEMPLATE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MSGTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MSGT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MSGT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "Msgt_Created", "F", "F", "F" },
                    { "MSGT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MSGT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "Msgt_Modified", "F", "F", "F" },
                    { "MSGTDEFAULT", "default", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "MSGTDESCRIPTION", "description", "string", "string", "", "", "", "F", "F", "F" },
                    { "MSGTMSGTYPE", "msgType", "int", "number", "", "", "", "F", "F", "F" },
                    { "MSGTNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "MSGTSYSID", "sysId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MSGTTRANSMITKIND", "transKind", "int", "number", "TransmitKind", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESSAGETEMPLATE",
                    "MessageTemplateModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MessageTemplatePartModel", stringComparison) || modelOrTableName.Equals("TMESSAGETEMPPART", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MSGTPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MSGTP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MSGTP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "Msgtp_Created", "F", "F", "F" },
                    { "MSGTP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MSGTP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "Msgtp_Modified", "F", "F", "F" },
                    { "MSGTPMSGTYPE", "msgType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MSGTPPARTKIND", "partKind", "int", "number", "MessageTemplatePartKind", "", "", "F", "F", "F" },
                    { "MSGTPSYSID", "sysId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MSGTPTRANSMITKIND", "transKind", "int?", "number", "TransmitKind", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESSAGETEMPPART",
                    "MessageTemplatePartModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MessageTemplatePartsLinkModel", stringComparison) || modelOrTableName.Equals("TMESSAGETEMPPARTSLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MSGTPLMSGTMPLKEYID", "msgTmplKeyId", "int", "number", "", "MessageTemplateModel", "MsgtplMsgTmpl", "F", "F", "F" },
                    { "MSGTPLPARTKEYID", "partKeyId", "int", "number", "", "MessageTemplatePartModel", "MsgtplPart", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESSAGETEMPPARTSLINK",
                    "MessageTemplatePartsLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MessageTemplatePartTextModel", stringComparison) || modelOrTableName.Equals("TMESSAGETEMPPARTTEXT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MSGTPTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MSGTPT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MSGTPT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "Msgtpt_Created", "F", "F", "F" },
                    { "MSGTPT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MSGTPT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "Msgtpt_Modified", "F", "F", "F" },
                    { "MSGTPTLANGCODE", "langCode", "int", "number", "", "", "", "F", "F", "F" },
                    { "MSGTPTPARTKEYID", "partKeyId", "int", "number", "", "MessageTemplatePartModel", "MsgtptPart", "F", "F", "F" },
                    { "MSGTPTSYSID", "sysId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MSGTPTTEXT", "text", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESSAGETEMPPARTTEXT",
                    "MessageTemplatePartTextModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MessageTextModel", stringComparison) || modelOrTableName.Equals("TMESSAGETEXT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MESTXTMESKEYID", "mesKeyId", "int", "number", "", "MessageModel", "MesTxtMes", "F", "F", "F" },
                    { "MESTXTMESSAGE", "message", "string", "string", "", "", "", "F", "F", "F" },
                    { "MESTXTSUBJECT", "subject", "string", "string", "", "", "", "F", "F", "F" },
                    { "MESTXTTRANSMITKIND", "transKind", "int", "number", "TransmitKind", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESSAGETEXT",
                    "MessageTextModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MessageUserGroupModel", stringComparison) || modelOrTableName.Equals("TMESSAGEUSERGROUP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MEGTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MEGT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MEGT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "Megt_Created", "F", "F", "F" },
                    { "MEGT_MODIFIED", "midified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "MEGT_MODIFIEDKEYID", "modifiedkeyId", "int?", "number", "", "UserModel", "Megt_Modified", "F", "F", "F" },
                    { "MEGTDESCRIPTION", "description", "string", "string", "", "", "", "F", "F", "F" },
                    { "MEGTNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "MEGTTYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESSAGEUSERGROUP",
                    "MessageUserGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MessageUserGroupLinkModel", stringComparison) || modelOrTableName.Equals("TMESSAGEUSERGROUPLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MEUGMEGTKEYID", "megtKeyId", "int", "number", "", "MessageUserGroupModel", "MeugMegt", "F", "F", "F" },
                    { "MEUGUSERKEYID", "userKeyId", "int", "number", "", "UserModel", "MeugUser", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESSAGEUSERGROUPLINK",
                    "MessageUserGroupLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MesTaskDefModel", stringComparison) || modelOrTableName.Equals("TMESTASKDEF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MTDEFKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MTDEFCOUNT", "count", "int?", "number", "", "", "", "F", "F", "F" },
                    { "MTDEFDESCRIPTION", "description", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFDESTINATIONLOCATION", "destinationLocation", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFDISPLAYNAME", "displayName", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "MTDEFMACHKEYID", "machKeyId", "int?", "number", "", "MachineModel", "Mach", "F", "F", "F" },
                    { "MTDEFSOURCELOCATION", "sourceLocation", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFTASKID", "taskId", "string", "string", "", "", "", "F", "T", "F" },
                    { "MTDEFTASKNAME", "taskName", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFTASKTYPE", "taskType", "int", "number", "", "", "", "F", "F", "F" },
                    { "MTDEFTYPEID", "typeId", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTDEFUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESTASKDEF",
                    "MesTaskDefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("MesTaskLocationsModel", stringComparison) || modelOrTableName.Equals("TMESTASKLOCATIONS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "MTLCAKEY", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "MTLCADISPLAYNAME", "displayName", "string", "string", "", "", "", "F", "F", "F" },
                    { "MTLCALOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "MTLCAMTDEFKEYID", "mtDefKeyId", "int", "number", "", "MesTaskDefModel", "MtDef", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TMESTASKLOCATIONS",
                    "MesTaskLocationsModel",
                    columnToPropertyMappings
                );
            }

            return result;

            #endregion Mappings
        }

        private static ModelToTableMapping CreateModelToTableMapping_05(string modelOrTableName)
        {
            StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase;

            ModelToTableMapping result = null;

            #region Mappings

            if (modelOrTableName.Equals("NetCoreDataProtectionKeyModel", stringComparison) || modelOrTableName.Equals("TNETCOREDATAPROTECTIONKEY", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "NETCOREDPAUTOINC", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "NETCOREDPFRIENDLYNAME", "friendlyName", "string", "string", "", "", "", "F", "F", "F" },
                    { "NETCOREDPXML", "xml", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TNETCOREDATAPROTECTIONKEY",
                    "NetCoreDataProtectionKeyModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("NotifyModel", stringComparison) || modelOrTableName.Equals("TNOTIFY", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TNOTIFY",
                    "NotifyModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("NumericMaskModel", stringComparison) || modelOrTableName.Equals("TNUMMASK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "NMASKKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "NMASKDATATABLE", "datatable", "string", "string", "", "", "", "F", "F", "F" },
                    { "NMASKFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "NMASKFORMAT", "format", "int", "number", "", "", "", "F", "F", "F" },
                    { "NMASKMASK", "mask", "string", "string", "", "", "", "F", "F", "F" },
                    { "NMASKSUBDATATYPE", "subDataType", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TNUMMASK",
                    "NumericMaskModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OpDataActionModel", stringComparison) || modelOrTableName.Equals("TOPDATAACTION", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OPDACACTIONTYPE", "actionType", "int", "number", "OperationDataActionType", "", "", "F", "F", "F" },
                    { "OPDACJOBKEYID", "jobKeyId", "int?", "number", "", "JobModel", "Job", "F", "F", "F" },
                    { "OPDACJOBRKEYID", "jobRKeyId", "int?", "number", "", "JobRunsModel", "JobR", "F", "F", "F" },
                    { "OPDACLOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "OPDACOPDKEYID", "opdKeyId", "int", "number", "", "OperationDataModel", "Opd", "F", "F", "F" },
                    { "OPDACOPDSTATUS", "opDStatus", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OPDACPLOKEYID", "pLoKeyId", "int?", "number", "", "PosLocationModel", "PLo", "F", "F", "F" },
                    { "OPDACREFEMGCTKEYID", "refEmgCTKeyId", "int?", "number", "", "EmgCaseCartTypeModel", "RefEmgCT", "F", "F", "F" },
                    { "OPDACREFOPDKEYID", "refOpDKeyId", "int?", "number", "", "OperationDataModel", "RefOpD", "F", "F", "F" },
                    { "OPDACREFORDKEYID", "refOrdKeyId", "int?", "number", "", "OrderModel", "RefOrd", "F", "F", "F" },
                    { "OPDACTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "OPDACUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TOPDATAACTION",
                    "OpDataActionModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OperationDataModel", stringComparison) || modelOrTableName.Equals("TOPDATA", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OPDKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "OPD_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "OPD_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "OPD_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "OPD_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "OPDACTUALENDTIME", "actualEndTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "OPDACTUALSTARTTIME", "actualStartTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "OPDBOOKINGFORCE", "bookingForce", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "OPDBOOKINGSTATUS", "bookingStatus", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OPDCUSTKEYID", "custKeyId", "int?", "number", "", "CustomerModel", "Cust", "F", "F", "F" },
                    { "OPDCUSTSTOKKEYID", "custStokKeyId", "int?", "number", "", "StocksModel", "CustStok", "F", "F", "F" },
                    { "OPDDOCTKEYID", "doctKeyId", "int?", "number", "", "DoctorModel", "Doct", "F", "F", "F" },
                    { "OPDENDTIME", "endTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "OPDIDENT", "ident", "string", "string", "", "", "", "F", "T", "F" },
                    { "OPDNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPDOPTKEYID", "optKeyId", "int?", "number", "", "OperationTypeModel", "Opt", "F", "F", "F" },
                    { "OPDPATAGE", "patAge", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OPDPATGENDER", "patGender", "int?", "number", "SexType", "", "", "F", "F", "F" },
                    { "OPDPATKEYID", "patKeyId", "int?", "number", "", "PatientModel", "Pat", "F", "F", "F" },
                    { "OPDPATWEIGHT", "patWeight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OPDPREFLISTORDERMODE", "prefListOrderMode", "int?", "number", "PrefListOrderCreateMode", "", "", "F", "F", "F" },
                    { "OPDREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPDROOMKEYID", "roomKeyId", "int?", "number", "", "RoomModel", "Room", "F", "F", "F" },
                    { "OPDSTARTTIME", "startTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "OPDSTARTTIMEMODIFIED", "startTimeModified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "OPDSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "OPDSUPPFACKEYID", "suppFacKeyId", "int?", "number", "", "FactoryModel", "SuppFac", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TOPDATA",
                    "OperationDataModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OperationStaffLinkModel", stringComparison) || modelOrTableName.Equals("TOPSTAFFLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OPSTAFFDOCTKEYID", "doctKeyId", "int", "number", "", "DoctorModel", "Doct", "F", "F", "F" },
                    { "OPSTAFFMODE", "mode", "int?", "number", "OPStaffMode", "", "", "F", "F", "F" },
                    { "OPSTAFFOPDKEYID", "opdKeyId", "int", "number", "", "OperationDataModel", "Opd", "F", "F", "F" },
                    { "OPSTAFFPRIMARY", "primary", "bool", "boolean", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TOPSTAFFLINK",
                    "OperationStaffLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OperationTypeModel", stringComparison) || modelOrTableName.Equals("TOPTYPE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OPTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "OPT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "OPT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "OPT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "OPT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "OPTASSDOCTORCOUNT", "assDoctorCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OPTCLEANUP", "cleanup", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OPTCNTPSKEYID", "cntpsKeyId", "int?", "number", "", "CountingPointSetModel", "Cntps", "F", "F", "F" },
                    { "OPTCODE", "code", "string", "string", "", "", "", "F", "T", "F" },
                    { "OPTDEFCUSTKEYID", "defcustKeyId", "int?", "number", "", "CustomerModel", "Defcust", "F", "F", "F" },
                    { "OPTDEFCUSTSTOKKEYID", "defcuststokKeyId", "int?", "number", "", "StocksModel", "Defcuststok", "F", "F", "F" },
                    { "OPTDEFROOMKEYID", "defroomKeyId", "int?", "number", "", "RoomModel", "Defroom", "F", "F", "F" },
                    { "OPTDESC", "desc", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTDURATION", "duration", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OPTNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTPATAGEUSAGE", "patAgeUsage", "int?", "number", "PatientAgeUsage", "", "", "F", "F", "F" },
                    { "OPTPATGENDERUSAGE", "patGenderUsage", "int?", "number", "PatientGenderUsage", "", "", "F", "F", "F" },
                    { "OPTPREPARE", "prepare", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OPTSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "OPTTYPE", "type", "int", "number", "OperationTypeType", "", "", "F", "F", "F" },
                    { "OPTUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "OPTUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TOPTYPE",
                    "OperationTypeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderModel", stringComparison) || modelOrTableName.Equals("TORDER", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ORDKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ORDAUTOCREATED", "autoCreated", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "ORDBOOKINGMODE", "bookingMode", "int?", "number", "OrderBookingMode", "", "", "F", "F", "F" },
                    { "ORDBOOKINGSTATUS", "bookingStatus", "int?", "number", "OrderBookingStatus", "", "", "F", "F", "F" },
                    { "ORDCREATEDAPPTYPE", "createdAppType", "int?", "number", "TDOCAppType", "", "", "F", "F", "F" },
                    { "ORDCREATEDFOROPDPREFLIST", "createdForOpDPrefList", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "ORDCREATEDJOBKEYID", "createdJobKeyId", "int?", "number", "", "JobModel", "CreatedJob", "F", "F", "F" },
                    { "ORDCREATEDLOCAKEYID", "createdLocaKeyId", "int?", "number", "", "LocationModel", "CreatedLoca", "F", "F", "F" },
                    { "ORDCREATEDUSERKEYID", "createdUserKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "ORDEXPDELTIME", "expDelTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ORDLOCKMODE", "lockMode", "int?", "number", "OrderLockMode", "", "", "F", "F", "F" },
                    { "ORDNEXTORDKEYID", "nextOrdKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ORDORDTPKEYID", "ordTpKeyId", "int?", "number", "", "OrderTemplateModel", "OrdTp", "F", "F", "F" },
                    { "ORDORGACCOUNT", "orgAccount", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDORGEXTERNALID", "orgExternalId", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDORGINVOICEDIRECT", "orgInvoiceDirect", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "ORDORGINVREFCUSTKEYID", "orgInvRefCustKeyId", "int?", "number", "", "CustomerModel", "OrgInvRefCust", "F", "F", "F" },
                    { "ORDORGINVREFFACKEYID", "orgInvRefFacKeyId", "int?", "number", "", "FactoryModel", "OrgInvRefFac", "F", "F", "F" },
                    { "ORDORGINVREFSUPPKEYID", "orgInvRefSuppKeyId", "int?", "number", "", "SupplierModel", "OrgInvRefSupp", "F", "F", "F" },
                    { "ORDORGREFCUSTKEYID", "orgRefCustKeyId", "int?", "number", "", "CustomerModel", "OrgRefCust", "F", "F", "F" },
                    { "ORDORGREFFACKEYID", "orgRefFacKeyId", "int?", "number", "", "FactoryModel", "OrgRefFac", "F", "F", "F" },
                    { "ORDORGREFNO", "orgRefNo", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ORDORGREFSUPPKEYID", "orgRefSuppKeyId", "int?", "number", "", "SupplierModel", "OrgRefSupp", "F", "F", "F" },
                    { "ORDORGREFTEXT", "orgRefText", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDORGREFTEXT2", "orgRefText2", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDORGREMARK", "orgRemark", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDORGSTATUS", "orgStatus", "int", "number", "OrderOrgStatus", "", "", "F", "F", "F" },
                    { "ORDORGSTOKKEYID", "orgStokKeyId", "int?", "number", "", "StocksModel", "OrgStok", "F", "F", "F" },
                    { "ORDORGTIME", "orgTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ORDORGUSERKEYID", "orgUserKeyId", "int?", "number", "", "UserModel", "OrgUser", "F", "F", "F" },
                    { "ORDPREVORDKEYID", "prevOrdKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ORDREFOPDKEYID", "refOpDKeyId", "int?", "number", "", "OperationDataModel", "RefOpD", "F", "F", "F" },
                    { "ORDREFOPTKEYID", "refOpTKeyId", "int?", "number", "", "OperationTypeModel", "RefOpT", "F", "F", "F" },
                    { "ORDREORDERED", "reordered", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "ORDREQDELTIME", "reqDelTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ORDRETURNREQ", "returnReq", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "ORDSPLITORDKEYID", "splitOrdKeyId", "int?", "number", "", "OrderModel", "SplitOrd", "F", "F", "F" },
                    { "ORDSUPPPICKMODE", "suppPickMode", "int?", "number", "OrderSuppPickMode", "", "", "F", "F", "F" },
                    { "ORDSUPPPICKPRIORITY", "suppPickPriority", "int?", "number", "OrderSuppPickPriority", "", "", "F", "F", "F" },
                    { "ORDSUPPPRIORITY", "suppPriority", "int?", "number", "OrderSuppPriority", "", "", "F", "F", "F" },
                    { "ORDSUPPREFCUSTKEYID", "suppRefCustKeyId", "int?", "number", "", "CustomerModel", "SuppRefCust", "F", "F", "F" },
                    { "ORDSUPPREFFACKEYID", "suppRefFacKeyId", "int?", "number", "", "FactoryModel", "SuppRefFac", "F", "F", "F" },
                    { "ORDSUPPREFNO", "suppRefNo", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ORDSUPPREFSUPPKEYID", "suppRefSuppKeyId", "int?", "number", "", "SupplierModel", "SuppRefSupp", "F", "F", "F" },
                    { "ORDSUPPREFTEXT", "suppRefText", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDSUPPREFTEXT2", "suppRefText2", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDSUPPREMARK", "suppRemark", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDSUPPSTATUS", "suppStatus", "int", "number", "OrderSuppStatus", "", "", "F", "F", "F" },
                    { "ORDSUPPSTOKKEYID", "suppStokKeyId", "int?", "number", "", "StocksModel", "SuppStok", "F", "F", "F" },
                    { "ORDSUPPTIME", "suppTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ORDSUPPUSERKEYID", "suppUserKeyId", "int?", "number", "", "UserModel", "SuppUser", "F", "F", "F" },
                    { "ORDTAG", "tag", "int?", "number", "", "TagsModel", "TagTags", "F", "F", "F" },
                    { "ORDTYPE", "type", "int", "number", "OrderType", "", "", "F", "F", "F" },
                    { "ORDUNLOCKSTOKKEYID", "unlockStokKeyId", "int?", "number", "", "StocksModel", "UnlockStok", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDER",
                    "OrderModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderActionModel", stringComparison) || modelOrTableName.Equals("TORDERACTION", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ORDACACTIONTYPE", "actionType", "int", "number", "OrderActionType", "", "", "F", "F", "F" },
                    { "ORDACJOBKEYID", "jobKeyId", "int?", "number", "", "JobModel", "Job", "F", "F", "F" },
                    { "ORDACJOBRKEYID", "jobRKeyId", "int?", "number", "", "JobRunsModel", "JobR", "F", "F", "F" },
                    { "ORDACLOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "ORDACOPDKEYID", "opDKeyId", "int?", "number", "", "OperationDataModel", "OpD", "F", "F", "F" },
                    { "ORDACORDKEYID", "ordKeyId", "int", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "ORDACORGSTATUS", "orgStatus", "int?", "number", "OrderOrgStatus", "", "", "F", "F", "F" },
                    { "ORDACPLOKEYID", "pLoKeyId", "int?", "number", "", "PosLocationModel", "PLo", "F", "F", "F" },
                    { "ORDACSUPPSTATUS", "suppStatus", "int?", "number", "OrderSuppStatus", "", "", "F", "F", "F" },
                    { "ORDACTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "ORDACUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDERACTION",
                    "OrderActionModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderCountLstModel", stringComparison) || modelOrTableName.Equals("TORDERCOUNTLST", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ORDCNTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ORDCNTCPDKEYID", "cpdKeyId", "int", "number", "", "CountingPointDataModel", "Cpd", "F", "F", "F" },
                    { "ORDCNTITEMCOUNT", "itemCount", "int", "number", "", "", "", "F", "F", "F" },
                    { "ORDCNTITEMKEYID", "itemKeyId", "int?", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "ORDCNTITEMSERIKEYID", "itemSeriKeyId", "int?", "number", "", "SerialModel", "ItemSeri", "F", "F", "F" },
                    { "ORDCNTLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "ORDCNTOLNLINE", "oLnLine", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ORDCNTORDKEYID", "ordKeyId", "int?", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "ORDCNTPLOKEYID", "ploKeyId", "int?", "number", "", "PosLocationModel", "Plo", "F", "F", "F" },
                    { "ORDCNTTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDERCOUNTLST",
                    "OrderCountLstModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderInfoModel", stringComparison) || modelOrTableName.Equals("TORDERINFO", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OINFDATA", "data", "string", "string", "", "", "", "F", "F", "F" },
                    { "OINFINTEGER1", "integer1", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OINFINTEGER2", "integer2", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OINFINTEGER3", "integer3", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OINFINTEGER4", "integer4", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OINFINTEGER5", "integer5", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OINFORDKEYID", "ordKeyId", "int", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "OINFSTRING1", "string1", "string", "string", "", "", "", "F", "F", "F" },
                    { "OINFSTRING2", "string2", "string", "string", "", "", "", "F", "F", "F" },
                    { "OINFTEXT", "text", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDERINFO",
                    "OrderInfoModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderLineModel", stringComparison) || modelOrTableName.Equals("TORDLN", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OLNKEY", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "OLNHASALTERNATIVE", "hasAlternative", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "OLNIDENTLINEUSAGE", "identLineUsage", "int", "number", "IdentArticleLineUsage", "", "", "F", "F", "F" },
                    { "OLNLINE", "line", "int", "number", "", "", "", "F", "F", "F" },
                    { "OLNORDKEYID", "ordKeyId", "int", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "OLNORGALTITEMKEYID", "orgAltItemKeyId", "int?", "number", "", "ItemModel", "OrgAltItem", "F", "F", "F" },
                    { "OLNORGALTPRODKEYID", "orgAltProdKeyId", "int?", "number", "", "ProductModel", "OrgAltProd", "F", "F", "F" },
                    { "OLNORGORDERED", "orgOrdered", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNORGPRICE", "orgPrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "OLNORGRECEIVED", "orgReceived", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNORGSTATUS", "orgStatus", "int?", "number", "OrderOrgStatus", "", "", "F", "F", "F" },
                    { "OLNORGSTDCOUNT", "orgStdCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNORGUNITCOUNT", "orgUnitCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNORGUNITRECEIVED", "orgUnitReceived", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNPARENTKEY", "parentKey", "int?", "number", "", "OrderLineModel", "ParentKeyOrderLine", "F", "F", "F" },
                    { "OLNPRIGRKEYID", "prigrKeyId", "int?", "number", "", "PriceGroupModel", "Prigr", "F", "F", "F" },
                    { "OLNPRNORDER", "prnOrder", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "OLNREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" },
                    { "OLNSUBSTITUTIONREASON", "substitutionReason", "int?", "number", "SubstitutionReason", "", "", "F", "F", "F" },
                    { "OLNSUPPDELIVERED", "suppDelivered", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNSUPPLATER", "suppLater", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNSUPPLATERORDKEYID", "suppLaterOrdKeyId", "int?", "number", "", "OrderModel", "SuppLaterOrd", "F", "F", "F" },
                    { "OLNSUPPPRICE", "suppPrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "OLNSUPPREF1", "suppRef1", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNSUPPREF2", "suppRef2", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNSUPPSTATUS", "suppStatus", "int?", "number", "OrderSuppStatus", "", "", "F", "F", "F" },
                    { "OLNSUPPSTDCOUNT", "suppStdCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNSUPPUNITCOUNT", "suppUnitCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNSUPPUNITLATER", "suppUnitLater", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDLN",
                    "OrderLineModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderLineAlternativeModel", stringComparison) || modelOrTableName.Equals("TORDLNALTERNATIVE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OLNALTKEY", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "OLNALTITEMKEYID", "itemKeyId", "int?", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "OLNALTOLNKEY", "oLnKey", "int", "number", "", "OrderLineModel", "OLnKeyOrderLine", "F", "F", "F" },
                    { "OLNALTPRIORITY", "priority", "int", "number", "", "", "", "F", "F", "F" },
                    { "OLNALTPRODKEYID", "prodKeyId", "int?", "number", "", "ProductModel", "Prod", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDLNALTERNATIVE",
                    "OrderLineAlternativeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderLinePlacementsModel", stringComparison) || modelOrTableName.Equals("TXOLNPLACEMENTS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TXOLNPLACEMENTS",
                    "OrderLinePlacementsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderLineSpecModel", stringComparison) || modelOrTableName.Equals("TORDLNS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OLSCOUNT", "count", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLSOLNLINE", "oLnLine", "int", "number", "", "", "", "F", "F", "F" },
                    { "OLSORDKEYID", "ordKeyId", "int", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "OLSREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "OLSREFUNITUNIT", "refUnitUnit", "int?", "number", "", "UnitModel", "RefUnitUnitUnit", "F", "F", "F" },
                    { "OLSSTOKKEYID", "stokKeyId", "int?", "number", "", "StocksModel", "Stok", "F", "F", "F" },
                    { "OLSWHAT", "what", "int", "number", "OrdLnSpecWhat", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDLNS",
                    "OrderLineSpecModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderLineSuggModel", stringComparison) || modelOrTableName.Equals("TORDLNSG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OLNSGLINE", "line", "int", "number", "", "", "", "F", "F", "F" },
                    { "OLNSGORDERED", "ordered", "int", "number", "", "", "", "F", "F", "F" },
                    { "OLNSGORDSGKEYID", "ordsgKeyId", "int", "number", "", "OrderSuggestionModel", "Ordsg", "F", "F", "F" },
                    { "OLNSGREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "OLNSGREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" },
                    { "OLNSGSTDCOUNT", "stdcount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNSGSTOKKEYID", "stokKeyId", "int?", "number", "", "StocksModel", "Stok", "F", "F", "F" },
                    { "OLNSGUNITCOUNT", "unitcount", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDLNSG",
                    "OrderLineSuggModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderLineTempModel", stringComparison) || modelOrTableName.Equals("TORDLNTP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OLNTPLINE", "line", "int", "number", "", "", "", "F", "F", "F" },
                    { "OLNTPORDERED", "ordered", "int?", "number", "", "", "", "F", "F", "F" },
                    { "OLNTPORDTPKEYID", "ordTpKeyId", "int", "number", "", "OrderTemplateModel", "OrdTp", "F", "F", "F" },
                    { "OLNTPPRESTATE", "prestate", "int?", "number", "ProductReturnState", "", "", "F", "F", "F" },
                    { "OLNTPREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "OLNTPREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDLNTP",
                    "OrderLineTempModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderLotInfoModel", stringComparison) || modelOrTableName.Equals("TORDLOTINFO", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OLOTIN_CREATED", "created", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "OLOTIN_CREATEDKEYID", "createdKeyId", "int", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "OLOTINLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "OLOTINLOTINKEYID", "lotInKeyId", "int", "number", "", "LotInfoModel", "LotIn", "F", "F", "F" },
                    { "OLOTINOLNLINE", "oLnLine", "int", "number", "", "", "", "F", "F", "F" },
                    { "OLOTINORDKEYID", "ordKeyId", "int", "number", "", "OrderModel", "Ord", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDLOTINFO",
                    "OrderLotInfoModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderSuggestionModel", stringComparison) || modelOrTableName.Equals("TORDERSG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ORDSGKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ORDSGORDKEYID", "ordKeyId", "int?", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "ORDSGORGREFCUSTKEYID", "orgRefCustKeyId", "int?", "number", "", "CustomerModel", "OrgRefCust", "F", "F", "F" },
                    { "ORDSGORGREFFACKEYID", "orgRefFacKeyId", "int?", "number", "", "FactoryModel", "OrgRefFac", "F", "F", "F" },
                    { "ORDSGORGREFSUPPKEYID", "orgRefSuppKeyId", "int?", "number", "", "SupplierModel", "OrgRefSupp", "F", "F", "F" },
                    { "ORDSGORGSTOKKEYID", "orgStokKeyId", "int?", "number", "", "StocksModel", "OrgStok", "F", "F", "F" },
                    { "ORDSGSUPPREFFACKEYID", "suppRefFacKeyId", "int?", "number", "", "FactoryModel", "SuppRefFac", "F", "F", "F" },
                    { "ORDSGSUPPREFSUPPKEYID", "suppRefSuppKeyId", "int?", "number", "", "SupplierModel", "SuppRefSupp", "F", "F", "F" },
                    { "ORDSGTIME", "time", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ORDSGTRANSTIME", "transtime", "DateTime?", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDERSG",
                    "OrderSuggestionModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderTemplateModel", stringComparison) || modelOrTableName.Equals("TORDERTP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ORDTPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ORDTP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ORDTP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "ORDTP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "ORDTP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "ORDTPNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDTPORGREFCUSTKEYID", "orgRefCustKeyId", "int?", "number", "", "CustomerModel", "OrgRefCust", "F", "F", "F" },
                    { "ORDTPORGREFFACKEYID", "orgRefFacKeyId", "int?", "number", "", "FactoryModel", "OrgRefFac", "F", "F", "F" },
                    { "ORDTPORGREFSUPPKEYID", "orgRefSuppKeyId", "int?", "number", "", "SupplierModel", "OrgRefSupp", "F", "F", "F" },
                    { "ORDTPORGREFTEXT", "orgRefText", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDTPORGREFTEXT2", "orgRefText2", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDTPORGREMARK", "orgRemark", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDTPORGSTOKKEYID", "orgStokKeyId", "int?", "number", "", "StocksModel", "OrgStok", "F", "F", "F" },
                    { "ORDTPOTPTKEYID", "oTpTKeyId", "int?", "number", "", "OrderTemplateTypeModel", "OTpT", "F", "F", "F" },
                    { "ORDTPREFOPTKEYID", "refOpTKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ORDTPSUPPREFFACKEYID", "suppRefFacKeyId", "int?", "number", "", "FactoryModel", "SuppRefFac", "F", "F", "F" },
                    { "ORDTPSUPPREFSUPPKEYID", "suppRefSuppKeyId", "int?", "number", "", "SupplierModel", "SuppRefSupp", "F", "F", "F" },
                    { "ORDTPSUPPREFTEXT", "suppRefText", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDTPSUPPREFTEXT2", "suppRefText2", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDTPSUPPREMARK", "suppRemark", "string", "string", "", "", "", "F", "F", "F" },
                    { "ORDTPSUPPSTOKKEYID", "suppStokKeyId", "int?", "number", "", "StocksModel", "SuppStok", "F", "F", "F" },
                    { "ORDTPTEMPLATE", "template", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDERTP",
                    "OrderTemplateModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderTemplateTypeModel", stringComparison) || modelOrTableName.Equals("TORDTPTYPE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OTPTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "OTPT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "OTPT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "OTPT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "OTPT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "OTPTNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "OTPTREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "OTPTTYPE", "type", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDTPTYPE",
                    "OrderTemplateTypeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("OrderTempLineAlternativeModel", stringComparison) || modelOrTableName.Equals("TORDLNTPALTERNATIVE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "OLTPALTKEY", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "OLTPALTITEMKEYID", "itemKeyId", "int?", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "OLTPALTOLNTPKEY", "olntpkey", "int", "number", "", "OrderLineTempModel", "OlntpkeyOrderLineTemp", "F", "F", "F" },
                    { "OLTPALTPRIORITY", "priority", "int", "number", "", "", "", "F", "F", "F" },
                    { "OLTPALTPRODKEYID", "prodKeyId", "int?", "number", "", "ProductModel", "Prod", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TORDLNTPALTERNATIVE",
                    "OrderTempLineAlternativeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PackingModel", stringComparison) || modelOrTableName.Equals("TPACKING", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PACKKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PACK_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PACK_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "PACK_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PACK_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "PACKCOLOR", "color", "short?", "number", "", "", "", "F", "F", "F" },
                    { "PACKDESCRIPTION", "description", "string", "string", "", "", "", "F", "F", "F" },
                    { "PACKFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "PACKFIXEDTIME", "fixedTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PACKITEMKEYID", "itemKeyId", "int?", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "PACKPACKING", "packing", "string", "string", "", "", "", "F", "T", "F" },
                    { "PACKRELATIVETIME", "relativeTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PACKSEALCOUNT", "sealCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PACKSEALPRINT", "sealPrint", "string", "string", "", "", "", "F", "F", "F" },
                    { "PACKSEPRGKEYID", "seprgKeyId", "int?", "number", "", "SealerProgramModel", "Seprg", "F", "F", "F" },
                    { "PACKSHELFLIFE", "shelfLife", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PACKSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "PACKTAGTKEYID", "tagTKeyId", "int?", "number", "", "TagTypeModel", "TagT", "F", "F", "F" },
                    { "PACKTRACETYPE", "tracetype", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PACKUSEDFOR", "usedFor", "int", "number", "PackingUsedFor", "", "", "F", "F", "F" },
                    { "PACKWEIGHT", "weight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PACKWEIGHTDISPOSABLE", "weightDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PACKWEIGHTMODE", "weightMode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PACKWEIGHTNONDISPOSABLE", "weightNonDisposable", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPACKING",
                    "PackingModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PatientModel", stringComparison) || modelOrTableName.Equals("TPATIENT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PATKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PAT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PAT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "PAT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PAT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "PATBARCODE", "barCode", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATBIRTHDAY", "birthday", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PATCODE1", "code1", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCODE2", "code2", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCODE3", "code3", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATID", "id", "string", "string", "", "", "", "F", "T", "F" },
                    { "PATNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATSEX", "sex", "int?", "number", "SexType", "", "", "F", "F", "F" },
                    { "PATSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "PATUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATWEIGHT", "weight", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPATIENT",
                    "PatientModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PatientCategoryModel", stringComparison) || modelOrTableName.Equals("TPATIENTCAT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PATCATKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PATCAT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PATCAT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "PATCAT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PATCAT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "PATCATATTAGEMAX", "attAgeMax", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PATCATATTAGEMIN", "attAgeMin", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PATCATATTGENDER", "attGender", "int?", "number", "SexType", "", "", "F", "F", "F" },
                    { "PATCATCATEGORY", "category", "string", "string", "", "", "", "F", "T", "F" },
                    { "PATCATDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATPRIORITY", "priority", "int", "number", "", "", "", "F", "F", "F" },
                    { "PATCATUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCATUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPATIENTCAT",
                    "PatientCategoryModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PatientConsModel", stringComparison) || modelOrTableName.Equals("TPATCONS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PATCOAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "PATCOENDTIME", "endTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PATCOLOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "PATCOLOTINFO", "lotInfo", "string", "string", "", "", "", "F", "F", "F" },
                    { "PATCOOLNLINE", "oLnLine", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PATCOOPDKEYID", "opDKeyId", "int?", "number", "", "OperationDataModel", "OpD", "F", "F", "F" },
                    { "PATCOORDKEYID", "ordKeyId", "int?", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "PATCOPATKEYID", "patKeyId", "int?", "number", "", "PatientModel", "Pat", "F", "F", "F" },
                    { "PATCOREFCOUNT", "refCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PATCOREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "PATCOREFSERIKEYID", "refSeriKeyId", "int?", "number", "", "SerialModel", "RefSeri", "F", "F", "F" },
                    { "PATCOREFUNITUNIT", "refUnitUnit", "int?", "number", "", "UnitModel", "RefUnitUnitUnit", "F", "F", "F" },
                    { "PATCOSTARTTIME", "startTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PATCOSTARTUSERKEYID", "startUserKeyId", "int?", "number", "", "UserModel", "StartUser", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPATCONS",
                    "PatientConsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PatientLotInfoModel", stringComparison) || modelOrTableName.Equals("TPATCONSLOTINFO", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PLOTIN_CREATED", "created", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "PLOTIN_CREATEDKEYID", "createdKeyId", "int", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "PLOTINBOUNDARTICLENOTE", "boundArticleNote", "string", "string", "", "", "", "F", "F", "F" },
                    { "PLOTINLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "PLOTINLOTINKEYID", "lotInKeyId", "int", "number", "", "LotInfoModel", "LotIn", "F", "F", "F" },
                    { "PLOTINPATCOAUTOINC", "patCoAutoInc", "int", "number", "", "PatientConsModel", "PatCoAutoIncPatientCons", "F", "F", "F" },
                    { "PLOTINPOSITION", "position", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPATCONSLOTINFO",
                    "PatientLotInfoModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PickJobModel", stringComparison) || modelOrTableName.Equals("TPICKJOB", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PJOBDELIVERYTIME", "deliveryTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PJOBDESTEXTRAINFO", "destExtraInfo", "string", "string", "", "", "", "F", "F", "F" },
                    { "PJOBDESTLOCATIONID", "destLocationId", "string", "string", "", "", "", "F", "F", "F" },
                    { "PJOBDESTSITEID", "destSiteId", "string", "string", "", "", "", "F", "F", "F" },
                    { "PJOBFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "PJOBGOODSSTATE", "goodsState", "int", "number", "PickJobGoodsState", "", "", "F", "F", "F" },
                    { "PJOBKEY", "key", "int", "number", "", "", "", "F", "F", "F" },
                    { "PJOBMANUALPICK", "manualPick", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "PJOBPRIORITY", "priority", "int", "number", "", "", "", "F", "F", "F" },
                    { "PJOBRESULT", "result", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PJOBRESULTTEXT", "resultText", "string", "string", "", "", "", "F", "F", "F" },
                    { "PJOBSPECIALINSTRUCTION", "specialInstruction", "int", "number", "", "", "", "F", "F", "F" },
                    { "PJOBSTATUS", "status", "int", "number", "PickJobStatus", "", "", "F", "F", "F" },
                    { "PJOBTRANSPORTTIME", "transportTime", "DateTime?", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPICKJOB",
                    "PickJobModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PickJobActionModel", stringComparison) || modelOrTableName.Equals("TPICKJOBACTION", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PJOBACACTIONTYPE", "actionType", "int", "number", "PickJobActionType", "", "", "F", "F", "F" },
                    { "PJOBACKEY", "key", "int", "number", "", "", "", "F", "F", "F" },
                    { "PJOBACPJOBKEY", "pJobKey", "int", "number", "", "PickJobModel", "PJobKeyPickJob", "F", "F", "F" },
                    { "PJOBACTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPICKJOBACTION",
                    "PickJobActionModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PickJobContentModel", stringComparison) || modelOrTableName.Equals("TPICKJOBCONTENT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PJOBCCOORDX", "coordX", "int", "number", "", "", "", "F", "F", "F" },
                    { "PJOBCCOORDY", "coordY", "int", "number", "", "", "", "F", "F", "F" },
                    { "PJOBCCOORDZ", "coordZ", "int", "number", "", "", "", "F", "F", "F" },
                    { "PJOBCERROR", "error", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PJOBCERRORTEXT", "errorText", "string", "string", "", "", "", "F", "F", "F" },
                    { "PJOBCKEY", "key", "int", "number", "", "", "", "F", "F", "F" },
                    { "PJOBCLEVEL", "level", "int", "number", "", "", "", "F", "F", "F" },
                    { "PJOBCOLNKEY", "olnKey", "int?", "number", "", "OrderLineModel", "OlnKeyOrderLine", "F", "F", "F" },
                    { "PJOBCOPDKEYID", "opDKeyId", "int?", "number", "", "OperationDataModel", "OpD", "F", "F", "F" },
                    { "PJOBCORDKEYID", "ordKeyId", "int?", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "PJOBCPJOBKEY", "pJobKey", "int", "number", "", "PickJobModel", "PJobKeyPickJob", "F", "F", "F" },
                    { "PJOBCPRINTFILENAME", "printFileName", "string", "string", "", "", "", "F", "F", "F" },
                    { "PJOBCPRINTID", "printId", "string", "string", "", "", "", "F", "F", "F" },
                    { "PJOBCRESULT", "result", "int", "number", "", "", "", "F", "F", "F" },
                    { "PJOBCTAGSKEYID", "tagsKeyId", "int?", "number", "", "TagsModel", "Tags", "F", "F", "F" },
                    { "PJOBCTAGTKEYID", "tagTKeyId", "int?", "number", "", "TagTypeModel", "TagT", "F", "F", "F" },
                    { "PJOBCTEMPOLNKEY", "tempOLnKey", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PJOBCTEMPORDKEYID", "tempOrdKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PJOBCTYPEINFO", "typeInfo", "int?", "number", "PickJobContentTypeInfo", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPICKJOBCONTENT",
                    "PickJobContentModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PickJobGroupModel", stringComparison) || modelOrTableName.Equals("TPICKJOBGROUP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PJOBGRPID", "id", "string", "string", "", "", "", "F", "F", "F" },
                    { "PJOBGRPKEY", "key", "int", "number", "", "", "", "F", "F", "F" },
                    { "PJOBGRPPJOBKEY", "pJobKey", "int", "number", "", "PickJobModel", "PJobKeyPickJob", "F", "F", "F" },
                    { "PJOBGRPSEQUENCE", "sequence", "int", "number", "", "", "", "F", "F", "F" },
                    { "PJOBGRPTOTAL", "total", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPICKJOBGROUP",
                    "PickJobGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PickJobOrderLinkModel", stringComparison) || modelOrTableName.Equals("TPICKJOBORDERLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PJOLNKORDKEYID", "ordKeyId", "int", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "PJOLNKPJOBKEY", "pJobKey", "int", "number", "", "PickJobModel", "PJobKeyPickJob", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPICKJOBORDERLINK",
                    "PickJobOrderLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PictureModel", stringComparison) || modelOrTableName.Equals("TPICS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PICSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PICSLASTCHANGE", "lastchange", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PICSORGFILENAME", "orgFilename", "string", "string", "", "", "", "F", "F", "F" },
                    { "PICSTEXT", "text", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPICS",
                    "PictureModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PictureRefModel", stringComparison) || modelOrTableName.Equals("TPICTREF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PICTNO", "no", "int", "number", "", "", "", "F", "F", "F" },
                    { "PICTPICSKEYID", "picsKeyId", "int?", "number", "", "PictureModel", "Pics", "F", "F", "F" },
                    { "PICTREFCATKEYID", "refCatKeyId", "int?", "number", "", "CatalogModel", "RefCat", "F", "F", "F" },
                    { "PICTREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "PICTREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" },
                    { "PICTREFSERIKEYID", "refseriKeyId", "int?", "number", "", "SerialModel", "Refseri", "F", "F", "F" },
                    { "PICTREFUSERKEYID", "refUserKeyId", "int?", "number", "", "UserModel", "RefUser", "F", "F", "F" },
                    { "PICTSERIES", "series", "int", "number", "", "TextModel", "SeriesText", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPICTREF",
                    "PictureRefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PipAuditLogModel", stringComparison) || modelOrTableName.Equals("TPIPAUDITLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TPIPAUDITLOG",
                    "PipAuditLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PositionModel", stringComparison) || modelOrTableName.Equals("TPOSIT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "POSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "POSDISABLED", "disabled", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "POSINFO", "info", "string", "string", "", "", "", "F", "F", "F" },
                    { "POSLSKEYID", "lSKeyId", "int", "number", "", "LinkStatModel", "LS", "F", "F", "F" },
                    { "POSNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "POSOPTION", "option", "int?", "number", "", "", "", "F", "F", "F" },
                    { "POSTHING", "thing", "int", "number", "ThingType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPOSIT",
                    "PositionModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PosLocationModel", stringComparison) || modelOrTableName.Equals("TPOSLOCA", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PLOKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PLODEFAULT", "default", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "PLOLABELRPL", "labelRPL", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PLOLISTRPL", "listRPL", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PLOLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "PLOPOSKEYID", "posKeyId", "int", "number", "", "PositionModel", "Pos", "F", "F", "F" },
                    { "PLOSCALENO", "scaleNo", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PLOUIAVAILABILITY", "uIAvailability", "int?", "number", "UILocaAvailability", "", "", "F", "F", "F" },
                    { "PLOUILDKEYID", "uiLdKeyId", "int?", "number", "", "UILayerDefModel", "UiLd", "F", "F", "F" },
                    { "PLOUISTARTMODE", "uIStartMode", "int?", "number", "ScanUIStartMode", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPOSLOCA",
                    "PosLocationModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PreferenceListModel", stringComparison) || modelOrTableName.Equals("TPREFLIST", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PREFKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PREF_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PREF_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "PREF_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PREF_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "PREFNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "PREFPREFLIST", "preflist", "string", "string", "", "", "", "F", "T", "F" },
                    { "PREFREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "PREFSPECIFIC", "specific", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "PREFUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "PREFUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "PREFUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "PREFUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "PREFUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "PREFUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "PREFUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "PREFUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "PREFUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "PREFUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPREFLIST",
                    "PreferenceListModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PreferenceListLineModel", stringComparison) || modelOrTableName.Equals("TPREFLISTLN", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PREFLNMODIFIER", "modifier", "int", "number", "PrefLnModifier", "", "", "F", "F", "F" },
                    { "PREFLNORDERCOUNT", "orderCount", "int", "number", "", "", "", "F", "F", "F" },
                    { "PREFLNPREFKEYID", "prefKeyId", "int", "number", "", "PreferenceListModel", "Pref", "F", "F", "F" },
                    { "PREFLNREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "PREFLNREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPREFLISTLN",
                    "PreferenceListLineModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PreferenceListLinkModel", stringComparison) || modelOrTableName.Equals("TPREFLISTLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRELNKCUSITEKEYID", "cuSiteKeyId", "int?", "number", "", "CustSiteModel", "CuSite", "F", "F", "F" },
                    { "PRELNKDOCTKEYID", "doctKeyId", "int?", "number", "", "DoctorModel", "Doct", "F", "F", "F" },
                    { "PRELNKOPTKEYID", "opTKeyId", "int?", "number", "", "OperationTypeModel", "OpT", "F", "F", "F" },
                    { "PRELNKPATCATKEYID", "patCatKeyId", "int?", "number", "", "PatientCategoryModel", "PatCat", "F", "F", "F" },
                    { "PRELNKPOS", "pos", "int", "number", "", "", "", "F", "F", "F" },
                    { "PRELNKPREFKEYID", "prefKeyId", "int", "number", "", "PreferenceListModel", "Pref", "F", "F", "F" },
                    { "PRELNKPROTKEYID", "proTKeyId", "int?", "number", "", "ProcedureTypeModel", "ProT", "F", "F", "F" },
                    { "PRELNKROOMKEYID", "roomKeyId", "int?", "number", "", "RoomModel", "Room", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPREFLISTLINK",
                    "PreferenceListLinkModel",
                    columnToPropertyMappings
                );
            }

            return result;

            #endregion Mappings
        }

        private static ModelToTableMapping CreateModelToTableMapping_06(string modelOrTableName)
        {
            StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase;

            ModelToTableMapping result = null;

            #region Mappings

            if (modelOrTableName.Equals("PrefListAlternativeModel", stringComparison) || modelOrTableName.Equals("TPREFLISTLNALTERNATIVE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PFLALTKEY", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PFLALTITEMKEYID", "itemKeyId", "int?", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "PFLALTPREFLNKEY", "prefLnKey", "int", "number", "", "PreferenceListLineModel", "PrefLnKeyPreferenceListLine", "F", "F", "F" },
                    { "PFLALTPRIORITY", "priority", "int", "number", "", "", "", "F", "F", "F" },
                    { "PFLALTPRODKEYID", "prodKeyId", "int?", "number", "", "ProductModel", "Prod", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPREFLISTLNALTERNATIVE",
                    "PrefListAlternativeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PrefListReplaceLinesModel", stringComparison) || modelOrTableName.Equals("TPREFREPLACELN", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRRPLLNDOCTKEYID", "doctKeyId", "int?", "number", "", "DoctorModel", "Doct", "F", "F", "F" },
                    { "PRRPLLNFROMREFITEMKEYID", "fromRefItemKeyId", "int?", "number", "", "ItemModel", "FromRefItem", "F", "F", "F" },
                    { "PRRPLLNFROMREFPRODKEYID", "fromRefProdKeyId", "int?", "number", "", "ProductModel", "FromRefProd", "F", "F", "F" },
                    { "PRRPLLNPATCATKEYID", "patCatKeyId", "int?", "number", "", "PatientCategoryModel", "PatCat", "F", "F", "F" },
                    { "PRRPLLNTOREFITEMKEYID", "toRefItemKeyId", "int?", "number", "", "ItemModel", "ToRefItem", "F", "F", "F" },
                    { "PRRPLLNTOREFPRODKEYID", "toRefProdKeyId", "int?", "number", "", "ProductModel", "ToRefProd", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPREFREPLACELN",
                    "PrefListReplaceLinesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PriceGroupModel", stringComparison) || modelOrTableName.Equals("TPRICEGROUP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRIGRKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PRIGR_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PRIGR_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "PRIGR_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PRIGR_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "PRIGRDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRIGRNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRIGRPRICE", "price", "decimal", "number", "", "", "", "F", "F", "F" },
                    { "PRIGRPRICEGROUP", "priceGroup", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TPRICEGROUP",
                    "PriceGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PrivacyInfoProtectFldsModel", stringComparison) || modelOrTableName.Equals("TPIPFIELDS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TPIPFIELDS",
                    "PrivacyInfoProtectFldsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PrnDriverModel", stringComparison) || modelOrTableName.Equals("TPRNDRIV", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRDRVKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PRDRVDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRDRVNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "PRDRVSYSID", "sysId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRDRVTYPE", "type", "int", "number", "PrDrv", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPRNDRIV",
                    "PrnDriverModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("PrnRedirectModel", stringComparison) || modelOrTableName.Equals("TPRNREDIRECT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRNRD_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PRNRD_CREATEDKEYID", "createdKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRNRD_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PRNRD_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRNRDFROMRPL", "fromRPL", "int", "number", "", "", "", "F", "F", "F" },
                    { "PRNRDTORPL", "toRPL", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPRNREDIRECT",
                    "PrnRedirectModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProcedureDataModel", stringComparison) || modelOrTableName.Equals("TPRODATA", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRDADOCTKEYID", "doctKeyId", "int?", "number", "", "DoctorModel", "Doct", "F", "F", "F" },
                    { "PRDAMODE", "mode", "int?", "number", "OPProcedureTypeMode", "", "", "F", "F", "F" },
                    { "PRDAOPDKEYID", "opdKeyId", "int", "number", "", "OperationDataModel", "Opd", "F", "F", "F" },
                    { "PRDAPOSITION", "position", "int", "number", "", "", "", "F", "F", "F" },
                    { "PRDAPROTKEYID", "protKeyId", "int", "number", "", "ProcedureTypeModel", "Prot", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPRODATA",
                    "ProcedureDataModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProcedureTypeModel", stringComparison) || modelOrTableName.Equals("TPROTYPE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PROTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PROT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "PROT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "PROTASSDOCTORCOUNT", "assDoctorCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROTCODE", "code", "string", "string", "", "", "", "F", "T", "F" },
                    { "PROTDESC", "desc", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTPATAGEUSAGE", "patageusage", "int?", "number", "PatientAgeUsage", "", "", "F", "F", "F" },
                    { "PROTPATGENDERUSAGE", "patGenderUsage", "int?", "number", "PatientGenderUsage", "", "", "F", "F", "F" },
                    { "PROTSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "PROTUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROTUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPROTYPE",
                    "ProcedureTypeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProcedureTypesModel", stringComparison) || modelOrTableName.Equals("TPROTYPS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRTSDISABLEPREFLIST", "disablePrefList", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "PRTSOPTKEYID", "optKeyId", "int", "number", "", "OperationTypeModel", "Opt", "F", "F", "F" },
                    { "PRTSPOSITION", "position", "int", "number", "", "", "", "F", "F", "F" },
                    { "PRTSPROTKEYID", "protKeyId", "int", "number", "", "ProcedureTypeModel", "Prot", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPROTYPS",
                    "ProcedureTypesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProcessModel", stringComparison) || modelOrTableName.Equals("TPROCESS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PROCBATCH", "keyId", "int", "number", "", "", "", "T", "T", "F" },
                    { "PROCAPPROVETIME", "approveTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROCAPPROVEUSERKEYID", "approveUserKeyId", "int?", "number", "", "UserModel", "ApproveUser", "F", "F", "F" },
                    { "PROCCHARGE", "charge", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROCDISAPPROVEUSERKEYID", "disapproveUserKeyId", "int?", "number", "", "UserModel", "DisapproveUser", "F", "F", "F" },
                    { "PROCENDTIME", "endTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROCENVHUMIDITY", "envhumidity", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROCENVPRESSURE", "envpressure", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROCENVTEMP", "envtemp", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROCERROR", "error", "int?", "number", "", "TextModel", "ErrorText", "F", "F", "F" },
                    { "PROCEXTERNALBATCHNO", "externalBatchNo", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROCINITIATETIME", "initiateTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROCINITIATORUSERKEYID", "initiatorUserKeyId", "int?", "number", "", "UserModel", "InitiatorUser", "F", "F", "F" },
                    { "PROCLOADNUMBER", "loadNumber", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROCMACHKEYID", "machKeyId", "int?", "number", "", "MachineModel", "Mach", "F", "F", "F" },
                    { "PROCNATIVEERROR", "nativeError", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROCNATIVEERRORTEXT", "nativeErrortext", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROCPROGKEYID", "progKeyId", "int?", "number", "", "ProgramModel", "Prog", "F", "F", "F" },
                    { "PROCSCANREFPREKEYID", "scanRefPreKeyId", "int?", "number", "", "ProgramRecipeModel", "ScanRefPre", "F", "F", "F" },
                    { "PROCSCANREFPROGKEYID", "scanRefProgKeyId", "int?", "number", "", "ProgramModel", "ScanRefProg", "F", "F", "F" },
                    { "PROCSECONDAPPROVECOMMENT", "secondApproveComment", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROCSECONDAPPROVEUSERKEYID", "secondApproveUserKeyId", "int?", "number", "", "UserModel", "SecondApproveUser", "F", "F", "F" },
                    { "PROCSTARTTIME", "startTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROCSTARTTIME2", "startTime2", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROCSTATUS", "status", "int?", "number", "ProcessStatus", "", "", "F", "F", "F" },
                    { "PROCTYPE", "type", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPROCESS",
                    "ProcessModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProcessBarcodeModel", stringComparison) || modelOrTableName.Equals("TPROCBARCODE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PBARBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "PBARBATCH", "batch", "int", "number", "", "ProcessModel", "BatchProcess", "F", "F", "F" },
                    { "PBARTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPROCBARCODE",
                    "ProcessBarcodeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProcessConsumablesModel", stringComparison) || modelOrTableName.Equals("TPROCCONS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PROCOAMOUNT", "amount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROCOMACOKEYID", "maCoKeyId", "int", "number", "", "MachineConsumablesModel", "MaCo", "F", "F", "F" },
                    { "PROCOPROCBATCH", "procBatch", "int", "number", "", "ProcessModel", "ProcBatchProcess", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPROCCONS",
                    "ProcessConsumablesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProcessLogModel", stringComparison) || modelOrTableName.Equals("TPROCLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PLOGBATCH", "keyId", "int", "number", "", "ProcessModel", "KeyIdProcess", "T", "F", "F" },
                    { "PLOGEXTFILEINFO", "extFileInfo", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPROCLOG",
                    "ProcessLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProcessLogQueueModel", stringComparison) || modelOrTableName.Equals("TPROCLOGQUEUE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TPROCLOGQUEUE",
                    "ProcessLogQueueModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProcessParametersModel", stringComparison) || modelOrTableName.Equals("TPROCPARAM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRPAPPAKEYID", "pPaKeyId", "int", "number", "", "ProgramParamModel", "PPa", "F", "F", "F" },
                    { "PRPAPROCBATCH", "procBatch", "int", "number", "", "ProcessModel", "ProcBatchProcess", "F", "F", "F" },
                    { "PRPAVALUE", "value", "int", "number", "", "", "", "F", "F", "F" },
                    { "PRPAVALUETEXT", "valueText", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPROCPARAM",
                    "ProcessParametersModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProcLoadModel", stringComparison) || modelOrTableName.Equals("TPROCLOAD", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRLOLOADTAG", "loadTag", "int", "number", "", "TagsModel", "LoadTagTags", "F", "F", "F" },
                    { "PRLOPLOKEYID", "pLoKeyId", "int", "number", "", "PosLocationModel", "PLo", "F", "F", "F" },
                    { "PRLOPROCBATCH", "procBatch", "int", "number", "", "ProcessModel", "ProcBatchProcess", "F", "F", "F" },
                    { "PRLOTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "PRLOUSERKEYID", "userKeyId", "int", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPROCLOAD",
                    "ProcLoadModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProductModel", stringComparison) || modelOrTableName.Equals("TPRODUCT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRODKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PROD_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROD_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "PROD_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROD_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "PRODALTNUMBER", "altNumber", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODAVGONSITESTORETIME", "avgOnSiteStoreTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODAVGOPDURATION", "avgOpDuration", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODBILLINGNUM", "billingNum", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODCNTPSKEYID", "cntpsKeyId", "int?", "number", "", "CountingPointSetModel", "Cntps", "F", "F", "F" },
                    { "PRODCOLOR", "color", "short?", "number", "", "", "", "F", "F", "F" },
                    { "PRODCUSITEKEYID", "cuSiteKeyId", "int?", "number", "", "CustSiteModel", "CuSite", "F", "F", "F" },
                    { "PRODCUSTKEYID", "custKeyId", "int?", "number", "", "CustomerModel", "Cust", "F", "F", "F" },
                    { "PRODDIFFICULTY", "difficulty", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODDIFFICULTYMODE", "difficultyMode", "int", "number", "ProductDifficultyMode", "", "", "F", "F", "F" },
                    { "PRODDISPATCHRESTRICT", "dispatchRestrict", "int", "number", "ProdDispatchRestriction", "", "", "F", "F", "F" },
                    { "PRODENDODRYINGMETHOD", "endodryingmethod", "int?", "number", "", "EndoDryingMethodsModel", "EndodryingmethodEndoDryingMethods", "F", "F", "F" },
                    { "PRODENDOWASHPRGRKEYID", "endoWashPrGrKeyId", "int?", "number", "", "ProgramGroupModel", "EndoWashPrGr", "F", "F", "F" },
                    { "PRODEXTERNALTYPE", "externalType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "PRODFIXEDPRICE", "fixedPrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "PRODFTCOKEYID", "fTCoKeyId", "int?", "number", "", "FastTrackCodeModel", "FTCo", "F", "F", "F" },
                    { "PRODFTPLKEYID", "fTPlKeyId", "int?", "number", "", "FastTrackPlanModel", "FTPl", "F", "F", "F" },
                    { "PRODFTTMPKEYID", "fTTmpKeyId", "int?", "number", "", "FastTrackTemplateModel", "FTTmp", "F", "F", "F" },
                    { "PRODGTIN", "gTIN", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODHANDLINGTIME", "handlingTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODHATKEYID", "haTKeyId", "int?", "number", "", "HandlingTypesModel", "HaT", "F", "F", "F" },
                    { "PRODINARTKEYID", "inArtKeyId", "int?", "number", "", "IdenticalArticleGroupModel", "InArt", "F", "F", "F" },
                    { "PRODITEMKEYID", "itemKeyId", "int", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "PRODLOANER", "loaner", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "PRODPACKKEYID", "packKeyId", "int", "number", "", "PackingModel", "Pack", "F", "F", "F" },
                    { "PRODPACKONSCREEN", "packOnScreen", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "PRODPREDIS", "predis", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "PRODPRICINGTYPE", "pricingType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODPRIGRKEYID", "priGrKeyId", "int?", "number", "", "PriceGroupModel", "PriGr", "F", "F", "F" },
                    { "PRODPRINTLABEL", "printLabel", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "PRODPRINTLIST", "printList", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "PRODPRODUCT", "product", "string", "string", "", "", "", "F", "T", "F" },
                    { "PRODREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODRESERVATIONMODE", "reservationMode", "int", "number", "ProdReservationMode", "", "", "F", "F", "F" },
                    { "PRODSERIALMASK", "serialmask", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "PRODSTERIPRGRKEYID", "steriPrgrKeyId", "int?", "number", "", "ProgramGroupModel", "SteriPrgr", "F", "F", "F" },
                    { "PRODSTERIVOLUME", "steriVolume", "double?", "number", "", "", "", "F", "F", "F" },
                    { "PRODSTOCKPLACEMENT", "stockPlacement", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODSTORAGETYPE", "storageType", "int?", "number", "ProductStorageType", "", "", "F", "F", "F" },
                    { "PRODTOTALCOUNT", "totalCount", "int", "number", "", "", "", "F", "F", "F" },
                    { "PRODTRACEABILITY", "traceability", "int", "number", "", "", "", "F", "F", "F" },
                    { "PRODTRACETYPE", "traceType", "int", "number", "ProductTraceType", "", "", "F", "F", "F" },
                    { "PRODTYPE", "type", "int", "number", "ProductType", "", "", "F", "F", "F" },
                    { "PRODUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRODWASHERVOLUME", "washerVolume", "double?", "number", "", "", "", "F", "F", "F" },
                    { "PRODWASHPRGRKEYID", "washPrgrKeyId", "int?", "number", "", "ProgramGroupModel", "WashPrgr", "F", "F", "F" },
                    { "PRODWEIGHT", "weight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODWEIGHTDELTACALCMODE", "weightDeltaCalcMode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODWEIGHTDELTAUNIT", "weightdeltaunit", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODWEIGHTDELTAVALUE", "weightDeltaValue", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODWEIGHTDISPOSABLE", "weightDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODWEIGHTMODE", "weightMode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODWEIGHTNONDISPOSABLE", "weightNonDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRODWEIGHTUSAGEENABLED", "weightUsageEnabled", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "PRODWPLANKEYID", "wPlanKeyId", "int?", "number", "", "WeightPlanModel", "WPlan", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPRODUCT",
                    "ProductModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProductReservationModel", stringComparison) || modelOrTableName.Equals("TPRODRESERVATION", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRESVAUTOINC", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PRESVEXPDELTIME", "expDelTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PRESVEXPRETURNTIME", "expReturnTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PRESVISUNITACTUAL", "isUnitActual", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "PRESVOLNLINE", "olnLine", "int", "number", "", "", "", "F", "F", "F" },
                    { "PRESVORDKEYID", "ordKeyId", "int", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "PRESVPRODKEYID", "prodKeyId", "int", "number", "", "ProductModel", "Prod", "F", "F", "F" },
                    { "PRESVREQDELTIME", "reqDelTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PRESVSERIKEYID", "seriKeyId", "int?", "number", "", "SerialModel", "Seri", "F", "F", "F" },
                    { "PRESVSTATE", "state", "int", "number", "ReservationState", "", "", "F", "F", "F" },
                    { "PRESVSTATEFIRSTOK", "stateFirstOk", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PRESVSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "PRESVTYPE", "type", "int", "number", "ProductReservationType", "", "", "F", "F", "F" },
                    { "PRESVUNITUNIT", "unitUnit", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPRODRESERVATION",
                    "ProductReservationModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProductTimesModel", stringComparison) || modelOrTableName.Equals("TPRODTIMES", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PROTIKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PROTIFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "PROTIPRODKEYID", "prodKeyId", "int?", "number", "", "ProductModel", "Prod", "F", "F", "F" },
                    { "PROTIPRODTYPE", "prodType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROTITIME", "time", "int", "number", "", "", "", "F", "F", "F" },
                    { "PROTITIMETYPE", "timeType", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPRODTIMES",
                    "ProductTimesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProfileModel", stringComparison) || modelOrTableName.Equals("TPROFILE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PROFKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PROF_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROF_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "PROF_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROF_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "PROFANCESTORKEYID", "ancestorKeyId", "int?", "number", "", "ProfileModel", "Ancestor", "F", "F", "F" },
                    { "PROFNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "PROFTYPE", "type", "int", "number", "", "", "", "F", "F", "T" },
                    { "PROFUPDATEREQUIRED", "updateRequired", "bool", "boolean", "", "", "", "F", "F", "T" }
                };

                result = new ModelToTableMapping(
                    "TPROFILE",
                    "ProfileModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProgramModel", stringComparison) || modelOrTableName.Equals("TPROGRAM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PROGKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PROG_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROG_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "PROG_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PROG_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "PROGAPPROVAL", "approval", "int?", "number", "ApprovalType", "", "", "F", "F", "F" },
                    { "PROGCHECKINITIATED", "checkInitiated", "int?", "number", "ProgramCheckInitiated", "", "", "F", "F", "F" },
                    { "PROGCONSUMCOST", "consumCost", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "PROGDEPRECCOST", "deprecCost", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "PROGDESCRIPTION", "description", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROGDURATION", "duration", "int", "number", "", "", "", "F", "F", "F" },
                    { "PROGFILTERDELTAP", "filterDeltaP", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROGFILTERDELTAT", "filterDeltaT", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROGFILTERTIME1", "filterTime1", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROGFILTERTIME2", "filterTime2", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROGLOGREF", "logRef", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROGMCTYPKEYID", "mcTypKeyId", "int", "number", "", "MachineTypeModel", "McTyp", "F", "F", "F" },
                    { "PROGNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROGPASSWORD", "password", "string", "string", "", "", "", "F", "F", "F" },
                    { "PROGPREHIPRES", "preHiPres", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROGPRELOWPRES", "preLowPres", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROGPRICE", "price", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "PROGPROGRAM", "program", "string", "string", "", "", "", "F", "T", "F" },
                    { "PROGQSETKEYID", "qSetKeyId", "int?", "number", "", "QuestionSetModel", "QSet", "F", "F", "F" },
                    { "PROGSCANNUM", "scanNum", "int", "number", "", "", "", "F", "F", "F" },
                    { "PROGSECONDUSERAPPROVAL", "secondUserApproval", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "PROGSTERILESECONDS", "sterileSeconds", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROGSTERILETEMP", "sterileTemp", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PROGTYPE", "type", "int", "number", "", "", "", "F", "F", "F" },
                    { "PROGUTILITYCOST", "utilityCost", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "PROGVALIDATE", "validate", "bool", "boolean", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPROGRAM",
                    "ProgramModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProgramGroupModel", stringComparison) || modelOrTableName.Equals("TPROGGRP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRGRKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PRGRCOLOR", "color", "short?", "number", "", "", "", "F", "F", "F" },
                    { "PRGRNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "PRGRREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRGRTYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPROGGRP",
                    "ProgramGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProgramGroupsModel", stringComparison) || modelOrTableName.Equals("TPRGGRPS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PGGPPOSITION", "position", "int", "number", "", "", "", "F", "F", "F" },
                    { "PGGPPREKEYID", "preKeyId", "int?", "number", "", "ProgramRecipeModel", "Pre", "F", "F", "F" },
                    { "PGGPPRGRKEYID", "prgrKeyId", "int", "number", "", "ProgramGroupModel", "Prgr", "F", "F", "F" },
                    { "PGGPPROGKEYID", "progKeyId", "int", "number", "", "ProgramModel", "Prog", "F", "F", "F" },
                    { "PGGPSEQUENCE", "sequence", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPRGGRPS",
                    "ProgramGroupsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProgramParamModel", stringComparison) || modelOrTableName.Equals("TPRGPARAM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PPAKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PPACONVDEC", "convdec", "int", "number", "", "", "", "F", "F", "F" },
                    { "PPACONVTYPE", "convtype", "int", "number", "", "", "", "F", "F", "F" },
                    { "PPADEFVALUE", "defValue", "int", "number", "", "", "", "F", "F", "F" },
                    { "PPAMAXVALUE", "maxValue", "int", "number", "", "", "", "F", "F", "F" },
                    { "PPAMINVALUE", "minValue", "int", "number", "", "", "", "F", "F", "F" },
                    { "PPANAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "PPANO", "no", "int", "number", "", "", "", "F", "T", "F" },
                    { "PPAPROGKEYID", "progKeyId", "int", "number", "", "ProgramModel", "Prog", "F", "F", "F" },
                    { "PPAREFNAME", "refName", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPRGPARAM",
                    "ProgramParamModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProgramRecipeModel", stringComparison) || modelOrTableName.Equals("TPRGRECIPE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PREKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "PRE_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PRE_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "PRE_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "PRE_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "PREAPPROVAL", "approval", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PREDESCRIPTION", "description", "string", "string", "", "", "", "F", "F", "F" },
                    { "PREDURATION", "duration", "int", "number", "", "", "", "F", "F", "F" },
                    { "PRELOGREF", "logRef", "string", "string", "", "", "", "F", "F", "F" },
                    { "PRENAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "PREORIGIN", "origin", "int?", "number", "", "ProgramRecipeModel", "OriginProgramRecipe", "F", "F", "F" },
                    { "PREORIGINAL", "original", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "PREPOSTTREAT", "posttreat", "int?", "number", "", "TextModel", "PosttreatText", "F", "F", "F" },
                    { "PREPREHIPRES", "preHiPres", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PREPRELOWPRES", "preLowPres", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PREPRETREAT", "pretreat", "int?", "number", "", "TextModel", "PretreatText", "F", "F", "F" },
                    { "PREPROGKEYID", "progKeyId", "int", "number", "", "ProgramModel", "Prog", "F", "F", "F" },
                    { "PRESTERILESECONDS", "sterileSeconds", "int?", "number", "", "", "", "F", "F", "F" },
                    { "PRESTERILETEMP", "sterileTemp", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPRGRECIPE",
                    "ProgramRecipeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ProgramRecipeParamModel", stringComparison) || modelOrTableName.Equals("TPRGRECIPEPARAM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "PRPMAXVALUE", "maxvalue", "double?", "number", "", "", "", "F", "F", "F" },
                    { "PRPMINVALUE", "minvalue", "double?", "number", "", "", "", "F", "F", "F" },
                    { "PRPPPAKEYID", "ppaKeyId", "int", "number", "", "ProgramParamModel", "Ppa", "F", "F", "F" },
                    { "PRPPREKEYID", "preKeyId", "int", "number", "", "ProgramRecipeModel", "Pre", "F", "F", "F" },
                    { "PRPVALUE", "value", "double", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TPRGRECIPEPARAM",
                    "ProgramRecipeParamModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("QuestionModel", stringComparison) || modelOrTableName.Equals("TQUESTION", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "QUEKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "QUE_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "QUE_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "QUE_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "QUE_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "QUEINPUTCAPTION", "inputCaption", "string", "string", "", "", "", "F", "F", "F" },
                    { "QUEINPUTMAX", "inputMax", "int?", "number", "", "", "", "F", "F", "F" },
                    { "QUEINPUTMIN", "inputMin", "int?", "number", "", "", "", "F", "F", "F" },
                    { "QUEINPUTTYPE", "inputType", "int", "number", "QuestionInputType", "", "", "F", "F", "F" },
                    { "QUEINPUTVALUES", "inputValues", "string", "string", "", "", "", "F", "F", "F" },
                    { "QUEQUESTION", "question", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TQUESTION",
                    "QuestionModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("QuestionAnswerModel", stringComparison) || modelOrTableName.Equals("TQUESTIONANSWER", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "QANSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "QANSANSWER", "answer", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "QANSINPUT", "input", "string", "string", "", "", "", "F", "F", "F" },
                    { "QANSINPUTCAPTION", "inputCaption", "string", "string", "", "", "", "F", "F", "F" },
                    { "QANSINPUTMAX", "inputMax", "int?", "number", "", "", "", "F", "F", "F" },
                    { "QANSINPUTMIN", "inputMin", "int?", "number", "", "", "", "F", "F", "F" },
                    { "QANSINPUTTYPE", "inputType", "int", "number", "", "", "", "F", "F", "F" },
                    { "QANSINPUTVALUES", "inputValues", "string", "string", "", "", "", "F", "F", "F" },
                    { "QANSMANDATORY", "mandatory", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "QANSPLOKEYID", "ploKeyId", "int?", "number", "", "PosLocationModel", "Plo", "F", "F", "F" },
                    { "QANSQSETKEYID", "qSetKeyId", "int?", "number", "", "QuestionSetModel", "QSet", "F", "F", "F" },
                    { "QANSQUEKEYID", "queKeyId", "int?", "number", "", "QuestionModel", "Que", "F", "F", "F" },
                    { "QANSQUESTION", "question", "string", "string", "", "", "", "F", "F", "F" },
                    { "QANSREPLIED", "replied", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "QANSSEQUENCE", "sequence", "int", "number", "", "", "", "F", "F", "F" },
                    { "QANSTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "QANSUSERKEYID", "userKeyId", "int", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TQUESTIONANSWER",
                    "QuestionAnswerModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("QuestionSetModel", stringComparison) || modelOrTableName.Equals("TQUESTIONSET", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "QSETKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "QSET_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "QSET_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "QSET_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "QSET_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "QSETNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "QSETREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "QSETSET", "set", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TQUESTIONSET",
                    "QuestionSetModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("QuestionSetLinkModel", stringComparison) || modelOrTableName.Equals("TQUESTIONSETLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "QSLMANDATORY", "mandatory", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "QSLQSETKEYID", "qSetKeyId", "int", "number", "", "QuestionSetModel", "QSet", "F", "F", "F" },
                    { "QSLQUEKEYID", "queKeyId", "int", "number", "", "QuestionModel", "Que", "F", "F", "F" },
                    { "QSLSEQUENCE", "sequence", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TQUESTIONSETLINK",
                    "QuestionSetLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("RecentModel", stringComparison) || modelOrTableName.Equals("TRECENT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RECKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "RECFACTORYID", "factoryId", "int", "number", "", "FactoryModel", "FactoryIdFactory", "F", "F", "F" },
                    { "RECUSERID", "userId", "int", "number", "", "UserModel", "UserIdUser", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TRECENT",
                    "RecentModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("RecentItemModel", stringComparison) || modelOrTableName.Equals("TRECENTITEM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RECIKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "RECIDATEADDED", "dateAdded", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "RECIFORMCLASSNAME", "formClassName", "string", "string", "", "", "", "F", "F", "F" },
                    { "RECIITEMID", "itemId", "int", "number", "", "", "", "F", "F", "F" },
                    { "RECIRECKEYID", "recKeyId", "int", "number", "", "RecentModel", "Rec", "F", "F", "F" },
                    { "RECITABLENAME", "tableName", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TRECENTITEM",
                    "RecentItemModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("RepairModel", stringComparison) || modelOrTableName.Equals("TREPAIR", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RPAKEYID", "keyId", "int", "number", "", "", "", "T", "T", "F" },
                    { "RPAACTUALCHARGEPRICE", "actualChargePrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "RPAACTUALCOSTPRICE", "actualCostPrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "RPACUSTINVOICEMODE", "custInvoiceMode", "int", "number", "RpTypCustInvMode", "", "", "F", "F", "F" },
                    { "RPACUSTKEYID", "custKeyId", "int?", "number", "", "CustomerModel", "Cust", "F", "F", "F" },
                    { "RPACUSTORDKEYID", "custOrdKeyId", "int?", "number", "", "OrderModel", "CustOrd", "F", "F", "F" },
                    { "RPAENDTIME", "endTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "RPAENDUSERKEYID", "endUserKeyId", "int?", "number", "", "UserModel", "EndUser", "F", "F", "F" },
                    { "RPAEXPECTEDCHARGEPRICE", "expectedChargePrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "RPAEXPECTEDCOSTPRICE", "expectedCostPrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "RPAEXPECTEDRETURNTIME", "expectedReturnTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "RPAFACCOMMENT", "facComment", "string", "string", "", "", "", "F", "F", "F" },
                    { "RPAFACINVOICEMODE", "facInvoiceMode", "int", "number", "RpTypFacInvMode", "", "", "F", "F", "F" },
                    { "RPAFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "RPAINVOICEITEMKEYID", "invoiceItemKeyId", "int?", "number", "", "ItemModel", "InvoiceItem", "F", "F", "F" },
                    { "RPAINVOICESTATE", "invoiceState", "int?", "number", "RepairInvState", "", "", "F", "F", "F" },
                    { "RPAREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "RPAREFORGUNITUNIT", "refOrgUnitUnit", "int?", "number", "", "UnitModel", "RefOrgUnitUnitUnit", "F", "F", "F" },
                    { "RPAREFORIGIN", "refOrigin", "int", "number", "RepairOrigin", "", "", "F", "F", "F" },
                    { "RPAREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" },
                    { "RPAREFSERIKEYID", "refSeriKeyId", "int?", "number", "", "SerialModel", "RefSeri", "F", "F", "F" },
                    { "RPAREFTAGSKEYID", "refTagsKeyId", "int?", "number", "", "TagsModel", "RefTags", "F", "F", "F" },
                    { "RPAREFUNITUNIT", "refUnitUnit", "int?", "number", "", "UnitModel", "RefUnitUnitUnit", "F", "F", "F" },
                    { "RPAREQUESTTIME", "requestTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "RPAREQUESTUSERKEYID", "requestUserKeyId", "int?", "number", "", "UserModel", "RequestUser", "F", "F", "F" },
                    { "RPARETURNTOORIGIN", "returnToOrigin", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RPARPTYPKEYID", "rpTypKeyId", "int", "number", "", "RepairTypeModel", "RpTyp", "F", "F", "F" },
                    { "RPASTARTTIME", "startTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "RPASTARTUSERKEYID", "startUserKeyId", "int?", "number", "", "UserModel", "StartUser", "F", "F", "F" },
                    { "RPASTATUS", "status", "int", "number", "RepairStatus", "", "", "F", "F", "F" },
                    { "RPASUPPCOMMENT", "suppComment", "string", "string", "", "", "", "F", "F", "F" },
                    { "RPASUPPKEYID", "suppKeyId", "int?", "number", "", "SupplierModel", "Supp", "F", "F", "F" },
                    { "RPASUPPORDKEYID", "suppOrdKeyId", "int?", "number", "", "OrderModel", "SuppOrd", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TREPAIR",
                    "RepairModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("RepairTypeModel", stringComparison) || modelOrTableName.Equals("TREPAIRTYPE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RPTYPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "RPTYP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "RPTYP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "RPTYP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "RPTYP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "RPTYPALLOWEDWHERE", "allowedWhere", "int?", "number", "", "", "", "F", "F", "F" },
                    { "RPTYPALLOWITEMS", "allowItems", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RPTYPALLOWPRODUCTS", "allowProducts", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RPTYPALLOWTAGS", "allowTags", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RPTYPALLOWUNITS", "allowUnits", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RPTYPCHARGEPRICE", "chargePrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "RPTYPCOMMENTOPTION", "commentOption", "int", "number", "RpTypCommentOption", "", "", "F", "F", "F" },
                    { "RPTYPCOSTPRICE", "costPrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "RPTYPCUSTINVOICEMODE", "custInvoiceMode", "int", "number", "RpTypCustInvMode", "", "", "F", "F", "F" },
                    { "RPTYPDEFCOMMENT", "defcomment", "string", "string", "", "", "", "F", "F", "F" },
                    { "RPTYPDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "RPTYPFACINVOICEMODE", "facInvoiceMode", "int", "number", "RpTypFacInvMode", "", "", "F", "F", "F" },
                    { "RPTYPFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "RPTYPID", "id", "string", "string", "", "", "", "F", "T", "F" },
                    { "RPTYPINTERNAL", "internal", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RPTYPINVOICEITEMKEYID", "invoiceItemKeyId", "int?", "number", "", "ItemModel", "InvoiceItem", "F", "F", "F" },
                    { "RPTYPNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "RPTYPOMITSERIALS", "omitSerials", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RPTYPPRINTLABELEND", "printLabelEnd", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RPTYPPRINTLABELSTART", "printLabelStart", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RPTYPPRINTLISTEND", "printListEnd", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RPTYPPRINTLISTSTART", "printListStart", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RPTYPREPAIRSUPPKEYID", "repairSuppKeyId", "int?", "number", "", "SupplierModel", "RepairSupp", "F", "F", "F" },
                    { "RPTYPSENDMAIL", "sendMail", "int?", "number", "", "", "", "F", "F", "F" },
                    { "RPTYPSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "RPTYPSUPPLIERMODE", "supplierMode", "int", "number", "RpTypSuppMode", "", "", "F", "F", "F" },
                    { "RPTYPTIME", "time", "int?", "number", "", "", "", "F", "F", "F" },
                    { "RPTYPTYPE", "type", "int", "number", "RpTypType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TREPAIRTYPE",
                    "RepairTypeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ReportModel", stringComparison) || modelOrTableName.Equals("TREPORT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "REPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "REPBASETABLE", "baseTable", "string", "string", "", "", "", "F", "F", "F" },
                    { "REPDEFAULT", "default", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "REPDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "REPLICMODULES", "licModules", "string", "string", "", "", "", "F", "F", "F" },
                    { "REPLICSHOW", "licShow", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "REPNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "REPPATH", "path", "string", "string", "", "", "", "F", "F", "F" },
                    { "REPRSGRKEYID", "rsgrKeyId", "int?", "number", "", "RepSecGroupsModel", "Rsgr", "F", "F", "F" },
                    { "REPSELGROUP", "selGroup", "int", "number", "", "", "", "F", "F", "F" },
                    { "REPSELORDER", "selorder", "int?", "number", "", "", "", "F", "F", "F" },
                    { "REPSELSHOW", "selShow", "int?", "number", "", "", "", "F", "F", "F" },
                    { "REPSTANDARD", "standard", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "REPSUBREPORTS", "subreports", "string", "string", "", "", "", "F", "F", "F" },
                    { "REPSYSID", "sysId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "REPSYSSELGROUP", "sysSelGroup", "int?", "number", "", "", "", "F", "F", "F" },
                    { "REPSYSSELORDER", "sysSelOrder", "int?", "number", "", "", "", "F", "F", "F" },
                    { "REPSYSSELSHOW", "sysSelShow", "int?", "number", "", "", "", "F", "F", "F" },
                    { "REPTYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TREPORT",
                    "ReportModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ReportDefModel", stringComparison) || modelOrTableName.Equals("TREPDEFS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RDFKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TREPDEFS",
                    "ReportDefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("RepSecGroupMembersModel", stringComparison) || modelOrTableName.Equals("TREPSECGRPMEM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RSGMPROFKEYID", "profKeyId", "int?", "number", "", "ProfileModel", "Prof", "F", "F", "F" },
                    { "RSGMRSGRKEYID", "rSGrKeyId", "int", "number", "", "RepSecGroupsModel", "RSGr", "F", "F", "F" },
                    { "RSGMUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TREPSECGRPMEM",
                    "RepSecGroupMembersModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("RepSecGroupsModel", stringComparison) || modelOrTableName.Equals("TREPSECGRP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RSGRKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "RSGR_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "RSGR_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "RSGR_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "RSGR_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "RSGRACTIVE", "active", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RSGRDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "RSGRGROUP", "group", "string", "string", "", "", "", "F", "T", "F" },
                    { "RSGRNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "RSGRSYSID", "sysId", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TREPSECGRP",
                    "RepSecGroupsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("RepSelectionModel", stringComparison) || modelOrTableName.Equals("TREPSEL", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RSLCOUNT", "count", "int?", "number", "", "", "", "F", "F", "F" },
                    { "RSLPRINTEXTRA", "printExtra", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "RSLREFCUSTKEYID", "refCustKeyId", "int?", "number", "", "CustomerModel", "RefCust", "F", "F", "F" },
                    { "RSLREFFACKEYID", "refFacKeyId", "int?", "number", "", "FactoryModel", "RefFac", "F", "F", "F" },
                    { "RSLREFMACHKEYID", "refMachKeyId", "int?", "number", "", "MachineModel", "RefMach", "F", "F", "F" },
                    { "RSLREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" },
                    { "RSLREFRPTYPKEYID", "refRpTypKeyId", "int?", "number", "", "RepairTypeModel", "RefRpTyp", "F", "F", "F" },
                    { "RSLREFSUPPKEYID", "refSuppKeyId", "int?", "number", "", "SupplierModel", "RefSupp", "F", "F", "F" },
                    { "RSLREPKEYID", "repKeyId", "int", "number", "", "ReportModel", "Rep", "F", "F", "F" },
                    { "RSLREPTYPE", "reptype", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TREPSEL",
                    "RepSelectionModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ReturnRequestedUHistoryModel", stringComparison) || modelOrTableName.Equals("TRETURNREQHIST", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RRHAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "RRHENDTIME", "endTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "RRHOPDKEYID", "opdKeyId", "int?", "number", "", "OperationDataModel", "Opd", "F", "F", "F" },
                    { "RRHORDKEYID", "ordKeyId", "int?", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "RRHTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "RRHUNITUNIT", "unitUnit", "int", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TRETURNREQHIST",
                    "ReturnRequestedUHistoryModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ReturnRequestedUnitsModel", stringComparison) || modelOrTableName.Equals("TRETURNREQ", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RERAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "REROPDKEYID", "opdKeyId", "int?", "number", "", "OperationDataModel", "Opd", "F", "F", "F" },
                    { "RERORDKEYID", "ordKeyId", "int?", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "RERTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "RERUNITUNIT", "unitUnit", "int", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TRETURNREQ",
                    "ReturnRequestedUnitsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("RoomModel", stringComparison) || modelOrTableName.Equals("TROOM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ROOMKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ROOMARRIVEDLGRPKEYID", "arrivedLGrpKeyId", "int?", "number", "", "LocationGroupModel", "ArrivedLGrp", "F", "F", "F" },
                    { "ROOMAVAILABLELGRPKEYID", "availableLGrpKeyId", "int?", "number", "", "LocationGroupModel", "AvailableLGrp", "F", "F", "F" },
                    { "ROOMBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMBLOCKORDERCREATION", "blockOrderCreation", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "ROOMCALKEYID", "calKeyId", "int?", "number", "", "CalendarModel", "Cal", "F", "F", "F" },
                    { "ROOMDELGLN", "delGln", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMDESC", "desc", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMGLN", "gln", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMID", "id", "string", "string", "", "", "", "F", "T", "F" },
                    { "ROOMNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "ROOMSTGRKEYID", "stGrKeyId", "int?", "number", "", "StockGroupModel", "StGr", "F", "F", "F" },
                    { "ROOMSTOKKEYID", "stokKeyId", "int?", "number", "", "StocksModel", "Stok", "F", "F", "F" },
                    { "ROOMUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "ROOMUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TROOM",
                    "RoomModel",
                    columnToPropertyMappings
                );
            }

            return result;

            #endregion Mappings
        }

        private static ModelToTableMapping CreateModelToTableMapping_07(string modelOrTableName)
        {
            StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase;

            ModelToTableMapping result = null;

            #region Mappings

            if (modelOrTableName.Equals("RoomCustomerModel", stringComparison) || modelOrTableName.Equals("TROOMCUST", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ROCUCUSTKEYID", "custKeyId", "int", "number", "", "CustomerModel", "Cust", "F", "F", "F" },
                    { "ROCUROOMKEYID", "roomKeyId", "int", "number", "", "RoomModel", "Room", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TROOMCUST",
                    "RoomCustomerModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("RouteModel", stringComparison) || modelOrTableName.Equals("TROUTE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RTEKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "RTE_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "RTE_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "RTE_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "RTE_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "RTEDESC", "desc", "string", "string", "", "", "", "F", "F", "F" },
                    { "RTEDIRECTION", "direction", "int", "number", "", "", "", "F", "F", "F" },
                    { "RTEDURATION", "duration", "int", "number", "", "", "", "F", "F", "F" },
                    { "RTENAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "RTESCHEME", "scheme", "string", "string", "", "", "", "F", "F", "F" },
                    { "RTETYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TROUTE",
                    "RouteModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("RouteStopModel", stringComparison) || modelOrTableName.Equals("TROUTESTOP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RTESKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "RTESRTEKEYID", "rteKeyId", "int", "number", "", "RouteModel", "Rte", "F", "F", "F" },
                    { "RTESTRKSKEYID", "trkSKeyId", "int", "number", "", "TruckStopModel", "TrkS", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TROUTESTOP",
                    "RouteStopModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("RouteTruckModel", stringComparison) || modelOrTableName.Equals("TROUTETRUCK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "RTETKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "RTET_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "RTET_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "RTET_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "RTET_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "RTETDAYOFWEEK", "dayOfWeek", "int", "number", "", "", "", "F", "F", "F" },
                    { "RTETRTEKEYID", "rteKeyId", "int", "number", "", "RouteModel", "Rte", "F", "F", "F" },
                    { "RTETSTARTTIME", "startTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "RTETTRKKEYID", "trkKeyId", "int", "number", "", "TruckModel", "Trk", "F", "F", "F" },
                    { "RTETWKPKEYID", "wkpKeyId", "int", "number", "", "WorkPeriodsModel", "Wkp", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TROUTETRUCK",
                    "RouteTruckModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SealerProcessModel", stringComparison) || modelOrTableName.Equals("TSEALERPROCESS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SEPRCPRES", "pres", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SEPRCTEMP", "temp", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SEPRCTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "SEPRCUNIT", "unit", "int", "number", "", "UnitModel", "UnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSEALERPROCESS",
                    "SealerProcessModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SealerProgramModel", stringComparison) || modelOrTableName.Equals("TSEALERPROG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SEPRGKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "SEPRG_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SEPRG_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "SEPRG_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SEPRG_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "SEPRGNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "SEPRGPRES", "pres", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SEPRGPROGRAM", "program", "string", "string", "", "", "", "F", "T", "F" },
                    { "SEPRGTEMP", "temp", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSEALERPROG",
                    "SealerProgramModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SequenceModel", stringComparison) || modelOrTableName.Equals("TSEQUENC", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SEQCOUNTER", "counter", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SEQREFKEYID", "refKeyId", "int", "number", "", "", "", "F", "F", "F" },
                    { "SEQREFTYPE", "refType", "int", "number", "", "", "", "F", "F", "F" },
                    { "SEQTYPE", "type", "int", "number", "SequenceType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSEQUENC",
                    "SequenceModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SerialModel", stringComparison) || modelOrTableName.Equals("TSERIAL", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SERIKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "SERI_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SERI_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "SERI_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SERI_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "SERIBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIDISPATCHRESTRICT", "dispatchRestrict", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SERIFTCOKEYID", "fTCoKeyId", "int?", "number", "", "FastTrackCodeModel", "FTCo", "F", "F", "F" },
                    { "SERIFTPLKEYID", "fTPlKeyId", "int?", "number", "", "FastTrackPlanModel", "FTPl", "F", "F", "F" },
                    { "SERIFTTMPKEYID", "fTTmpKeyId", "int?", "number", "", "FastTrackTemplateModel", "FTTmp", "F", "F", "F" },
                    { "SERIHATKEYID", "hatKeyId", "int?", "number", "", "HandlingTypesModel", "Hat", "F", "F", "F" },
                    { "SERILOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "SERIMANUFACTSERIALNUMBER", "manufactserialnumber", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIOWNERCUSITEKEYID", "ownerCuSiteKeyId", "int?", "number", "", "CustSiteModel", "OwnerCuSite", "F", "F", "F" },
                    { "SERIOWNERCUSTKEYID", "ownerCustKeyId", "int?", "number", "", "CustomerModel", "OwnerCust", "F", "F", "F" },
                    { "SERIOWNERFACKEYID", "ownerFacKeyId", "int?", "number", "", "FactoryModel", "OwnerFac", "F", "F", "F" },
                    { "SERIOWNERSUPPKEYID", "ownerSuppKeyId", "int?", "number", "", "SupplierModel", "OwnerSupp", "F", "F", "F" },
                    { "SERIPACKKEYID", "packKeyId", "int?", "number", "", "PackingModel", "Pack", "F", "F", "F" },
                    { "SERIPURCHASEDATE", "purchaseDate", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SERIPURCHASEORDNO", "purchaseOrdNo", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIPURCHASEPRICE", "purchasePrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "SERIPURCHASETIME", "purchaseTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SERIREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "SERIREFPREKEYID", "refPReKeyId", "int?", "number", "", "ProgramRecipeModel", "RefPRe", "F", "F", "F" },
                    { "SERIREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" },
                    { "SERIREFPROGKEYID", "refProgKeyId", "int?", "number", "", "ProgramModel", "RefProg", "F", "F", "F" },
                    { "SERIREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERISERIALNO", "serialNo", "string", "string", "", "", "", "F", "T", "F" },
                    { "SERISTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "SERISTOCKPLACEMENT", "stockplacement", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERISTOKKEYID", "stokKeyId", "int?", "number", "", "StocksModel", "Stok", "F", "F", "F" },
                    { "SERISUPPKEYID", "suppKeyId", "int?", "number", "", "SupplierModel", "Supp", "F", "F", "F" },
                    { "SERIUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" },
                    { "SERIUNITUNIT", "unitUnit", "int?", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" },
                    { "SERIUSAGECOUNT", "usageCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SERIWEIGHT", "weight", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSERIAL",
                    "SerialModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ServerPoolModel", stringComparison) || modelOrTableName.Equals("TSERVPOOL", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SERVPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "SERVP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SERVP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "SERVP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SERVP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "SERVPCONNECT", "connect", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "SERVPCONNECTCLNT", "connectClnt", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "SERVPJOBSRV", "jobSrv", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "SERVPNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "SERVPPRINTSRV", "printSrv", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "SERVPSCANNER", "scanner", "bool?", "boolean", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSERVPOOL",
                    "ServerPoolModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ServerPoolClientTeamsModel", stringComparison) || modelOrTableName.Equals("TSERVPOOLCLITEAM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SERVPCLITCLITKEYID", "cliTKeyId", "int", "number", "", "ClientTeamModel", "CliT", "F", "F", "F" },
                    { "SERVPCLITKEY", "key", "int", "number", "", "", "", "F", "F", "F" },
                    { "SERVPCLITSERVPKEYID", "servPKeyId", "int", "number", "", "ServerPoolModel", "ServP", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSERVPOOLCLITEAM",
                    "ServerPoolClientTeamsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("ServerPoolServersModel", stringComparison) || modelOrTableName.Equals("TSERVPOOLSERVER", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SPSERVKEY", "key", "int", "number", "", "", "", "F", "F", "F" },
                    { "SPSERVLSKEYID", "lsKeyId", "int", "number", "", "LinkStatModel", "Ls", "F", "F", "F" },
                    { "SPSERVSERVPKEYID", "servPKeyId", "int", "number", "", "ServerPoolModel", "ServP", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSERVPOOLSERVER",
                    "ServerPoolServersModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SettingsModel", stringComparison) || modelOrTableName.Equals("TSETTINGS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TSETTINGS",
                    "SettingsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SpecialtyLinkModel", stringComparison) || modelOrTableName.Equals("TSPECLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SPCLNKAUTOINC", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "SPCLNKCUSITEKEYID", "cuSiteKeyId", "int?", "number", "", "CustSiteModel", "CuSite", "F", "F", "F" },
                    { "SPCLNKDOCTKEYID", "doctKeyId", "int?", "number", "", "DoctorModel", "Doct", "F", "F", "F" },
                    { "SPCLNKITSPCKEYID", "itSpcKeyId", "int", "number", "", "ItemSpecialtyModel", "ItSpc", "F", "F", "F" },
                    { "SPCLNKOPTKEYID", "opTKeyId", "int?", "number", "", "OperationTypeModel", "OpT", "F", "F", "F" },
                    { "SPCLNKPREFKEYID", "prefKeyId", "int?", "number", "", "PreferenceListModel", "Pref", "F", "F", "F" },
                    { "SPCLNKPROTKEYID", "proTKeyId", "int?", "number", "", "ProcedureTypeModel", "ProT", "F", "F", "F" },
                    { "SPCLNKROOMKEYID", "roomKeyId", "int?", "number", "", "RoomModel", "Room", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSPECLINK",
                    "SpecialtyLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SplitTagModel", stringComparison) || modelOrTableName.Equals("TSPLITTAG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SPLPRODSERIKEYID", "prodSeriKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SPLSPLITTAGNO", "splitTagNo", "int", "number", "", "TagsModel", "SplitTagNoTags", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSPLITTAG",
                    "SplitTagModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SpoolQueueModel", stringComparison) || modelOrTableName.Equals("TSPOOLQUEUE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SPOOLQCREATED", "created", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "SPOOLQFILENAME", "filename", "string", "string", "", "", "", "F", "F", "F" },
                    { "SPOOLQKEY", "key", "int", "number", "", "", "", "F", "F", "F" },
                    { "SPOOLQRPL", "rPL", "int", "number", "", "", "", "F", "F", "F" },
                    { "SPOOLQSOURCELSID", "sourceLSId", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSPOOLQUEUE",
                    "SpoolQueueModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SPOSListModel", stringComparison) || modelOrTableName.Equals("TSPOSLIST", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SPOSKEY", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "SPOSCHECKED", "checked", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SPOSCOUNT", "count", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SPOSINTERNALPOSITION", "internalPosition", "int", "number", "", "", "", "F", "F", "F" },
                    { "SPOSPARENTKEY", "parentKey", "int?", "number", "", "SPOSListModel", "ParentKeySPOSList", "F", "F", "F" },
                    { "SPOSPRODKEYID", "prodKeyId", "int", "number", "", "ProductModel", "Prod", "F", "F", "F" },
                    { "SPOSREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "SPOSREFSERIKEYID", "refSeriKeyId", "int?", "number", "", "SerialModel", "RefSeri", "F", "F", "F" },
                    { "SPOSREPAIRCOUNT", "repairCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SPOSSERIALTYPE", "serialType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SPOSSERIKEYID", "seriKeyId", "int?", "number", "", "SerialModel", "Seri", "F", "F", "F" },
                    { "SPOSSUBSTITUTIONREASON", "substitutionReason", "int?", "number", "SubstitutionReason", "", "", "F", "F", "F" },
                    { "SPOSUNIT", "unit", "int?", "number", "", "UnitModel", "UnitUnit", "F", "F", "F" },
                    { "SPOSUSERKEYID", "userKeyId", "int", "number", "", "UserModel", "User", "F", "F", "F" },
                    { "SPOSWORKTIME", "workTime", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSPOSLIST",
                    "SPOSListModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SpotTestModel", stringComparison) || modelOrTableName.Equals("TSPOTTEST", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SPOTTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "SPOTTEXTID", "extId", "long?", "number", "", "", "", "F", "F", "F" },
                    { "SPOTTLASTSTATETIME", "lastStateTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SPOTTLASTSTATEUSERKEYID", "lastStateUserKeyId", "int?", "number", "", "UserModel", "LastStateUser", "F", "F", "F" },
                    { "SPOTTPROCBATCH", "procBatch", "int?", "number", "", "ProcessModel", "ProcBatchProcess", "F", "F", "F" },
                    { "SPOTTREQLOCAKEYID", "reqLocaKeyId", "int", "number", "", "LocationModel", "ReqLoca", "F", "F", "F" },
                    { "SPOTTREQMACHKEYID", "reqmachKeyId", "int?", "number", "", "MachineModel", "Reqmach", "F", "F", "F" },
                    { "SPOTTREQTIME", "reqTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SPOTTREQUSERKEYID", "reqUserKeyId", "int?", "number", "", "UserModel", "ReqUser", "F", "F", "F" },
                    { "SPOTTRESULT", "result", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SPOTTRESULTLOCAKEYID", "resultLocaKeyId", "int?", "number", "", "LocationModel", "ResultLoca", "F", "F", "F" },
                    { "SPOTTRESULTTIME", "resultTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SPOTTRESULTUSERKEYID", "resultUserKeyId", "int?", "number", "", "UserModel", "ResultUser", "F", "F", "F" },
                    { "SPOTTSTATE", "state", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSPOTTEST",
                    "SpotTestModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("StandardCommentModel", stringComparison) || modelOrTableName.Equals("TSTANDARDCOMMENT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "STDCOMKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "STDCOM_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "STDCOM_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "STDCOM_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "STDCOM_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "STDCOMCOMMENTOPTION", "commentOption", "int", "number", "StdCommentFreeTextOption", "", "", "F", "F", "F" },
                    { "STDCOMFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "STDCOMID", "id", "string", "string", "", "", "", "F", "T", "F" },
                    { "STDCOMLOCPROCESSES", "locProcesses", "long", "number", "", "", "", "F", "F", "F" },
                    { "STDCOMNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "STDCOMREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "STDCOMSHOWINPRODUCTION", "showInProduction", "int", "number", "StdCommentShowInProdOption", "", "", "F", "F", "F" },
                    { "STDCOMSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSTANDARDCOMMENT",
                    "StandardCommentModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("StandardCommentLinkModel", stringComparison) || modelOrTableName.Equals("TSTANDARDCOMMENTLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SCLNKAUTOINC", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "SCLNKACKTIME", "ackTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SCLNKACKUSERKEYID", "ackUserKeyId", "int?", "number", "", "UserModel", "AckUser", "F", "F", "F" },
                    { "SCLNKCOMBINEDTEXT", "combinedText", "string", "string", "", "", "", "F", "F", "F" },
                    { "SCLNKLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "SCLNKSTDCOMKEYID", "stdComKeyId", "int", "number", "", "StandardCommentModel", "StdCom", "F", "F", "F" },
                    { "SCLNKSTDTEXT", "stdText", "string", "string", "", "", "", "F", "F", "F" },
                    { "SCLNKTEXT", "text", "string", "string", "", "", "", "F", "F", "F" },
                    { "SCLNKTIMEADDED", "timeAdded", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "SCLNKUNITUNIT", "unitUnit", "int", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" },
                    { "SCLNKUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSTANDARDCOMMENTLINK",
                    "StandardCommentLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("StockModel", stringComparison) || modelOrTableName.Equals("TSTOCK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "STOAUTOCREATED", "autoCreated", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "STODESIREDCOUNT", "desiredCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOINVENTORYACTIVE", "inventoryActive", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "STOINVENTORYCOUNT", "inventoryCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOINVENTORYPHYSCOUNT", "inventoryPhysCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOINVENTORYPHYSTIME", "inventoryPhysTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "STOINVENTORYPHYSUSERKEYID", "inventoryPhysUserKeyId", "int?", "number", "", "UserModel", "InventoryPhysUser", "F", "F", "F" },
                    { "STOINVENTORYTIME", "inventoryTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "STOINVENTORYUSERKEYID", "inventoryUserKeyId", "int?", "number", "", "UserModel", "InventoryUser", "F", "F", "F" },
                    { "STOMAXCOUNT", "maxCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOMINCOUNT", "minCount", "int", "number", "", "", "", "F", "F", "F" },
                    { "STOONSTOCK", "onStock", "int", "number", "", "", "", "F", "F", "F" },
                    { "STOORDEREDCOUNT", "orderedCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOPLACEMENT", "placement", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOPRODUCTIONCOUNT", "productionCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "STOREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" },
                    { "STORESERVEDCOUNT", "reservedCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOSTOKKEYID", "stokKeyId", "int", "number", "", "StocksModel", "Stok", "F", "F", "F" },
                    { "STOSUPPORDERMINCOUNT", "suppOrderMinCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOSUPPORDERSTDCOUNT", "suppOrderStdCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOSUPPREFFACKEYID", "suppRefFacKeyId", "int?", "number", "", "FactoryModel", "SuppRefFac", "F", "F", "F" },
                    { "STOSUPPREFSUPPKEYID", "suppRefSuppKeyId", "int?", "number", "", "SupplierModel", "SuppRefSupp", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSTOCK",
                    "StockModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("StockGroupModel", stringComparison) || modelOrTableName.Equals("TSTKGRP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "STGRKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "STGR_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "STGR_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "STGR_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "STGR_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "STGRDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "STGRNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "STGRSTOCKGROUP", "stockGroup", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TSTKGRP",
                    "StockGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("StockGroupRefModel", stringComparison) || modelOrTableName.Equals("TSTKGRPREF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "STGRRPOSITION", "position", "int", "number", "", "", "", "F", "F", "F" },
                    { "STGRRSTGRKEYID", "stGrKeyId", "int", "number", "", "StockGroupModel", "StGr", "F", "F", "F" },
                    { "STGRRSTOKKEYID", "stokKeyId", "int", "number", "", "StocksModel", "Stok", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSTKGRPREF",
                    "StockGroupRefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("StockInventoryModel", stringComparison) || modelOrTableName.Equals("TSTKINV", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "STINVREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "STINVREFPRODKEYID", "refProdKeyId", "int?", "number", "", "ProductModel", "RefProd", "F", "F", "F" },
                    { "STINVSERIKEYID", "seriKeyId", "int?", "number", "", "SerialModel", "Seri", "F", "F", "F" },
                    { "STINVSTOKKEYID", "stokKeyId", "int", "number", "", "StocksModel", "Stok", "F", "F", "F" },
                    { "STINVTIME", "time", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "STINVUNITUNIT", "unitUnit", "int?", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" },
                    { "STINVUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSTKINV",
                    "StockInventoryModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("StockOrderModel", stringComparison) || modelOrTableName.Equals("TSTOCKORDER", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "STOOAUTOINC", "autoinc", "int", "number", "", "", "", "F", "F", "F" },
                    { "STOOCOUNT", "count", "int", "number", "", "", "", "F", "F", "F" },
                    { "STOOIRESKEYID", "iResKeyId", "int", "number", "", "ItemReservationModel", "IRes", "F", "F", "F" },
                    { "STOOORDKEYID", "ordKeyId", "int", "number", "", "OrderModel", "Ord", "F", "F", "F" },
                    { "STOOSTOKKEYID", "stokKeyId", "int", "number", "", "StocksModel", "Stok", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSTOCKORDER",
                    "StockOrderModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("StockPlacementsModel", stringComparison) || modelOrTableName.Equals("TSTOCKPLACEMENTS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "STPLDEFAULT", "default", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "STPLFSPLKEYID", "fsplKeyId", "int", "number", "", "FixedStockPlacementsModel", "Fspl", "F", "F", "F" },
                    { "STPLPRODKEYID", "prodKeyId", "int?", "number", "", "ProductModel", "Prod", "F", "F", "F" },
                    { "STPLSERIKEYID", "seriKeyId", "int?", "number", "", "SerialModel", "Seri", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSTOCKPLACEMENTS",
                    "StockPlacementsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("StocksModel", stringComparison) || modelOrTableName.Equals("TSTOCKS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "STOKKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "STOKALLOWITEMS", "allowItems", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "STOKALLOWNEGCOUNT", "allowNegCount", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "STOKALLOWPRODUCTS", "allowProducts", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "STOKBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKBOINMODE", "bOInMode", "int?", "number", "StockBackOrderMode", "", "", "F", "F", "F" },
                    { "STOKBOOUTMODE", "bOOutMode", "int?", "number", "StockBackOrderMode", "", "", "F", "F", "F" },
                    { "STOKDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKDROPITEMSUPPONSUGG", "dropItemSuppOnSugg", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "STOKEMGCTKEYID", "emgCTKeyId", "int?", "number", "", "EmgCaseCartTypeModel", "EmgCT", "F", "F", "F" },
                    { "STOKFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "STOKISTRACESTOCK", "isTracestock", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "STOKISTRANSITSTOCK", "isTransitStock", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "STOKLOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "STOKNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKOPTKEYID", "opTKeyId", "int?", "number", "", "OperationTypeModel", "OpT", "F", "F", "F" },
                    { "STOKORDERINMODE", "orderInMode", "int?", "number", "StockOrderInMode", "", "", "F", "F", "F" },
                    { "STOKPLACEMENTMASK", "placementMask", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKPRNBACKORDER", "prnBackOrder", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOKPRNCOMPLETEDORDER", "prnCompletedOrder", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOKPRNCONFIRMATION", "prnConfirmation", "int?", "number", "StockPrnMode", "", "", "F", "F", "F" },
                    { "STOKPRNDELIVERY", "prnDelivery", "int?", "number", "StockPrnMode", "", "", "F", "F", "F" },
                    { "STOKPRNPICKLIST", "prnPicklist", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOKPRNRECEIVEDORDER", "prnReceivedOrder", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STOKPRNSENTORDER", "prnSentOrder", "int?", "number", "StockPrnMode", "", "", "F", "F", "F" },
                    { "STOKREFCUSTKEYID", "refCustKeyId", "int?", "number", "", "CustomerModel", "RefCust", "F", "F", "F" },
                    { "STOKREFFACKEYID", "refFacKeyId", "int?", "number", "", "FactoryModel", "RefFac", "F", "F", "F" },
                    { "STOKREFSUPPKEYID", "refSuppKeyId", "int?", "number", "", "SupplierModel", "RefSupp", "F", "F", "F" },
                    { "STOKSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "STOKSTOCK", "stock", "string", "string", "", "", "", "F", "T", "F" },
                    { "STOKSUPPREFFACKEYID", "suppRefFacKeyId", "int?", "number", "", "FactoryModel", "SuppRefFac", "F", "F", "F" },
                    { "STOKSUPPREFSUPPKEYID", "suppRefSuppKeyId", "int?", "number", "", "SupplierModel", "SuppRefSupp", "F", "F", "F" },
                    { "STOKTYPE", "type", "int", "number", "", "", "", "F", "F", "F" },
                    { "STOKUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "STOKUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSTOCKS",
                    "StocksModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SupplierModel", stringComparison) || modelOrTableName.Equals("TSUPPLIE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SUPPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "SUPP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SUPP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "SUPP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SUPP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "SUPPACCEPTORDERS", "acceptorders", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SUPPADDRESS1", "address1", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPADDRESS2", "address2", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPCALKEYID", "calKeyId", "int?", "number", "", "CalendarModel", "Cal", "F", "F", "F" },
                    { "SUPPCITY", "city", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPCOUNTRY", "country", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPEMAIL", "email", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "SUPPFAX", "fax", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPINTERNAL", "internal", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SUPPNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPORDERDELTIME", "orderDelTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SUPPORDERHANDLINGTIME", "orderHandlingTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SUPPORDERRAMPTIME", "orderRampTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SUPPORDERTRANSMITTIME", "orderTransmitTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SUPPOWNCUSTNUMBER", "ownCustNumber", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPREPAIRVENDORKEYID", "repairVendorKeyId", "int?", "number", "", "SupplierModel", "RepairVendor", "F", "F", "F" },
                    { "SUPPSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "SUPPSUPPLIER", "supplier", "string", "string", "", "", "", "F", "T", "F" },
                    { "SUPPTELEPHONE", "telephone", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPTYPE", "type", "int", "number", "", "", "", "F", "F", "F" },
                    { "SUPPUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPWEBPASSWORD", "webPassword", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPWEBSITE", "webSite", "string", "string", "", "", "", "F", "F", "F" },
                    { "SUPPWEBUSER", "webUser", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSUPPLIE",
                    "SupplierModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SysTasksModel", stringComparison) || modelOrTableName.Equals("TSYSTASK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "STASKNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "STASKPDATE1", "pdate1", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "STASKPDATE2", "pdate2", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "STASKPDATE3", "pdate3", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "STASKPDATE4", "pdate4", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "STASKPDATE5", "pdate5", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "STASKPFLOAT1", "pfloat1", "double?", "number", "", "", "", "F", "F", "F" },
                    { "STASKPFLOAT2", "pfloat2", "double?", "number", "", "", "", "F", "F", "F" },
                    { "STASKPFLOAT3", "pfloat3", "double?", "number", "", "", "", "F", "F", "F" },
                    { "STASKPFLOAT4", "pfloat4", "double?", "number", "", "", "", "F", "F", "F" },
                    { "STASKPFLOAT5", "pfloat5", "double?", "number", "", "", "", "F", "F", "F" },
                    { "STASKPINT1", "pint1", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STASKPINT2", "pint2", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STASKPINT3", "pint3", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STASKPINT4", "pint4", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STASKPINT5", "pint5", "int?", "number", "", "", "", "F", "F", "F" },
                    { "STASKPTEXT", "ptext", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSYSTASK",
                    "SysTasksModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SystemModel", stringComparison) || modelOrTableName.Equals("TSYSTEM", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SYSALLOWGEPASSWORD", "allowGEPassword", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSAUTOATTACHLOCA", "autoAttachLoca", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSAUTOATTACHLOCADATE", "autoAttachLocaDate", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "SYSBARCODECUSTOWNER", "barcodeCustOwner", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSBARCODEDROPNUMMASK", "barcodeDropNumMask", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSBARCODEUSAGE", "barcodeusage", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSBATCHUSERVERIFICATION", "batchUserVerification", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSCENTURYBREAK", "centuryBreak", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSCHARGEUSAGE", "chargeusage", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSCNTPSKEYID", "cntpsKeyId", "int?", "number", "", "CountingPointSetModel", "Cntps", "F", "F", "F" },
                    { "SYSDEFCUSITEKEYID", "defCuSiteKeyId", "int?", "number", "", "CustSiteModel", "DefCuSite", "F", "F", "F" },
                    { "SYSDEFDOCTKEYID", "defDoctKeyId", "int?", "number", "", "DoctorModel", "DefDoct", "F", "F", "F" },
                    { "SYSDEFITEMDIFFICULTYMODE", "defItemDifficultyMode", "int", "number", "ItemDifficultyMode", "", "", "F", "F", "F" },
                    { "SYSDEFITEMDISCARDLEVEL", "defItemDiscardLevel", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSDEFPATAGE", "defPatAge", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSDEFPATGENDER", "defPatGender", "int?", "number", "SexType", "", "", "F", "F", "F" },
                    { "SYSDEFROOMKEYID", "defRoomKeyId", "int?", "number", "", "RoomModel", "DefRoom", "F", "F", "F" },
                    { "SYSDELPKEYID", "delPKeyId", "int?", "number", "", "DeliveryPlanModel", "DelP", "F", "F", "F" },
                    { "SYSDOCTORUSAGE", "doctorUsage", "int?", "number", "DoctorUsage", "", "", "F", "F", "F" },
                    { "SYSEMAILSENDERADDR", "emailSenderAddr", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSEMAILSENDERNAME", "emailSenderName", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSENABLEIDENTARTINCOMP", "enableIdentArtInComp", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSENABLEIDENTARTINORDERS", "enableIdentArtInOrders", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSENABLEIDENTARTINPREFLISTS", "enableIdentArtInPrefLists", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSENABLESUBSTITUTION", "enableSubstitution", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSFACRESTRICTMODE", "facrestrictmode", "int?", "number", "FactoryRestrictionMode", "", "", "F", "F", "F" },
                    { "SYSFIRSTDAYOFWEEK", "firstDayOfWeek", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSFIRSTWEEKOFYEAR", "firstWeekOfYear", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSFIXEDPRICES", "fixedprices", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSGS1COMPANYPREFIX", "gS1CompanyPrefix", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSGS1GTINPRODUCTASSIGN", "gS1GTINProductAssign", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSGS1GTINPRODUCTDEFAULT", "gS1GTINProductDefault", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSGS1GTINPRODUCTMODE", "gS1GTINProductMode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSHOURCOSTS", "hourcosts", "decimal", "number", "", "", "", "F", "F", "F" },
                    { "SYSLOCALE", "locale", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSMAXFAILEDLOGINS", "maxFailedLogins", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSMAXPASSWORDAGE", "maxpasswordage", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSMAXRECORDSAUTODISPLAY", "maxrecordsautodisplay", "int", "number", "", "", "", "F", "F", "F" },
                    { "SYSMESSENDERID", "mesSenderId", "int?", "number", "", "UserModel", "MesSenderIdUser", "F", "F", "F" },
                    { "SYSMONEYROUNDING", "moneyrounding", "double", "number", "", "", "", "F", "F", "F" },
                    { "SYSPASSWORDAGEWARN", "passwordAgeWarn", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSPASSWORDHISTORY", "passwordHistory", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSPASSWORDLENGTH", "passwordLength", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSPASSWORDRULES", "passwordRules", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSPASSWORDVERIFY", "passwordVerify", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSPASSWORDVERIFYONLY", "passwordVerifyOnly", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSPATAGEUSAGE", "patAgeUsage", "int?", "number", "PatientAgeUsage", "", "", "F", "F", "F" },
                    { "SYSPATGENDERUSAGE", "patGenderUsage", "int?", "number", "PatientGenderUsage", "", "", "F", "F", "F" },
                    { "SYSPIPAFTERSCANNERLOGOUT", "pipAfterScannerLogOut", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSPIPALLOWSEARCH", "pipAllowSearch", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSPIPLOGRETENTION", "pipLogRetention", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSPIPMAXSEARCHHITS", "pipMaxSearchHits", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSPRODSTOCKITEMMOVING", "prodstockitemmoving", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSPRODUCTDEFPRIGRKEYID", "productDefPriGrKeyId", "int?", "number", "", "PriceGroupModel", "ProductDefPriGr", "F", "F", "F" },
                    { "SYSPRODUCTPRICEMODE", "productPriceMode", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSREADONLY", "readonly", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSRESRVHIGHFREQUENCYCHECK", "resrvHighFrequencyCheck", "int", "number", "", "", "", "F", "F", "F" },
                    { "SYSRESRVLOWFREQUENCYCHECK", "resrvLowFrequencyCheck", "int", "number", "", "", "", "F", "F", "F" },
                    { "SYSSECCOMPOSITE", "seccomposite", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSSMSBODYSTRUCTURE", "sMSBodyStructure", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSSMSMOBILEPREFIX", "sMSMobilePrefix", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSSMSPASSWORD", "sMSPassword", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSSMSTOEMAIL", "sMSToEmail", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSSMSTYPE", "sMSType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSSMSURLSTRUCTURE", "sMSUrlStructure", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSSMSUSERNAME", "sMSUserName", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSSUBVERSION", "subVersion", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSUISTARTMODE", "uIStartMode", "int?", "number", "ScanUIStartMode", "", "", "F", "F", "F" },
                    { "SYSUPDORDONPREFLSTCHANGE", "updOrdOnPrefLstChange", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSUSECRITICALCOUNT", "usecriticalcount", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "SYSUSEEXTENDEDWEIGHTINFO", "useExtendedWeightInfo", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSVERIFYDOMAIN", "verifyDomain", "string", "string", "", "", "", "F", "F", "F" },
                    { "SYSVERSION", "version", "int?", "number", "", "", "", "F", "F", "F" },
                    { "SYSWASHTAGSPLITMODE", "washtagsplitmode", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSYSTEM",
                    "SystemModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SystemLogModel", stringComparison) || modelOrTableName.Equals("TSYSLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SLOGAPPTYPE", "apptype", "byte", "number", "", "", "", "F", "F", "F" },
                    { "SLOGLINKSTATID", "linkStatId", "string", "string", "", "", "", "F", "F", "F" },
                    { "SLOGTEXT", "text", "string", "string", "", "", "", "F", "F", "F" },
                    { "SLOGTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "SLOGTYPE", "type", "byte", "number", "", "", "", "F", "F", "F" },
                    { "SLOGWHAT", "what", "short", "number", "", "", "", "F", "F", "F" },
                    { "SLOGWHERE1", "where1", "string", "string", "", "", "", "F", "F", "F" },
                    { "SLOGWHERE2", "where2", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSYSLOG",
                    "SystemLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("SystemLogDataModel", stringComparison) || modelOrTableName.Equals("TSYSLOGDATA", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "SLDDATA", "data", "string", "string", "", "", "", "F", "F", "F" },
                    { "SLDTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TSYSLOGDATA",
                    "SystemLogDataModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TableInfoModel", stringComparison) || modelOrTableName.Equals("TTABLEINFO", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TBLINFKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "TBLINFAPPTYPE", "appType", "int", "number", "", "", "", "F", "F", "F" },
                    { "TBLINFDATA01", "data01", "string", "string", "", "", "", "F", "F", "F" },
                    { "TBLINFDATA02", "data02", "string", "string", "", "", "", "F", "F", "F" },
                    { "TBLINFDATA03", "data03", "string", "string", "", "", "", "F", "F", "F" },
                    { "TBLINFFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "TBLINFSUBIDENT", "subIdent", "string", "string", "", "", "", "F", "F", "F" },
                    { "TBLINFTABLENAME", "tableName", "string", "string", "", "", "", "F", "F", "F" },
                    { "TBLINFTYPE", "type", "int", "number", "TableInfoType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTABLEINFO",
                    "TableInfoModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TagContentModel", stringComparison) || modelOrTableName.Equals("TTAGCONTENT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TAGCAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "TAGCCHILDTAGSKEYID", "childTagsKeyId", "int?", "number", "", "TagsModel", "ChildTags", "F", "F", "F" },
                    { "TAGCCHPLKEYID", "chPlKeyId", "int?", "number", "", "ChamberPlacementsModel", "ChPl", "F", "F", "F" },
                    { "TAGCINDICINDICATOR", "indicIndicator", "int?", "number", "", "IndicatorModel", "IndicIndicatorIndicator", "F", "F", "F" },
                    { "TAGCLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "TAGCSPLITUNIT", "splitUnit", "int?", "number", "", "UnitModel", "SplitUnitUnit", "F", "F", "F" },
                    { "TAGCTAGSKEYID", "tagsKeyId", "int", "number", "", "TagsModel", "Tags", "F", "F", "F" },
                    { "TAGCTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "TAGCUNITUNIT", "unitUnit", "int?", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTAGCONTENT",
                    "TagContentModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TagContentHistoryModel", stringComparison) || modelOrTableName.Equals("TTAGCONHIST", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TAGCHAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "TAGCHCHILDTAGSKEYID", "childTagsKeyId", "int?", "number", "", "TagsModel", "ChildTags", "F", "F", "F" },
                    { "TAGCHENDLOCAKEYID", "endLocaKeyId", "int", "number", "", "LocationModel", "EndLoca", "F", "F", "F" },
                    { "TAGCHENDTIME", "endTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "TAGCHINDICINDICATOR", "indicIndicator", "int?", "number", "", "IndicatorModel", "IndicIndicatorIndicator", "F", "F", "F" },
                    { "TAGCHLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "TAGCHTAGSKEYID", "tagsKeyId", "int", "number", "", "TagsModel", "Tags", "F", "F", "F" },
                    { "TAGCHTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "TAGCHUNITUNIT", "unitUnit", "int?", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTAGCONHIST",
                    "TagContentHistoryModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TagLocationModel", stringComparison) || modelOrTableName.Equals("TTAGLOCA", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TLCALOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "TLCAREFPROCBATCH", "refProcBatch", "int?", "number", "", "ProcessModel", "RefProcBatchProcess", "F", "F", "F" },
                    { "TLCATAGSKEYID", "tagsKeyId", "int", "number", "", "TagsModel", "Tags", "F", "F", "F" },
                    { "TLCATIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "TLCAUSERKEYID", "userKeyId", "int", "number", "", "UserModel", "User", "F", "F", "F" },
                    { "TLCAWHAT", "what", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTAGLOCA",
                    "TagLocationModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TagProgramGroupLinkModel", stringComparison) || modelOrTableName.Equals("TTAGPROGGRPLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TAPGLAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "TAPGLFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "TAPGLPRGRKEYID", "pRGRKeyId", "int?", "number", "", "ProgramGroupModel", "PRGR", "F", "F", "F" },
                    { "TAPGLTAGSKEYID", "tagsKeyId", "int", "number", "", "TagsModel", "Tags", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTAGPROGGRPLINK",
                    "TagProgramGroupLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TagsModel", stringComparison) || modelOrTableName.Equals("TTAGS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TAGSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "TAGS_CREATED", "created", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "TAGS_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "TAGSAUTO", "auto", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "TAGSBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGSLOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "TAGSLOCATIME", "locaTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TAGSNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGSNO", "no", "int", "number", "", "", "", "F", "T", "F" },
                    { "TAGSPROCBATCH", "procBatch", "int?", "number", "", "ProcessModel", "ProcBatchProcess", "F", "F", "F" },
                    { "TAGSSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "TAGSSTOKKEYID", "stokKeyId", "int?", "number", "", "StocksModel", "Stok", "F", "F", "F" },
                    { "TAGSTAGTKEYID", "tagTKeyId", "int", "number", "", "TagTypeModel", "TagT", "F", "F", "F" },
                    { "TAGSTYPE", "type", "int", "number", "TagType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTAGS",
                    "TagsModel",
                    columnToPropertyMappings
                );
            }

            return result;

            #endregion Mappings
        }

        private static ModelToTableMapping CreateModelToTableMapping_08(string modelOrTableName)
        {
            StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase;

            ModelToTableMapping result = null;

            #region Mappings

            if (modelOrTableName.Equals("TagTypeModel", stringComparison) || modelOrTableName.Equals("TTAGTYPE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TAGTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "TAGT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TAGT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "TAGT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TAGT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "TAGTDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTHEIGHT", "height", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TAGTHEIGHTCAPACITY", "heightCapacity", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TAGTHOLDSITEMS", "holdsItems", "bool?", "boolean", "", "", "", "F", "F", "F" },
                    { "TAGTINTTGKEYID", "inTTGKeyId", "int?", "number", "", "IdenticalTagTypeGroupModel", "InTTG", "F", "F", "F" },
                    { "TAGTNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTSUPPKEYID", "suppKeyId", "int?", "number", "", "SupplierModel", "Supp", "F", "F", "F" },
                    { "TAGTSYSTYPE", "sysType", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "TAGTTYPE", "type", "int", "number", "TagType", "", "", "F", "T", "F" },
                    { "TAGTUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" },
                    { "TAGTWIDTH", "width", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TAGTWIDTHCAPACITY", "widthCapacity", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTAGTYPE",
                    "TagTypeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TextModel", stringComparison) || modelOrTableName.Equals("TTEXT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TEXTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "TEXT_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TEXT_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "TEXT_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TEXT_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "TEXTFLOATOPTION", "floatOption", "double?", "number", "", "", "", "F", "F", "F" },
                    { "TEXTMEMO", "memo", "string", "string", "", "", "", "F", "F", "F" },
                    { "TEXTNUMBER", "number", "int", "number", "", "", "", "F", "T", "F" },
                    { "TEXTOPTION", "option", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TEXTSYSOPTION", "sysOption", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TEXTTEXT", "text", "string", "string", "", "", "", "F", "F", "F" },
                    { "TEXTTYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTEXT",
                    "TextModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TextUserModel", stringComparison) || modelOrTableName.Equals("TTEXTUSER", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TXTU_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TXTU_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "TXTU_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TXTU_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "TXTUDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "TXTUHINT", "hint", "string", "string", "", "", "", "F", "F", "F" },
                    { "TXTUNUMBER", "number", "int", "number", "", "", "", "F", "F", "F" },
                    { "TXTUTEXT", "text", "string", "string", "", "", "", "F", "F", "F" },
                    { "TXTUTYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTEXTUSER",
                    "TextUserModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TimeRuleModel", stringComparison) || modelOrTableName.Equals("TTIMERULE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TTIMERULE",
                    "TimeRuleModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TimeRuleGroupModel", stringComparison) || modelOrTableName.Equals("TTIMERULEGROUP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TTIMERULEGROUP",
                    "TimeRuleGroupModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TimeRuleLinkModel", stringComparison) || modelOrTableName.Equals("TTIMERULELINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TTIMERULELINK",
                    "TimeRuleLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TransportModel", stringComparison) || modelOrTableName.Equals("TTRANSPORT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TRAENDLOCAKEYID", "endLocaKeyId", "int?", "number", "", "LocationModel", "EndLoca", "F", "F", "F" },
                    { "TRAENDREASON", "endReason", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TRAENDTIME", "endTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRAENDUSERKEYID", "endUserKeyId", "int?", "number", "", "UserModel", "EndUser", "F", "F", "F" },
                    { "TRASTARTLOCAKEYID", "startLocaKeyId", "int", "number", "", "LocationModel", "StartLoca", "F", "F", "F" },
                    { "TRASTARTTIME", "startTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "TRASTARTUSERKEYID", "startUserKeyId", "int", "number", "", "UserModel", "StartUser", "F", "F", "F" },
                    { "TRATRMKEYID", "trMKeyId", "int", "number", "", "TransportMethodModel", "TrM", "F", "F", "F" },
                    { "TRAUNIT", "unit", "int", "number", "", "UnitModel", "UnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTRANSPORT",
                    "TransportModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TransportMethodModel", stringComparison) || modelOrTableName.Equals("TTRANSPORTMETHOD", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TRMKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "TRM_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRM_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "TRM_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRM_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "TRMDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "TRMFIXEDTIME", "fixedTime", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TRMMETHOD", "method", "string", "string", "", "", "", "F", "T", "F" },
                    { "TRMNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "TRMRELATIVETIME", "relativeTime", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTRANSPORTMETHOD",
                    "TransportMethodModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TriggerModel", stringComparison) || modelOrTableName.Equals("TTRIGGER", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TRIGKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "TRIGACTIVITY", "activity", "int", "number", "TrigActivity", "", "", "F", "F", "F" },
                    { "TRIGDAYS", "days", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TRIGEXECUTIONBEHAVIOUR", "executionBehaviour", "int", "number", "TrigBehaviour", "", "", "F", "F", "F" },
                    { "TRIGEXECUTIONPHASE", "executionPhase", "int", "number", "TrigExecutionPhase", "", "", "F", "F", "F" },
                    { "TRIGINITIALDAYS", "initialDays", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TRIGLGRPKEYID", "lGrpKeyId", "int?", "number", "", "LocationGroupModel", "LGrp", "F", "F", "F" },
                    { "TRIGLIMIT", "limit", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TRIGMAXPOSTPONECOUNT", "maxPostponeCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TRIGMEDIASOURCE", "mediaSource", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TRIGNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "TRIGPICTSERIES", "pictSeries", "int?", "number", "", "TextModel", "PictSeriesText", "F", "F", "F" },
                    { "TRIGPOSTPONEABILITY", "postponeAbility", "int", "number", "TrigPostponeAbility", "", "", "F", "F", "F" },
                    { "TRIGPROFICIENCYLEVEL", "proficiencyLevel", "int", "number", "", "", "", "F", "F", "F" },
                    { "TRIGREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "TRIGRESTRICTED", "restricted", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "TRIGSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "TRIGTEXT", "text", "string", "string", "", "", "", "F", "F", "F" },
                    { "TRIGTRIGGER", "trigger", "string", "string", "", "", "", "F", "T", "F" },
                    { "TRIGTYPE", "type", "int?", "number", "TriggerType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTRIGGER",
                    "TriggerModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TriggerCounterModel", stringComparison) || modelOrTableName.Equals("TTRIGCOUNTER", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TRCAUTOINC", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "TRCLASTPASSEDCOUNT", "lastPassedCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TRCLASTPASSEDTIME", "lastPassedTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRCPOSTPONECOUNT", "postponeCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TRCPOSTPONETIME", "postponeTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRCPRODKEYID", "prodKeyId", "int?", "number", "", "ProductModel", "Prod", "F", "F", "F" },
                    { "TRCROUNDCOUNT", "roundCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TRCROUNDTIME", "roundTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRCSERIKEYID", "seriKeyId", "int?", "number", "", "SerialModel", "Seri", "F", "F", "F" },
                    { "TRCTRILNKAUTOINC", "triLnkAutoInc", "int", "number", "", "TriggerLinkModel", "TriLnkAutoIncTriggerLink", "F", "F", "F" },
                    { "TRCUNITUNIT", "unitUnit", "int?", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" },
                    { "TRCUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTRIGCOUNTER",
                    "TriggerCounterModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TriggerExcludeModel", stringComparison) || modelOrTableName.Equals("TTRIGEXCLUDE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TRIEX_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRIEX_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "TRIEXAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "TRIEXITEMKEYID", "itemKeyId", "int?", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "TRIEXPRODKEYID", "prodKeyId", "int?", "number", "", "ProductModel", "Prod", "F", "F", "F" },
                    { "TRIEXSERIKEYID", "seriKeyId", "int?", "number", "", "SerialModel", "Seri", "F", "F", "F" },
                    { "TRIEXTRILNKAUTOINC", "triLnkAutoInc", "int?", "number", "", "TriggerLinkModel", "TriLnkAutoIncTriggerLink", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTRIGEXCLUDE",
                    "TriggerExcludeModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TriggerLinkModel", stringComparison) || modelOrTableName.Equals("TTRIGLINK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TRILNK_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRILNK_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "TRILNK_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRILNK_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "TRILNKAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "TRILNKENABLED", "enabled", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "TRILNKITEMKEYID", "itemKeyId", "int?", "number", "", "ItemModel", "Item", "F", "F", "F" },
                    { "TRILNKMCTYPKEYID", "mcTypKeyId", "int?", "number", "", "MachineTypeModel", "McTyp", "F", "F", "F" },
                    { "TRILNKPRODKEYID", "prodKeyId", "int?", "number", "", "ProductModel", "Prod", "F", "F", "F" },
                    { "TRILNKSERIKEYID", "seriKeyId", "int?", "number", "", "SerialModel", "Seri", "F", "F", "F" },
                    { "TRILNKTRIGKEYID", "trigKeyId", "int", "number", "", "TriggerModel", "Trig", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTRIGLINK",
                    "TriggerLinkModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TriggerLogModel", stringComparison) || modelOrTableName.Equals("TTRIGLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TRLAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "TRLELEVATEDUSERKEYID", "elevatedUserKeyId", "int?", "number", "", "UserModel", "ElevatedUser", "F", "F", "F" },
                    { "TRLLASTPASSEDCOUNT", "lastPassedCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "TRLPLOKEYID", "ploKeyId", "int", "number", "", "PosLocationModel", "Plo", "F", "F", "F" },
                    { "TRLPROCBATCH", "procBatch", "int?", "number", "", "ProcessModel", "ProcBatchProcess", "F", "F", "F" },
                    { "TRLPRODKEYID", "prodKeyId", "int?", "number", "", "ProductModel", "Prod", "F", "F", "F" },
                    { "TRLRESULT", "result", "int", "number", "TriggerResult", "", "", "F", "F", "F" },
                    { "TRLSERIKEYID", "seriKeyId", "int?", "number", "", "SerialModel", "Seri", "F", "F", "F" },
                    { "TRLTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "TRLTRILNKAUTOINC", "triLnkAutoInc", "int?", "number", "", "TriggerLinkModel", "TriLnkAutoIncTriggerLink", "F", "F", "F" },
                    { "TRLUNITUNIT", "unitUnit", "int?", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" },
                    { "TRLUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTRIGLOG",
                    "TriggerLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TruckModel", stringComparison) || modelOrTableName.Equals("TTRUCK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TRKKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "TRK_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRK_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "TRK_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRK_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "TRKCALKEYID", "calKeyId", "int?", "number", "", "CalendarModel", "Cal", "F", "F", "F" },
                    { "TRKDESC", "desc", "string", "string", "", "", "", "F", "F", "F" },
                    { "TRKNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "TRKTYPE", "type", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TTRUCK",
                    "TruckModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("TruckStopModel", stringComparison) || modelOrTableName.Equals("TTRUCKSTOP", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "TRKSKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "TRKS_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRKS_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "TRKS_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "TRKS_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "TRKSCUSITEKEYID", "cuSiteKeyId", "int?", "number", "", "CustSiteModel", "CuSite", "F", "F", "F" },
                    { "TRKSCUSTKEYID", "custKeyId", "int?", "number", "", "CustomerModel", "Cust", "F", "F", "F" },
                    { "TRKSDESC", "desc", "string", "string", "", "", "", "F", "F", "F" },
                    { "TRKSFACKEYID", "facKeyId", "int?", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "TRKSNAME", "name", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TTRUCKSTOP",
                    "TruckStopModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UIGuideDefModel", stringComparison) || modelOrTableName.Equals("TUIGUIDEDEF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TUIGUIDEDEF",
                    "UIGuideDefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UILayerDefModel", stringComparison) || modelOrTableName.Equals("TUILAYERDEF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "UILDKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "UILD_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UILD_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "UILD_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UILD_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "UILDCLASSNAME", "classname", "string", "string", "", "", "", "F", "F", "F" },
                    { "UILDDEFAULT", "default", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "UILDDEFSYS", "defSys", "string", "string", "", "", "", "F", "F", "F" },
                    { "UILDDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "UILDENABLED", "enabled", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "UILDNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "UILDSYSID", "sysId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UILDSYSTYPE", "sysType", "int", "number", "", "", "", "F", "F", "F" },
                    { "UILDVCLDEFSYS", "vCLDefSys", "string", "string", "", "", "", "F", "F", "F" },
                    { "UILDVERSION", "version", "int", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUILAYERDEF",
                    "UILayerDefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UISearchDefModel", stringComparison) || modelOrTableName.Equals("TUISEARCHDEF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TUISEARCHDEF",
                    "UISearchDefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UnitModel", stringComparison) || modelOrTableName.Equals("TUNIT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "UNITUNIT", "keyId", "int", "number", "", "", "", "T", "T", "F" },
                    { "UNITBASKET", "basket", "int?", "number", "", "TagsModel", "BasketTags", "F", "F", "F" },
                    { "UNITBATCH", "batch", "int?", "number", "", "ProcessModel", "BatchProcess", "F", "F", "F" },
                    { "UNITCREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UNITCUSTKEYID", "custKeyId", "int?", "number", "", "CustomerModel", "Cust", "F", "F", "F" },
                    { "UNITERROR", "error", "int", "number", "", "TextModel", "ErrorText", "F", "F", "F" },
                    { "UNITEXPIRE", "expire", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UNITFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "UNITLOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "UNITLOCATIME", "locaTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UNITNEXTUNIT", "nextUnit", "int?", "number", "", "UnitModel", "NextUnitUnit", "F", "F", "F" },
                    { "UNITOPDKEYID", "opDKeyId", "int?", "number", "", "OperationDataModel", "OpD", "F", "F", "F" },
                    { "UNITPACKUSERKEYID", "packUserKeyId", "int?", "number", "", "UserModel", "PackUser", "F", "F", "F" },
                    { "UNITPREVUNIT", "prevUnit", "int?", "number", "", "UnitModel", "PrevUnitUnit", "F", "F", "F" },
                    { "UNITPRODKEYID", "prodKeyId", "int", "number", "", "ProductModel", "Prod", "F", "F", "F" },
                    { "UNITREQRETURNREG", "reqReturnReg", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "UNITROOMKEYID", "roomKeyId", "int?", "number", "", "RoomModel", "Room", "F", "F", "F" },
                    { "UNITSERIKEYID", "seriKeyId", "int?", "number", "", "SerialModel", "Seri", "F", "F", "F" },
                    { "UNITSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "UNITSTOKKEYID", "stokKeyId", "int?", "number", "", "StocksModel", "Stok", "F", "F", "F" },
                    { "UNITUSAGECOUNTER", "usageCounter", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UNITWORKINGTIME", "workingTime", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUNIT",
                    "UnitModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UnitFastTrackModel", stringComparison) || modelOrTableName.Equals("TUNITFASTTRACK", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "UFTAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "UFTCREATED", "created", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "UFTCREATORCUSTKEYID", "creatorCustKeyId", "int?", "number", "", "CustomerModel", "CreatorCust", "F", "F", "F" },
                    { "UFTCREATORFACKEYID", "creatorFacKeyId", "int?", "number", "", "FactoryModel", "CreatorFac", "F", "F", "F" },
                    { "UFTCREATORLOCAKEYID", "creatorLocaKeyId", "int", "number", "", "LocationModel", "CreatorLoca", "F", "F", "F" },
                    { "UFTCREATORTYPE", "creatorType", "int?", "number", "FastTrackCreatorType", "", "", "F", "F", "F" },
                    { "UFTCREATORUSERKEYID", "creatorUserKeyId", "int?", "number", "", "UserModel", "CreatorUser", "F", "F", "F" },
                    { "UFTENDTIME", "endTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UFTENDTYPE", "endType", "int?", "number", "FastTrackEndType", "", "", "F", "F", "F" },
                    { "UFTENDUSERKEYID", "endUserKeyId", "int?", "number", "", "UserModel", "EndUser", "F", "F", "F" },
                    { "UFTFTCOKEYID", "fTCoKeyId", "int?", "number", "", "FastTrackCodeModel", "FTCo", "F", "F", "F" },
                    { "UFTFTPLKEYID", "fTPlKeyId", "int?", "number", "", "FastTrackPlanModel", "FTPl", "F", "F", "F" },
                    { "UFTFTRUKEYID", "fTRuKeyId", "int?", "number", "", "FastTrackRulesModel", "FTRu", "F", "F", "F" },
                    { "UFTINVOICECUSTKEYID", "invoiceCustKeyId", "int?", "number", "", "CustomerModel", "InvoiceCust", "F", "F", "F" },
                    { "UFTINVOICEDONE", "invoiceDone", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "UFTINVOICEFACKEYID", "invoiceFacKeyId", "int?", "number", "", "FactoryModel", "InvoiceFac", "F", "F", "F" },
                    { "UFTINVOICEITEMKEYID", "invoiceItemKeyId", "int?", "number", "", "ItemModel", "InvoiceItem", "F", "F", "F" },
                    { "UFTINVOICEPRICE", "invoicePrice", "decimal?", "number", "", "", "", "F", "F", "F" },
                    { "UFTINVOICEWITHUNIT", "invoicewithunit", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "UFTLASTUNITLOCAKEYID", "lastUnitLocaKeyId", "int?", "number", "", "LocationModel", "LastUnitLoca", "F", "F", "F" },
                    { "UFTLASTUNITSTATUS", "lastUnitStatus", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UFTNEXTPLANCHECKTIME", "nextPlanCheckTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UFTPREVUNIT", "prevUnit", "int?", "number", "", "UnitModel", "PrevUnitUnit", "F", "F", "F" },
                    { "UFTSTARTTIME", "startTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UFTSTATUS", "status", "int", "number", "FastTrackStatus", "", "", "F", "F", "F" },
                    { "UFTUNITUNIT", "unitUnit", "int?", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUNITFASTTRACK",
                    "UnitFastTrackModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UnitFastTrackInvoiceModel", stringComparison) || modelOrTableName.Equals("TUNITFASTTRACKINV", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "UFTINAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "UFTININVOICEITEMKEYID", "invoiceItemKeyId", "int", "number", "", "ItemModel", "InvoiceItem", "F", "F", "F" },
                    { "UFTININVOICEPRICE", "invoicePrice", "decimal", "number", "", "", "", "F", "F", "F" },
                    { "UFTINISRETURN", "isReturn", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "UFTINORGCUSTKEYID", "orgCustKeyId", "int?", "number", "", "CustomerModel", "OrgCust", "F", "F", "F" },
                    { "UFTINORGFACKEYID", "orgFacKeyId", "int?", "number", "", "FactoryModel", "OrgFac", "F", "F", "F" },
                    { "UFTINSUPPFACKEYID", "suppFacKeyId", "int", "number", "", "FactoryModel", "SuppFac", "F", "F", "F" },
                    { "UFTINTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "UFTINUFTAUTOINC", "uftAutoInc", "int", "number", "", "UnitFastTrackModel", "UftAutoIncUnitFastTrack", "F", "F", "F" },
                    { "UFTINUNITUNIT", "unitUnit", "int", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUNITFASTTRACKINV",
                    "UnitFastTrackInvoiceModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UnitFastTrackPlanModel", stringComparison) || modelOrTableName.Equals("TUNITFASTTRACKPLAN", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "UFTPLAUTOINC", "autoInc", "int", "number", "", "", "", "F", "F", "F" },
                    { "UFTPLENDLOCAKEYID", "endLocaKeyId", "int?", "number", "", "LocationModel", "EndLoca", "F", "F", "F" },
                    { "UFTPLENDTIME", "endTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UFTPLFTPLKEYID", "ftPlKeyId", "int", "number", "", "FastTrackPlanModel", "FtPl", "F", "F", "F" },
                    { "UFTPLSTARTLOCAKEYID", "startLocaKeyId", "int?", "number", "", "LocationModel", "StartLoca", "F", "F", "F" },
                    { "UFTPLSTARTTIME", "startTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UFTPLUFTAUTOINC", "uFTAutoInc", "int", "number", "", "UnitFastTrackModel", "UFTAutoIncUnitFastTrack", "F", "F", "F" },
                    { "UFTPLUNITUNIT", "unitUnit", "int", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUNITFASTTRACKPLAN",
                    "UnitFastTrackPlanModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UnitListModel", stringComparison) || modelOrTableName.Equals("TUNITLST", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ULSTKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "ULSTCOUNT", "count", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ULSTCPDKEYID", "cpdKeyId", "int?", "number", "", "CountingPointDataModel", "Cpd", "F", "F", "F" },
                    { "ULSTCRITICALCOUNT", "criticalCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ULSTINTERNALPOSITION", "internalPosition", "int", "number", "", "", "", "F", "F", "F" },
                    { "ULSTLOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "ULSTPARENTKEYID", "parentKeyId", "int?", "number", "", "UnitListModel", "Parent", "F", "F", "F" },
                    { "ULSTPLACEMENT", "placement", "int?", "number", "", "TextModel", "PlacementText", "F", "F", "F" },
                    { "ULSTPLOKEYID", "ploKeyId", "int?", "number", "", "PosLocationModel", "Plo", "F", "F", "F" },
                    { "ULSTPOSITION", "position", "int", "number", "", "", "", "F", "F", "F" },
                    { "ULSTREFALTITEMKEYID", "refAltItemKeyId", "int?", "number", "", "ItemModel", "RefAltItem", "F", "F", "F" },
                    { "ULSTREFITEMKEYID", "refItemKeyId", "int?", "number", "", "ItemModel", "RefItem", "F", "F", "F" },
                    { "ULSTREFSERIKEYID", "refSeriKeyId", "int?", "number", "", "SerialModel", "RefSeri", "F", "F", "F" },
                    { "ULSTREPAIRCOUNT", "repairCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ULSTSERIALTYPE", "serialType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ULSTSTDCOUNT", "stdCount", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ULSTSUBSTITUTIONREASON", "substitutionReason", "int?", "number", "SubstitutionReason", "", "", "F", "F", "F" },
                    { "ULSTUNIT", "unit", "int", "number", "", "UnitModel", "UnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUNITLST",
                    "UnitListModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UnitLocationModel", stringComparison) || modelOrTableName.Equals("TUNITLCA", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ULCACOMMENT", "comment", "string", "string", "", "", "", "F", "F", "F" },
                    { "ULCAERROR", "error", "int?", "number", "", "TextModel", "ErrorText", "F", "F", "F" },
                    { "ULCAEXTRA", "extra", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ULCALOCATIONKEYID", "locationKeyId", "int", "number", "", "LocationModel", "Location", "F", "F", "F" },
                    { "ULCAPLOKEYID", "ploKeyId", "int?", "number", "", "PosLocationModel", "Plo", "F", "F", "F" },
                    { "ULCAREFCUSTKEYID", "refCustKeyId", "int?", "number", "", "CustomerModel", "RefCust", "F", "F", "F" },
                    { "ULCAREFKEYID", "refKeyId", "int", "number", "", "StocksModel", "RefStocks", "F", "F", "F" },
                    { "ULCAREFOPDKEYID", "refOpdKeyId", "int?", "number", "", "OperationDataModel", "RefOpd", "F", "F", "F" },
                    { "ULCAREFORDKEYID", "refOrdKeyId", "int?", "number", "", "OrderModel", "RefOrd", "F", "F", "F" },
                    { "ULCAREFPROCBATCH", "refProcBatch", "int?", "number", "", "ProcessModel", "RefProcBatchProcess", "F", "F", "F" },
                    { "ULCAREFRPAKEYID", "refRpaKeyId", "int?", "number", "", "RepairModel", "RefRpa", "F", "F", "F" },
                    { "ULCAREFTYPE", "refType", "int", "number", "TableTypes", "", "", "F", "F", "F" },
                    { "ULCATIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "ULCAUSERKEYID", "userKeyId", "int", "number", "", "UserModel", "User", "F", "F", "F" },
                    { "ULCAWHAT", "what", "int", "number", "WhatType", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUNITLCA",
                    "UnitLocationModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UnitLotInfoModel", stringComparison) || modelOrTableName.Equals("TUNITLOTINFO", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "ULOTIN_CREATED", "created", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "ULOTIN_CREATEDKEYID", "createdKeyId", "int", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "ULOTINLOCAKEYID", "locaKeyId", "int", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "ULOTINLOTINKEYID", "lotInKeyId", "int", "number", "", "LotInfoModel", "LotIn", "F", "F", "F" },
                    { "ULOTINULSTPOSITION", "ulstPosition", "int?", "number", "", "", "", "F", "F", "F" },
                    { "ULOTINUNITUNIT", "unitUnit", "int", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUNITLOTINFO",
                    "UnitLotInfoModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UnitTaTModel", stringComparison) || modelOrTableName.Equals("TUNITTAT", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "UTATACTDAYS", "actDays", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATACTHOURS", "actHours", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATACTMINUTES", "actMinutes", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATACTSECONDS", "actSeconds", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATACTTIME", "actTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UTATACTTOTALSECS", "actTotalSecs", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATDAYS", "days", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATENDTIME", "endTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "UTATHOURS", "hours", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATMINUTES", "minutes", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATREPAIRTIME", "repairTime", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UTATREPDAYS", "repDays", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATREPHOURS", "repHours", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATREPMINUTES", "repMinutes", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATREPSECONDS", "repSeconds", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATREPTOTALSECS", "repTotalSecs", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATSECONDS", "seconds", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATSTARTTIME", "startTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "UTATTIME", "time", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UTATTOTALSECS", "totalSecs", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTATUNITUNIT", "unitUnit", "int", "number", "", "UnitModel", "UnitUnitUnit", "F", "F", "F" },
                    { "UTATUTDEFKEYID", "utDefKeyId", "int", "number", "", "UnitTaTDefModel", "UtDef", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUNITTAT",
                    "UnitTaTModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UnitTaTDefModel", stringComparison) || modelOrTableName.Equals("TUNITTATDEF", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "UTDEFKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "UTDEF_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UTDEF_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "UTDEF_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UTDEF_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "UTDEFDISPLAYNO", "displayNo", "int", "number", "", "", "", "F", "F", "F" },
                    { "UTDEFFROMLGRPKEYID", "fromLGrpKeyId", "int?", "number", "", "LocationGroupModel", "FromLGrp", "F", "F", "F" },
                    { "UTDEFFROMLOCAKEYID", "fromLocaKeyId", "int?", "number", "", "LocationModel", "FromLoca", "F", "F", "F" },
                    { "UTDEFFROMSTATUS", "fromStatus", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTDEFINCLUDEREPAIR", "includeRepair", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "UTDEFLASTDATAUPDATE", "lastDataUpdate", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UTDEFNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "UTDEFREMARK", "remark", "string", "string", "", "", "", "F", "F", "F" },
                    { "UTDEFSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "UTDEFTARGET", "target", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTDEFTOLGRPKEYID", "toLGrpKeyId", "int?", "number", "", "LocationGroupModel", "ToLGrp", "F", "F", "F" },
                    { "UTDEFTOLOCAKEYID", "toLocaKeyId", "int?", "number", "", "LocationModel", "ToLoca", "F", "F", "F" },
                    { "UTDEFTOSTATUS", "toStatus", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UTDEFUPDATEALLDATA", "updateAllData", "bool", "boolean", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUNITTATDEF",
                    "UnitTaTDefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UnitWeightInfoModel", stringComparison) || modelOrTableName.Equals("TUNITWEIGHTINFO", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "UWEIEXPPACKDISPOSABLE", "expPackDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIEXPPACKNONDISPOSABLE", "expPackNonDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIEXPPACKWEIGHT", "expPackWeight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIEXPPRODDISPOSABLE", "expProdDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIEXPPRODNONDISPOSABLE", "expProdNonDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIEXPPRODWEIGHT", "expProdWeight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIEXPTOTALWEIGHT", "expTotalWeight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIPACKDISPOSABLE", "packDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIPACKNONDISPOSABLE", "packNonDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIPACKWEIGHT", "packWeight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIPRODDELTAUNIT", "prodDeltaUnit", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIPRODDELTAVALUE", "prodDeltaValue", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIPRODDISPOSABLE", "prodDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIPRODNONDISPOSABLE", "prodNonDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIPRODWEIGHT", "prodWeight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEITOTALWEIGHT", "totalWeight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEIUNITUNIT", "unitUnit", "int", "number", "", "UnitModel", "UweIUnitUnit", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUNITWEIGHTINFO",
                    "UnitWeightInfoModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UnitWeightRegModel", stringComparison) || modelOrTableName.Equals("TUNITWEIGHTREG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "UWERDELTAUNIT", "deltaUnit", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWERDELTAVALUE", "deltaValue", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEREXPPACKDISPOSABLE", "expPackDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEREXPPACKNONDISPOSABLE", "expPackNonDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEREXPPACKWEIGHT", "expPackWeight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEREXPPRODDISPOSABLE", "expProdDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEREXPPRODNONDISPOSABLE", "expProdNonDisposable", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEREXPPRODWEIGHT", "expProdWeight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWEREXPTOTALWEIGHT", "expTotalWeight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWERHASPACKDISPOSABLE", "hasPackDisposable", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "UWERHASPACKNONDISPOSABLE", "hasPackNonDisposable", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "UWERHASPRODDISPOSABLE", "hasProdDisposable", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "UWERHASPRODNONDISPOSABLE", "hasProdNonDisposable", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "UWERLOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "UweRLoca", "F", "F", "F" },
                    { "UWERPLOKEYID", "pLoKeyId", "int?", "number", "", "PosLocationModel", "PLo", "F", "F", "F" },
                    { "UWERRESULT", "result", "int?", "number", "WeightRegistrationResult", "", "", "F", "F", "F" },
                    { "UWERTIME", "time", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "UWERUNITUNIT", "unitUnit", "int", "number", "", "UnitModel", "UweRUnitUnit", "F", "F", "F" },
                    { "UWERUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "UweRUser", "F", "F", "F" },
                    { "UWERWEIGHT", "weight", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UWERWHAT", "what", "int", "number", "", "", "", "F", "F", "F" },
                    { "UWERWPLANKEYID", "wPlanKeyId", "int?", "number", "", "WeightPlanModel", "WPlan", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUNITWEIGHTREG",
                    "UnitWeightRegModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UpgradeLogModel", stringComparison) || modelOrTableName.Equals("TUPGLOG", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "UPGLKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "UPGLLASTBATCH", "lastbatch", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UPGLLASTORDKEYID", "lastordKeyId", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UPGLLASTUNIT", "lastunit", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UPGLOLDSUBVERSION", "oldsubversion", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UPGLOLDVERSION", "oldversion", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UPGLSQL", "sql", "string", "string", "", "", "", "F", "F", "F" },
                    { "UPGLSUBVERSION", "subversion", "int?", "number", "", "", "", "F", "F", "F" },
                    { "UPGLTIME", "time", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UPGLVERSION", "version", "int?", "number", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUPGLOG",
                    "UpgradeLogModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UserModel", stringComparison) || modelOrTableName.Equals("TUSER", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "USERKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "USER_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "USER_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "USER_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "USER_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "USERBARCODE", "barcode", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERCHANGEPASSWORD", "changePassword", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "USEREMAIL", "email", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERFACKEYID", "facKeyId", "int", "number", "", "FactoryModel", "Fac", "F", "F", "F" },
                    { "USERFAILEDLOGINS", "failedLogins", "int?", "number", "", "", "", "F", "F", "F" },
                    { "USERINITIALS", "initials", "string", "string", "", "", "", "F", "T", "F" },
                    { "USERMOBILENUMBER", "mobileNumber", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERPASSWORD", "password", "string", "string", "", "", "", "F", "F", "T" },
                    { "USERPASSWORDCHANGED", "passwordChanged", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "USERPASSWORDHISTORY", "passwordHistory", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERPROFILEKEYID", "profileKeyId", "int", "number", "", "ProfileModel", "Profile", "F", "F", "F" },
                    { "USERSTATUS", "status", "int", "number", "", "", "", "F", "F", "F" },
                    { "USERUF01", "userField01", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF02", "userField02", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF03", "userField03", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF04", "userField04", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF05", "userField05", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF06", "userField06", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF07", "userField07", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF08", "userField08", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF09", "userField09", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF10", "userField10", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF11", "userField11", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF12", "userField12", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF13", "userField13", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF14", "userField14", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF15", "userField15", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF16", "userField16", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF17", "userField17", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF18", "userField18", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF19", "userField19", "string", "string", "", "", "", "F", "F", "F" },
                    { "USERUF20", "userField20", "string", "string", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUSER",
                    "UserModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UserFieldDefModel", stringComparison) || modelOrTableName.Equals("TUSERFIELDDEFINITION", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                };

                result = new ModelToTableMapping(
                    "TUSERFIELDDEFINITION",
                    "UserFieldDefModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UserGroupMembersModel", stringComparison) || modelOrTableName.Equals("TUSERGROUPMEMBERS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "UGRMUGRPKEYID", "uGrpKeyId", "int", "number", "", "UserGroupsModel", "UGrp", "F", "F", "F" },
                    { "UGRMUSERKEYID", "userKeyId", "int?", "number", "", "UserModel", "User", "F", "F", "F" },
                    { "UGRMUSERPROFILEKEYID", "userProfileKeyId", "int?", "number", "", "ProfileModel", "UserProfile", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TUSERGROUPMEMBERS",
                    "UserGroupMembersModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("UserGroupsModel", stringComparison) || modelOrTableName.Equals("TUSERGROUPS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "UGRPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "UGRP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UGRP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "UGRP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "UGRP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "UGRPNAME", "name", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TUSERGROUPS",
                    "UserGroupsModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("WeightPlanModel", stringComparison) || modelOrTableName.Equals("TWEIGHTPLAN", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "WPLANKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "WPLAN_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "WPLAN_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "WPLAN_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "WPLAN_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "WPLANDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "WPLANNAME", "name", "string", "string", "", "", "", "F", "F", "F" },
                    { "WPLANWEIGHTPLAN", "weightPlan", "string", "string", "", "", "", "F", "T", "F" }
                };

                result = new ModelToTableMapping(
                    "TWEIGHTPLAN",
                    "WeightPlanModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("WeightPlanEntriesModel", stringComparison) || modelOrTableName.Equals("TWEIGHTPLANENTRIES", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "WPLAEKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "WPLAEDELTAUNIT", "deltaUnit", "int?", "number", "", "", "", "F", "F", "F" },
                    { "WPLAEDELTAVALUE", "deltaValue", "int?", "number", "", "", "", "F", "F", "F" },
                    { "WPLAEHASPACKDISPOSABLE", "hasPackDisposable", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "WPLAEHASPACKNONDISPOSABLE", "hasPackNonDisposable", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "WPLAEHASPRODDISPOSABLE", "hasProdDisposable", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "WPLAEHASPRODNONDISPOSABLE", "hasProdNonDisposable", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "WPLAELOCAKEYID", "locaKeyId", "int?", "number", "", "LocationModel", "Loca", "F", "F", "F" },
                    { "WPLAELOCASUBTYPE", "locaSubType", "int?", "number", "", "", "", "F", "F", "F" },
                    { "WPLAEREQUIRED", "required", "int?", "number", "", "", "", "F", "F", "F" },
                    { "WPLAEUSESERIALWEIGHT", "useSerialWeight", "bool", "boolean", "", "", "", "F", "F", "F" },
                    { "WPLAEVALIDATEWHAT", "validateWhat", "int?", "number", "", "", "", "F", "F", "F" },
                    { "WPLAEVALIDATION", "validation", "int?", "number", "", "", "", "F", "F", "F" },
                    { "WPLAEWHAT", "what", "int?", "number", "", "", "", "F", "F", "F" },
                    { "WPLAEWPLANKEYID", "wPlanKeyId", "int", "number", "", "WeightPlanModel", "WPlan", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TWEIGHTPLANENTRIES",
                    "WeightPlanEntriesModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("WeightValidationOverrideModel", stringComparison) || modelOrTableName.Equals("TWEIGHTVALOVERRIDE", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "WVOUSERKEYID", "userKeyId", "int", "number", "", "UserModel", "User", "F", "F", "F" },
                    { "WVOWPLANKEYID", "wplanKeyId", "int", "number", "", "WeightPlanModel", "Wplan", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TWEIGHTVALOVERRIDE",
                    "WeightValidationOverrideModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("WorkHoursModel", stringComparison) || modelOrTableName.Equals("TWORKHOURS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "WKHKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "WKH_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "WKH_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "WKH_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "WKH_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "WKHCALKEYID", "calKeyId", "int", "number", "", "CalendarModel", "Cal", "F", "F", "F" },
                    { "WKHDAYOFWEEK", "dayOfWeek", "int", "number", "", "", "", "F", "F", "F" },
                    { "WKHENDTIME", "endTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "WKHSTARTTIME", "startTime", "DateTime", "Date", "", "", "", "F", "F", "F" },
                    { "WKHWKPKEYID", "wkpKeyId", "int", "number", "", "WorkPeriodsModel", "Wkp", "F", "F", "F" },
                    { "WKHWORKDAY", "workday", "bool", "boolean", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TWORKHOURS",
                    "WorkHoursModel",
                    columnToPropertyMappings
                );
            }
            else if (modelOrTableName.Equals("WorkPeriodsModel", stringComparison) || modelOrTableName.Equals("TWORKPERIODS", stringComparison))
            {
                string[,] columnToPropertyMappings = new string[,]
                {
                    { "WKPKEYID", "keyId", "int", "number", "", "", "", "T", "F", "F" },
                    { "WKP_CREATED", "created", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "WKP_CREATEDKEYID", "createdKeyId", "int?", "number", "", "UserModel", "CreatedUser", "F", "F", "F" },
                    { "WKP_MODIFIED", "modified", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "WKP_MODIFIEDKEYID", "modifiedKeyId", "int?", "number", "", "UserModel", "ModifiedUser", "F", "F", "F" },
                    { "WKPCALKEYID", "calKeyId", "int", "number", "", "CalendarModel", "Cal", "F", "F", "F" },
                    { "WKPDESCR", "descr", "string", "string", "", "", "", "F", "F", "F" },
                    { "WKPENDDATE", "endDate", "DateTime?", "Date", "", "", "", "F", "F", "F" },
                    { "WKPNAME", "name", "string", "string", "", "", "", "F", "T", "F" },
                    { "WKPPERIODTYPE", "periodType", "int", "number", "", "", "", "F", "F", "F" },
                    { "WKPRECURRENCE", "recurrence", "string", "string", "", "", "", "F", "F", "F" },
                    { "WKPSTARTDATE", "startDate", "DateTime", "Date", "", "", "", "F", "F", "F" }
                };

                result = new ModelToTableMapping(
                    "TWORKPERIODS",
                    "WorkPeriodsModel",
                    columnToPropertyMappings
                );
            }
            else
            {
                throw new Exception($"Uncared case for table \"{modelOrTableName}\".");
            }
            #endregion Mappings

            return result;
        }
    }
}