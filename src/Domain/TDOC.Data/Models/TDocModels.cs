using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

// This file contains all relevant models mapping to the T-DOC database.
// This file was generated by a tool. Only edit for local testing purposes.
namespace TDOC.Data.Models
{
    /// <summary>
    /// Model representing the TAGS table.
    /// AGS = Air glide system or Load Queue
    /// This table holds the different Load Queue systems
    /// The Machine refers to this table if it is a member
    /// </summary>
    [Table("TAGS")]
    public class AGSModel
    {
        /// <summary>
        /// <para>TAGS.AGSKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("AGSKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TAGS.AGS_CREATED</para>
        /// </summary>
        [Column("AGS_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TAGS.AGS_CREATEDKEYID</para>
        /// </summary>
        [Column("AGS_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TAGS.AGS_MODIFIED</para>
        /// </summary>
        [Column("AGS_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TAGS.AGS_MODIFIEDKEYID</para>
        /// </summary>
        [Column("AGS_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TAGS.AGSBARCODE</para>
        /// </summary>
        [Column("AGSBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TAGS.AGSINFO</para>
        /// Holds additional descriptions and remarks about the load queue.
        /// </summary>
        [Column("AGSINFO")]
        public string Info { get; set; }

        /// <summary>
        /// <para>TAGS.AGSMASTERQUEUEKEYID</para>
        /// Used when multiple queues serves the same machines, e.g. machine 1, 2 and 3 are served by both queue A and B. In this case all machines are assigned to queue A, and this field is set on queue B (to the keyID of queue A).
        /// </summary>
        [Column("AGSMASTERQUEUEKEYID")]
        public int? MasterQueueKeyId { get; set; }

        /// <summary>
        /// <para>TAGS.AGSMAXLOADS</para>
        /// Maximum number of loads that this load queue can contain
        /// </summary>
        [Column("AGSMAXLOADS")]
        public int? Maxloads { get; set; }

        /// <summary>
        /// <para>TAGS.AGSNAME</para>
        /// The number/identifier of the load queue.
        /// </summary>
        [Column("AGSNAME")]
        [Required, MaxLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TAGS.AGSREFNUM</para>
        /// If filled this number is referencing the number of the AGS system in the TDOC.INI file.
        ///
        /// Only AGS systems that T-DOC can actually communicate with have to be present in the TDOC.INI file.
        /// </summary>
        [Column("AGSREFNUM")]
        public int? RefNum { get; set; }

        /// <summary>
        /// <para>TAGS.AGSTEXT</para>
        /// The name of the load queue.
        /// </summary>
        [Column("AGSTEXT")]
        [MaxLength(80)]
        public string Text { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TAGS.AGS_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a AGSModel instance.
        /// <para />
        /// Foreign key: MasterQueueKeyId -> AGSModel.KeyId (TAGS.AGSMASTERQUEUEKEYID -> TAGS.AGSKEYID)
        /// </summary>
        [ForeignKey(nameof(MasterQueueKeyId))]
        public AGSModel MasterQueue { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TAGS.AGS_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TBATCH table.
    /// This table provides the link between units (TUNIT) and batches (TPROCESS).
    /// </summary>
    [Table("TBATCH")]
    public class BatchModel
    {
        /// <summary>
        /// <para>TBATCH.BATBATCH</para>
        /// A link to PROCBATCH in TPROCESS
        /// </summary>
        [Column("BATBATCH")]
        [Required]
        public int Batch { get; set; }

        /// <summary>
        /// <para>TBATCH.BATCHPLKEYID</para>
        /// KeyID of the chamber placement in the machine used for the unit.
        /// </summary>
        [Column("BATCHPLKEYID")]
        public int? ChPlKeyId { get; set; }

        /// <summary>
        /// <para>TBATCH.BATSTATUS</para>
        /// This field indicated the batch approval state of the unit.
        ///
        /// The field can assume one of the following values:
        /// OK (0) = Batch approved
        /// BatchFailed (1) = Batch disapproved
        /// UnitFailed (2) = Batch approved, but unit disapproved****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   OK          = 0
        ///   BatchFailed = 1
        ///   UnitFailed  = 2
        /// ********************************************************************************
        /// </summary>
        [Column("BATSTATUS")]
        public BatchUnitStatus? Status { get; set; }

        /// <summary>
        /// <para>TBATCH.BATTYPE</para>
        /// The type of batch the batch is to the unit. Valid values are defined in
        /// TDConst.pas and are currently:
        ///
        ///   btPrimarySteri  =   0
        ///   btFlashSteri    =  10
        ///   btPreWash       = 100
        ///   btExtraWash     = 110
        ///   btPostWash      = 190
        /// </summary>
        [Column("BATTYPE")]
        [Required]
        public int Type { get; set; }

        /// <summary>
        /// <para>TBATCH.BATUNIT</para>
        /// A link to UNITUNIT in TUNIT
        /// </summary>
        [Column("BATUNIT")]
        [Required]
        public int Unit { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a ProcessModel instance.
        /// <para />
        /// Foreign key: Batch -> ProcessModel.KeyId (TBATCH.BATBATCH -> TPROCESS.PROCBATCH)
        /// </summary>
        [ForeignKey(nameof(Batch))]
        public ProcessModel BatchProcess { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: Unit -> UnitModel.KeyId (TBATCH.BATUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(Unit))]
        public UnitModel UnitUnit { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TCOMP table.
    /// Holds the definition of composite items.
    ///
    /// NOTE: When printing lists you can insert &quot;blank&quot; lines by inserting an item with ITEMITEM=. and ITEMTEXT=.
    /// </summary>
    [Table("TCOMP")]
    public class CompositeModel
    {
        /// <summary>
        /// <para>TCOMP.COMPKEY</para>
        /// Identify Field for the Composite Item table.
        /// Column was added when we added Alternative items for a composite item.
        /// </summary>
        [Column("COMPKEY")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TCOMP.COMPALTREFKEYID</para>
        /// Reference to TItem. If set it is the alternate item to be used in case COMPREFITEMKEYID is not available.
        /// </summary>
        [Column("COMPALTREFKEYID")]
        public int? AltRefKeyId { get; set; }

        /// <summary>
        /// <para>TCOMP.COMPCOMPITEMKEYID</para>
        /// The KeyID of the Item that is the Composite Item itself.
        /// </summary>
        [Column("COMPCOMPITEMKEYID")]
        [Required]
        public int CompItemKeyId { get; set; }

        /// <summary>
        /// <para>TCOMP.COMPCOUNT</para>
        /// The number of COMPREFITEMKEYID that are normally in the Composite Item.
        ///
        /// If COMPREFTEXTKEYID is set this value is ignored and should be set to zero.
        ///
        /// If COMPREEFITEMEYID is set and the value is 0 no count will be printed (ie. blank).
        /// </summary>
        [Column("COMPCOUNT")]
        [Required]
        public int Count { get; set; }

        /// <summary>
        /// <para>TCOMP.COMPCRITICALCOUNT</para>
        /// The number of COMPREFITEMKEYID that must be in the Composite Item before it is allowed to pack it.
        /// </summary>
        [Column("COMPCRITICALCOUNT")]
        [Required]
        public int CriticalCount { get; set; }

        /// <summary>
        /// <para>TCOMP.COMPHASALTERNATIVE</para>
        /// This columns indicates if the item composite item has defined alternatives.
        ///
        /// The values is updated by a trigger on the TCOMPALTERNATIVE table.
        /// </summary>
        [Column("COMPHASALTERNATIVE")]
        [Required]
        public bool HasAlternative { get; set; }

        /// <summary>
        /// <para>TCOMP.COMPIDENTLINEUSAGE</para>
        /// TIdentArticleLineUsage
        /// This enumeration type is used to indicate if it is possible to specify identical articles at the line level for orders, order templates, composite items lists, preference lists and stocks.
        /// Enum: TIdentArticleLineUsage = (Enabled, Disabled)
        ///
        /// Enabled:
        ///   Identical article substitution is enabled for the line.
        ///
        /// Disabled:
        ///   Identical article substitution is disabled for the line.
        ///
        /// Default:
        ///   Enabled
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Enabled  = 0
        ///   Disabled = 1
        /// ********************************************************************************
        /// </summary>
        [Column("COMPIDENTLINEUSAGE")]
        [Required]
        public IdentArticleLineUsage IdentLineUsage { get; set; }

        /// <summary>
        /// <para>TCOMP.COMPPLACEMENT</para>
        /// Point to an entry in TTEXT of type ttTrayPlacement.
        ///
        /// A value of NULL indicates no special type and is the default value.
        /// </summary>
        [Column("COMPPLACEMENT")]
        public int? Placement { get; set; }

        /// <summary>
        /// <para>TCOMP.COMPPOSITION</para>
        /// The position of the Single Item in the list.
        ///
        /// The value is 1 based but not always sequencial.
        /// </summary>
        [Column("COMPPOSITION")]
        [Required]
        public int Position { get; set; }

        /// <summary>
        /// <para>TCOMP.COMPREFITEMKEYID</para>
        /// A reference to a single item.
        /// </summary>
        [Column("COMPREFITEMKEYID")]
        public int? RefItemKeyId { get; set; }

        /// <summary>
        /// <para>TCOMP.COMPREFTEXTKEYID</para>
        /// - reserved for future use -
        ///
        /// The intention is that it should reference a standard text in TTEXT.
        /// </summary>
        [Column("COMPREFTEXTKEYID")]
        public int? RefTextKeyId { get; set; }

        /// <summary>
        /// <para>TCOMP.COMPSPLITTAGNO</para>
        /// If the composite item is split on several washer tags when washed this field is used to group the single items into different washer tags.
        /// </summary>
        [Column("COMPSPLITTAGNO")]
        public int? SplitTagNo { get; set; }

        /// <summary>
        /// <para>TCOMP.COMPTEXT</para>
        /// - reserved for future use -
        ///
        /// The intention is that it should be possible to insert lines of free-text into the definition of a composite item.
        /// </summary>
        [Column("COMPTEXT")]
        public string Text { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: AltRefKeyId -> ItemModel.KeyId (TCOMP.COMPALTREFKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(AltRefKeyId))]
        public ItemModel AltRef { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: CompItemKeyId -> ItemModel.KeyId (TCOMP.COMPCOMPITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(CompItemKeyId))]
        public ItemModel CompItem { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: Placement -> TextModel.Number (TCOMP.COMPPLACEMENT -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(Placement))]
        public TextModel PlacementText { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: RefItemKeyId -> ItemModel.KeyId (TCOMP.COMPREFITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(RefItemKeyId))]
        public ItemModel RefItem { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: RefTextKeyId -> TextModel.Number (TCOMP.COMPREFTEXTKEYID -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(RefTextKeyId))]
        public TextModel RefText { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TCUST table.
    /// *****************************************************************************
    /// WHEN CHANGING FIELDS REMEMBER TO UPDATE uInitTDOCDB.pas CheckDefaultCustomer !
    /// *****************************************************************************
    ///
    /// This table holds all customers defined.
    /// </summary>
    [Table("TCUST")]
    public class CustomerModel
    {
        /// <summary>
        /// <para>TCUST.CUSTKEYID</para>
        /// The internal database KeyID of the customer.
        /// </summary>
        [Column("CUSTKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUST_CREATED</para>
        /// </summary>
        [Column("CUST_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TCUST.CUST_CREATEDKEYID</para>
        /// </summary>
        [Column("CUST_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUST_MODIFIED</para>
        /// </summary>
        [Column("CUST_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TCUST.CUST_MODIFIEDKEYID</para>
        /// </summary>
        [Column("CUST_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTACCOUNT</para>
        /// The account number in an external financial system that should receive all transactions for this customer.
        /// </summary>
        [Column("CUSTACCOUNT")]
        [MaxLength(20)]
        public string Account { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTADDRESS1</para>
        /// The address of the customer.
        /// </summary>
        [Column("CUSTADDRESS1")]
        [MaxLength(40)]
        public string Address1 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTADDRESS2</para>
        /// The address of the customer.
        /// </summary>
        [Column("CUSTADDRESS2")]
        [MaxLength(40)]
        public string Address2 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTARRIVEDLGRPKEYID</para>
        /// Location group reference.
        /// </summary>
        [Column("CUSTARRIVEDLGRPKEYID")]
        public int? ArrivedLGrpKeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTAVAILABLELGRPKEYID</para>
        /// Location group reference.
        /// </summary>
        [Column("CUSTAVAILABLELGRPKEYID")]
        public int? AvailablelgrpKeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTAVGONSITESTORETIME</para>
        /// Average On-site storage time. This is the average time products are stored at the customer before they are used. The value is used in calculations where the operation the product is to be used for is unknown.
        /// The value can be overwritten at the Product level.
        /// </summary>
        [Column("CUSTAVGONSITESTORETIME")]
        public int? AvgOnSiteStoreTime { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTAVGOPDURATION</para>
        /// Average Operation Duration. This is the average duration of a &quot;generic&quot; operation. The value is used where the operation the product is to be used for is unknown or where the duration of a known operation is unknown.
        /// The value can be overwritten at the Product level.
        /// </summary>
        [Column("CUSTAVGOPDURATION")]
        public int? AvgOpDuration { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTBARCODE</para>
        /// The primary external barcode for the customer. When set a record must also be created in TBARCODE.
        ///
        /// Additional external barcodes may be defined in TBARCODE.
        /// </summary>
        [Column("CUSTBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTCALKEYID</para>
        /// A reference to the calendar. Define calendar of work hours for the customer. If field is NULL then calendar from TFACTORY.FacCalKeyID is taken.
        /// </summary>
        [Column("CUSTCALKEYID")]
        public int? CalKeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTCANORDER</para>
        /// Determines if the customer can send purchase orders using the stock module.
        /// </summary>
        [Column("CUSTCANORDER")]
        [Required]
        public bool CanOrder { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTCHARGEOPTIONS</para>
        /// The field is a bit mask that maps to the ccoXXXXX values in TDConst.
        /// Each bit resembles a part of the price calculated for Products. Setting the
        /// bit will exclude that part of the calculated price when the product is delivered
        /// to the customer.
        /// NOTE: The bits do NOT affect a product with a fixed price (PRODFIXEDPRICE).
        ///
        /// Currently the following bits are used:
        ///   ccoDropUsage         = 0;
        ///   ccoDropSterilization = 1;
        ///   ccoDropWash          = 2;
        ///   ccoDropPacking       = 3;
        ///   ccoDropHandling      = 4;
        /// </summary>
        [Column("CUSTCHARGEOPTIONS")]
        public int? ChargeOptions { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTCITY</para>
        /// The address of the customer.
        /// </summary>
        [Column("CUSTCITY")]
        [MaxLength(60)]
        public string City { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTCNTPSKEYID</para>
        /// Ref to the counting point group data (TCountingPointSet).
        ///
        /// The customer-level counting point group. For Operation area counting this overrides that at customer site and system-levels, but can be overridden by that at operation type level.
        /// </summary>
        [Column("CUSTCNTPSKEYID")]
        public int? CntpsKeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTCOLOR</para>
        /// </summary>
        [Column("CUSTCOLOR")]
        public short? Color { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTCOUNTRY</para>
        /// The address of the customer.
        /// </summary>
        [Column("CUSTCOUNTRY")]
        [MaxLength(40)]
        public string Country { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTCUSITEKEYID</para>
        /// Link to Customer Site.
        /// </summary>
        [Column("CUSTCUSITEKEYID")]
        public int? CuSiteKeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTCUSTOMER</para>
        /// The ID of the customer as seen by the user.
        /// </summary>
        [Column("CUSTCUSTOMER")]
        [Required, MaxLength(20)]
        public string Customer { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTDEFSTOKKEYID</para>
        /// The default stock of the customer. MUST be set as soon as a customer has even one stock. Anything dispatched to the customer without a designated stock is put on this stock.
        /// </summary>
        [Column("CUSTDEFSTOKKEYID")]
        public int? DefStokKeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTDELADDRESS1</para>
        /// The delivery address of the customer.
        /// </summary>
        [Column("CUSTDELADDRESS1")]
        [MaxLength(40)]
        public string DelAddress1 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTDELADDRESS2</para>
        /// The delivery address of the customer.
        /// </summary>
        [Column("CUSTDELADDRESS2")]
        [MaxLength(40)]
        public string DelAddress2 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTDELCITY</para>
        /// The delivery address of the customer.
        /// </summary>
        [Column("CUSTDELCITY")]
        [MaxLength(60)]
        public string DelCity { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTDELCOUNTRY</para>
        /// The delivery address of the customer.
        /// </summary>
        [Column("CUSTDELCOUNTRY")]
        [MaxLength(40)]
        public string DelCountry { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTDELEMAIL</para>
        /// The email used at the delivery address of the customer.
        /// </summary>
        [Column("CUSTDELEMAIL")]
        [MaxLength(60)]
        public string DelEmail { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTDELFAX</para>
        /// The fax number used at the delivery address of the customer.
        /// </summary>
        [Column("CUSTDELFAX")]
        [MaxLength(20)]
        public string DelFax { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTDELGLN</para>
        /// </summary>
        [Column("CUSTDELGLN")]
        [MaxLength(50)]
        public string DelGln { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTDELIVERYNOTE</para>
        /// Indicates if the customer wants a delivery note printed when units are dispatched. The delivery note is always created in the database. This value just determines if it is printed.
        /// </summary>
        [Column("CUSTDELIVERYNOTE")]
        [Required]
        public bool DeliveryNote { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTDELPKEYID</para>
        /// A reference to the Delivery plan (for Transit products) used for this customer.
        ///
        /// See table TDeliveryPlan
        /// </summary>
        [Column("CUSTDELPKEYID")]
        public int? DelPKeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTDELTELEPHONE</para>
        /// The telephone number used at the delivery address of the customer.
        /// </summary>
        [Column("CUSTDELTELEPHONE")]
        [MaxLength(20)]
        public string DelTelephone { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTEMAIL</para>
        /// The email used at the address of the customer.
        /// </summary>
        [Column("CUSTEMAIL")]
        [MaxLength(60)]
        public string Email { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTENDOSETIME</para>
        /// As FacEndoSETime time in TFactory.
        ///
        /// When the customer of a endoscope is known and this customer has a SE Time defined then this time will apply and the Factory SE Time will be ignored.
        /// </summary>
        [Column("CUSTENDOSETIME")]
        public int? EndoSETime { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTEXTERNAL</para>
        /// Used to indicate if a customer is external. Reports etc. can use it for filtering.
        /// The field is not used by T-DOC itself but might be used in the implementation of certain interfaces.
        /// </summary>
        [Column("CUSTEXTERNAL")]
        [Required]
        public bool External { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTFACKEYID</para>
        /// If the customer is Factory Bound this field holds the primary factory of the customer. A NULL value indicates that the customer is not factory bound.
        /// See also the TFACCUST table.
        /// </summary>
        [Column("CUSTFACKEYID")]
        public int? FacKeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTFAX</para>
        /// The fax number used at the address of the customer.
        /// </summary>
        [Column("CUSTFAX")]
        [MaxLength(20)]
        public string Fax { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTFLAGS1</para>
        /// - reserved for future use -
        /// </summary>
        [Column("CUSTFLAGS1")]
        public int? Flags1 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTGLN</para>
        /// </summary>
        [Column("CUSTGLN")]
        [MaxLength(50)]
        public string Gln { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTINTPICKTIME</para>
        /// Local picking time: The amount of time it takes to pick goods from a local stock and bring it to the place of usage.
        /// Stored in seconds.
        /// If set to NULL then the value from the corresponding Customer Site field CUSITEINTPICKTIME will be used if a Customer Site has been specified for the customer.
        /// </summary>
        [Column("CUSTINTPICKTIME")]
        public int? IntPickTime { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTINTTRANSTIMEARRIVE</para>
        /// Internal arrival transport time: The amount of time used, from goods arrive (as stated in a Transport Route schedule) till it is placed at a local stock.
        /// Stored in seconds.
        /// If set to NULL then the value from the corresponding Customer Site field CUSITEINTTRANSTIMEARRIVE will be used if a Customer Site has been specified for the customer.
        /// </summary>
        [Column("CUSTINTTRANSTIMEARRIVE")]
        public int? IntTransTimeArrive { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTINTTRANSTIMEDEPART</para>
        /// Internal return transport time: The amount of time used, from goods has been &quot;post use processed&quot; until it is ready for return transportation.
        /// Stored in seconds.
        /// If set to NULL then the value from the corresponding Customer Site field CUSITEINTTRANSTIMEDEPART will be used if a Customer Site has been specified for the customer.
        /// </summary>
        [Column("CUSTINTTRANSTIMEDEPART")]
        public int? IntTransTimeDepart { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTINVOICECUSTKEYID</para>
        /// If set all transactions for the customer are transferred to this CustKeyID.
        /// </summary>
        [Column("CUSTINVOICECUSTKEYID")]
        public int? InvoiceCustKeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTINVOICEREBATE</para>
        /// The percentage added to or deducted from all invoices going to the customer.
        /// Negative values will be deducted and positive added.
        /// Calculations are done when the invoice is printed/exported.
        /// See also CustLineRebate.
        /// </summary>
        [Column("CUSTINVOICEREBATE")]
        public double? InvoiceRebate { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTLINEREBATE</para>
        /// The percentage added to or deducted from all transactions going to the customer.
        /// Negative values will be deducted and positive added.
        /// Calculations are done on a per line basis when the transaction is created and can not be undone.
        /// See also CustInvoiceRebate.
        /// </summary>
        [Column("CUSTLINEREBATE")]
        public double? LineRebate { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTMINORDERLEADTIME</para>
        /// The minimum order lead time. Specified in minutes.
        /// </summary>
        [Column("CUSTMINORDERLEADTIME")]
        public int? MinOrderLeadTime { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTNAME</para>
        /// The full name of the customer
        /// </summary>
        [Column("CUSTNAME")]
        [Required, MaxLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTORDERBOOKINGMODE</para>
        /// Holds order booking mode for the customer.
        ///
        /// Specifies the overall order booking mode for the Factory. Possible values are:
        ///   0 (Default)    - Default: Use the factory setting. (Default value)
        ///   1 (Disabled)   - Disabled: Disables all bookings/reservations for orders sent by this customer.
        ///   2 (Manual)     - Manual: Bookings must be manually invoked for each order where booking is possible.
        ///   3 (Automation) - Automatic: Bookings are automatically created for all orders where booking is possible.
        ///
        /// NOTE 1: If bookings are disabled at the Factory level then this setting has no effect. No bookings will be made.
        /// NOTE 2: If &quot;Traceability&quot; is not selected for the customer then this setting has no effect. No bookings will be made. This should be visible in the UI (using a red label or something like that).
        /// </summary>
        [Column("CUSTORDERBOOKINGMODE")]
        public CustOrderBookingMode? OrderBookingMode { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTPREDISPATCHMODE</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   UseFacSetting = 0
        ///   Always        = 1
        ///   Never         = 2
        /// ********************************************************************************
        ///
        /// A selection indicating if and how goods are to be predispatched
        ///
        /// Use factory setting - Predispatch is used for this customer, based upon the settings for the factory (as specified on the Additional tab of the Factories window). See Factories.
        /// Always              - Predispatch is always used for this customer, irrespective of the factory settings.
        /// Never               - Predispatch is never used for this customer, irrespective of the factory settings.
        /// </summary>
        [Column("CUSTPREDISPATCHMODE")]
        public CustPreDispatchMode? PreDispatchMode { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTREMARK</para>
        /// Any remarks concerning the customer.
        /// </summary>
        [Column("CUSTREMARK")]
        public string Remark { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTREORDERMODE</para>
        /// Determines if the customer uses automatic re-ordering. See manual for details. Valid values are:
        ///
        ///   TReOrderMode = (romOff,romOrder,romAccepted,romPicked,romDelivered,romCancelled)
        ///
        /// Currently only romOff and romAccepted are implemented.
        /// </summary>
        [Column("CUSTREORDERMODE")]
        public int? Reordermode { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTSHORTNAME</para>
        /// An abbreviated customer name. Hospital departments often have a full name as well as a commonly used abbreviation (e.g. Emergency room = OR).
        /// </summary>
        [Column("CUSTSHORTNAME")]
        [MaxLength(40)]
        public string ShortName { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTSTATUS</para>
        /// Indicates the status of the customer. Valid values are:
        ///
        ///   stNormal = 10
        ///   stDead   = 90
        /// </summary>
        [Column("CUSTSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTSTGRKEYID</para>
        /// A reference to the stock group containing the stocks most often used to supply goods to this customer. The group is used when printing a picklist containing goods going to the customer.
        /// </summary>
        [Column("CUSTSTGRKEYID")]
        public int? StGrKeyId { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTTAGSSURVIVE</para>
        /// Indicates if tags such as Baskets, Bundles and Transport tags are dissolved when delivered to the customer. If the tags are not scanned after delivery this value should be set to False.
        /// </summary>
        [Column("CUSTTAGSSURVIVE")]
        [Required]
        public bool TagsSurvive { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTTELEPHONE</para>
        /// The telephone number used at the address of the customer.
        /// </summary>
        [Column("CUSTTELEPHONE")]
        [MaxLength(20)]
        public string Telephone { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTTRACEABILITY</para>
        /// Indicates if the customer wants Full traceability when possible.
        /// </summary>
        [Column("CUSTTRACEABILITY")]
        [Required]
        public bool Traceability { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF01</para>
        /// These fields can be used to store any information and the user can define their &quot;public&quot; names.
        /// The user defined field names for these fields are stored in TDEFAULT with a # in front of the fieldname and DEFUSERKEYID is always 0.
        /// </summary>
        [Column("CUSTUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF02</para>
        /// </summary>
        [Column("CUSTUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF03</para>
        /// </summary>
        [Column("CUSTUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF04</para>
        /// </summary>
        [Column("CUSTUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF05</para>
        /// </summary>
        [Column("CUSTUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF06</para>
        /// </summary>
        [Column("CUSTUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF07</para>
        /// </summary>
        [Column("CUSTUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF08</para>
        /// </summary>
        [Column("CUSTUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF09</para>
        /// </summary>
        [Column("CUSTUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF10</para>
        /// </summary>
        [Column("CUSTUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF11</para>
        /// </summary>
        [Column("CUSTUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF12</para>
        /// </summary>
        [Column("CUSTUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF13</para>
        /// </summary>
        [Column("CUSTUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF14</para>
        /// </summary>
        [Column("CUSTUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF15</para>
        /// </summary>
        [Column("CUSTUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF16</para>
        /// </summary>
        [Column("CUSTUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF17</para>
        /// </summary>
        [Column("CUSTUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF18</para>
        /// </summary>
        [Column("CUSTUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF19</para>
        /// </summary>
        [Column("CUSTUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTUF20</para>
        /// </summary>
        [Column("CUSTUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTWEBPASSWORD</para>
        /// The password to use when loging in to the customers web-site.
        /// </summary>
        [Column("CUSTWEBPASSWORD")]
        [MaxLength(40)]
        public string WebPassword { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTWEBSITE</para>
        /// A valid URL to the customers web-site.
        /// </summary>
        [Column("CUSTWEBSITE")]
        [MaxLength(60)]
        public string WebSite { get; set; }

        /// <summary>
        /// <para>TCUST.CUSTWEBUSER</para>
        /// The username to use when loging in to the customers web-site.
        /// </summary>
        [Column("CUSTWEBUSER")]
        [MaxLength(40)]
        public string WebUser { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TCUST.CUST_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: DefStokKeyId -> StocksModel.KeyId (TCUST.CUSTDEFSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(DefStokKeyId))]
        public StocksModel DefStok { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TCUST.CUSTFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: InvoiceCustKeyId -> CustomerModel.KeyId (TCUST.CUSTINVOICECUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(InvoiceCustKeyId))]
        public CustomerModel InvoiceCust { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TCUST.CUST_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of CustomerUsersModel instances.
        /// <para />
        /// Foreign key: CustomerUsersModel.CustKeyId -> KeyId (TCUSTUSER.CUUSERCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [InverseProperty("Cust")]
        public List<CustomerUsersModel> CustCustomerUsersList { get; set; }

        /// <summary>
        /// Reference to a collection of ExtDocRefLinkModel instances.
        /// <para />
        /// Foreign key: ExtDocRefLinkModel.CustKeyId -> KeyId (TEXTDOCREFLINK.EDRLCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [InverseProperty("Cust")]
        public List<ExtDocRefLinkModel> CustExtDocRefLinkList { get; set; }

        /// <summary>
        /// Reference to a collection of OperationDataModel instances.
        /// <para />
        /// Foreign key: OperationDataModel.CustKeyId -> KeyId (TOPDATA.OPDCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [InverseProperty("Cust")]
        public List<OperationDataModel> CustOperationDataList { get; set; }

        /// <summary>
        /// Reference to a collection of ProductModel instances.
        /// <para />
        /// Foreign key: ProductModel.CustKeyId -> KeyId (TPRODUCT.PRODCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [InverseProperty("Cust")]
        public List<ProductModel> CustProductList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitModel instances.
        /// <para />
        /// Foreign key: UnitModel.CustKeyId -> KeyId (TUNIT.UNITCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [InverseProperty("Cust")]
        public List<UnitModel> CustUnitList { get; set; }

        /// <summary>
        /// Reference to a collection of CustomerModel instances.
        /// <para />
        /// Foreign key: CustomerModel.InvoiceCustKeyId -> KeyId (TCUST.CUSTINVOICECUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [InverseProperty("InvoiceCust")]
        public List<CustomerModel> InvoiceCustCustomerList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.OrgInvRefCustKeyId -> KeyId (TORDER.ORDORGINVREFCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [InverseProperty("OrgInvRefCust")]
        public List<OrderModel> OrgInvRefCustOrderList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.OrgRefCustKeyId -> KeyId (TORDER.ORDORGREFCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [InverseProperty("OrgRefCust")]
        public List<OrderModel> OrgRefCustOrderList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderTemplateModel instances.
        /// <para />
        /// Foreign key: OrderTemplateModel.OrgRefCustKeyId -> KeyId (TORDERTP.ORDTPORGREFCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [InverseProperty("OrgRefCust")]
        public List<OrderTemplateModel> OrgRefCustOrderTemplateList { get; set; }

        /// <summary>
        /// Reference to a collection of StocksModel instances.
        /// <para />
        /// Foreign key: StocksModel.RefCustKeyId -> KeyId (TSTOCKS.STOKREFCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [InverseProperty("RefCust")]
        public List<StocksModel> RefCustStocksList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.SuppRefCustKeyId -> KeyId (TORDER.ORDSUPPREFCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [InverseProperty("SuppRefCust")]
        public List<OrderModel> SuppRefCustOrderList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TCUSTUSER table.
    /// This table links the users that allowed to login on behalf of one or more customers to those customers.
    /// </summary>
    [Table("TCUSTUSER")]
    public class CustomerUsersModel
    {
        /// <summary>
        /// <para>TCUSTUSER.CUUSERCUSTKEYID</para>
        /// A link to the customer
        /// </summary>
        [Column("CUUSERCUSTKEYID")]
        [Required]
        public int CustKeyId { get; set; }

        /// <summary>
        /// <para>TCUSTUSER.CUUSERUSERKEYID</para>
        /// A link to the user
        /// </summary>
        [Column("CUUSERUSERKEYID")]
        [Required]
        public int UserKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: CustKeyId -> CustomerModel.KeyId (TCUSTUSER.CUUSERCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(CustKeyId))]
        public CustomerModel Cust { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: UserKeyId -> UserModel.KeyId (TCUSTUSER.CUUSERUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(UserKeyId))]
        public UserModel User { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TDESKTOP table.
    /// This table is used to store global desktop data for users and T-DOC applications (it replaces the .DSG desktop files).
    /// </summary>
    [Table("TDESKTOP")]
    public class DesktopModel
    {
        /// <summary>
        /// <para>TDESKTOP.DESKKEYID</para>
        /// The KeyID for the record
        /// </summary>
        [Column("DESKKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TDESKTOP.DESKAPPTYPE</para>
        /// The application type the desktop data is relevant for. Mapped to the enumerated type TTDOCAppType.
        ///
        /// Currently the following values are valid:
        ///
        /// Admin = 5
        /// Scanner = 6
        /// Connect = 7 (not implemented yet)
        /// WebServer = 28****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Unknown                = 0
        ///   AppServer              = 1
        ///   ScannerServer          = 2
        ///   ConnectServer          = 3
        ///   TDOCCtrl               = 4
        ///   Admin                  = 5
        ///   Scanner                = 6
        ///   Connect                = 7
        ///   Spool_Obsolete         = 8
        ///   Launcher               = 9
        ///   Exchange               = 10
        ///   MacView                = 11
        ///   Service                = 12
        ///   PrintServer            = 13
        ///   RemoteControl_Obsolete = 14
        ///   JobServer_Obsolete     = 15
        ///   ProfEdit               = 16
        ///   DeviceTest             = 17
        ///   MacSimu                = 18
        ///   IniEdit                = 19
        ///   NetTest                = 20
        ///   UtilityServer          = 21
        ///   SpoolServer            = 22
        ///   SpoolCtrl              = 23
        ///   NetCOMCfg              = 24
        ///   JobCfg                 = 25
        ///   Panel                  = 26
        ///   JobServer              = 27
        ///   WebServer              = 28
        ///   Engine                 = 29
        ///   Upgrade                = 30
        ///   UnknownL               = 31
        /// ********************************************************************************
        /// </summary>
        [Column("DESKAPPTYPE")]
        [Required]
        public TDOCAppType AppType { get; set; }

        /// <summary>
        /// <para>TDESKTOP.DESKDATA</para>
        /// The actual desktop data. Stored in INI-file format.
        ///
        /// Deleting full lines or whole sections will cause the settings to revert to their default values.
        ///
        /// WARNING: Changing/deleting part of line can cause T-DOC to malfunction and might prevent the user from logging in or access certain features of T-DOC.
        ///
        /// Web options
        /// -----------------
        /// These are stored in DFM format. Do not edit unless instructed by R&amp;D!
        /// </summary>
        [Column("DESKDATA")]
        public string Data { get; set; }

        /// <summary>
        /// <para>TDESKTOP.DESKDATAIDENTIFIER</para>
        /// Unique identifier for desktop data.
        /// </summary>
        [Column("DESKDATAIDENTIFIER")]
        [MaxLength(100)]
        public string DataIdentifier { get; set; }

        /// <summary>
        /// <para>TDESKTOP.DESKTIME</para>
        /// The last time the desktop data was modified.
        /// </summary>
        [Column("DESKTIME", TypeName = "datetime")]
        public DateTime? Time { get; set; }

        /// <summary>
        /// <para>TDESKTOP.DESKUSERKEYID</para>
        /// A reference to the user the data belongs to. If NULL then its the global/default desktop data.
        /// </summary>
        [Column("DESKUSERKEYID")]
        public int? UserKeyId { get; set; }

        /// <summary>
        /// <para>TDESKTOP.DESKVERSION</para>
        /// The version of the format of the desktop data.
        /// </summary>
        [Column("DESKVERSION")]
        public int? Version { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: UserKeyId -> UserModel.KeyId (TDESKTOP.DESKUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(UserKeyId))]
        public UserModel User { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TDOCTOR table.
    /// This table is used to hold all doctors (surgeons) know to T-DOC.
    /// The table only holds enough information to possitivly identify a doctor. Further information about doctors is assumed to be stored outside T-DOC.
    /// </summary>
    [Table("TDOCTOR")]
    public class DoctorModel
    {
        /// <summary>
        /// <para>TDOCTOR.DOCTKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("DOCTKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCT_CREATED</para>
        /// </summary>
        [Column("DOCT_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCT_CREATEDKEYID</para>
        /// </summary>
        [Column("DOCT_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCT_MODIFIED</para>
        /// </summary>
        [Column("DOCT_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCT_MODIFIEDKEYID</para>
        /// </summary>
        [Column("DOCT_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTBARCODE</para>
        /// </summary>
        [Column("DOCTBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTCALKEYID</para>
        /// A reference to the calendar. Define calendar of work hours for the doctor.
        ///
        /// Do not use yet.
        /// </summary>
        [Column("DOCTCALKEYID")]
        public int? CalKeyId { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTINITIALS</para>
        /// The initials of the doctor.
        /// </summary>
        [Column("DOCTINITIALS")]
        [Required, MaxLength(40)]
        public string Initials { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTNAME</para>
        /// The name of the doctor.
        /// </summary>
        [Column("DOCTNAME")]
        [Required, MaxLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTSTATUS</para>
        /// Indicates the status of the doctor. Valid values are:
        ///
        ///   stNormal = 10
        ///   stDead   = 90
        /// </summary>
        [Column("DOCTSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF01</para>
        /// These fields can be used to store any information and the user can define their &quot;public&quot; names.
        /// The user defined field names for these fields are stored in TDEFAULT with a # in front of the fieldname and DEFUSERKEYID is always 0.
        /// </summary>
        [Column("DOCTUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF02</para>
        /// </summary>
        [Column("DOCTUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF03</para>
        /// </summary>
        [Column("DOCTUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF04</para>
        /// </summary>
        [Column("DOCTUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF05</para>
        /// </summary>
        [Column("DOCTUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF06</para>
        /// </summary>
        [Column("DOCTUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF07</para>
        /// </summary>
        [Column("DOCTUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF08</para>
        /// </summary>
        [Column("DOCTUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF09</para>
        /// </summary>
        [Column("DOCTUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF10</para>
        /// </summary>
        [Column("DOCTUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF11</para>
        /// </summary>
        [Column("DOCTUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF12</para>
        /// </summary>
        [Column("DOCTUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF13</para>
        /// </summary>
        [Column("DOCTUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF14</para>
        /// </summary>
        [Column("DOCTUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF15</para>
        /// </summary>
        [Column("DOCTUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF16</para>
        /// </summary>
        [Column("DOCTUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF17</para>
        /// </summary>
        [Column("DOCTUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF18</para>
        /// </summary>
        [Column("DOCTUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF19</para>
        /// </summary>
        [Column("DOCTUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TDOCTOR.DOCTUF20</para>
        /// </summary>
        [Column("DOCTUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TDOCTOR.DOCT_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TDOCTOR.DOCT_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of ExtDocRefLinkModel instances.
        /// <para />
        /// Foreign key: ExtDocRefLinkModel.DoctKeyId -> KeyId (TEXTDOCREFLINK.EDRLDOCTKEYID -> TDOCTOR.DOCTKEYID)
        /// </summary>
        [InverseProperty("Doct")]
        public List<ExtDocRefLinkModel> DoctExtDocRefLinkList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TEVENT table.
    /// This table holds both system and user generated events to various items such as machines, units, processes etc.
    /// </summary>
    [Table("TEVENT")]
    public class EventModel
    {
        /// <summary>
        /// <para>TEVENT.EVNTKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("EVNTKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNT_CREATED</para>
        /// </summary>
        [Column("EVNT_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNT_CREATEDKEYID</para>
        /// </summary>
        [Column("EVNT_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNT_MODIFIED</para>
        /// </summary>
        [Column("EVNT_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNT_MODIFIEDKEYID</para>
        /// </summary>
        [Column("EVNT_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNTEVENT</para>
        /// The text identifying the event.
        /// </summary>
        [Column("EVNTEVENT")]
        [Required, MaxLength(150)]
        public string Event { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNTEVENTSYSTYPE</para>
        /// Used for the event type constant, i.e. the consts in uEvents. This constant is currently also added to the EvntInfo field, but might be removed later.
        ///
        /// Valid values are currently:
        ///   evntProcessProgramChange = 1;
        ///   evntProcessClearError    = 2;
        ///   evntUnitErrorChange      = 3;
        ///   evntUnitBatchChange      = 4;
        ///   evntProcessApprove       = 5;
        ///   evntProcessDisApprove    = 6;
        ///   evntProcessMoveUnitsTo   = 7;
        ///   evntProcessMoveUnitsFrom = 8;
        ///   evntUnitPackingChange    = 9;
        ///   evntProcessEnableApprove = 10;
        ///   evntUnitLotNo            = 11;
        ///   evntProcessChargeChange  = 12;
        ///   evntProcessLotNo         = 13;
        ///   evntProcessSerialNo      = 14;
        ///   evntProcessLogfileImport = 15;
        ///   evntUnitReturnPacked     = 16;
        ///   evntUnitDispatchPacked   = 17;
        ///   evntUnitReturnedAtPack   = 18;
        ///   evntAddedCommentToUnit   = 19;
        ///   evntLabelCommentToUnit   = 20;
        ///   evntAddedOPCommentToUnit = 21;
        ///   evntLoanSetNameToUnit    = 22;
        ///   evntUnitPrevDeleted      = 23;
        ///   evntUnitNextDeleted      = 24;
        ///   evntUnitPrevCleared      = 25;
        ///   evntUnitNextCleared      = 26;
        ///   evntDBDeletedUnits       = 27;
        ///   evntDBDeletedProcesses   = 28;
        ///   evntDBDeletedOPData      = 29;
        ///   evntDBDeletedCustInv     = 30;
        ///   evntDBDeletedOrders      = 31;
        ///   evntDBDeletedReturnOrders= 32;
        ///   evntDBDeletedInventory   = 33;
        ///   evntDBDeletedJobLog      = 34;
        ///   evntDBDeletedAuditLog    = 35;
        ///   evntProcExtLogfileImport = 36;
        ///   evntUnitErrorMarked      = 37;
        ///   evntProcessErrorMarked   = 38;
        ///   evntMarkUnits            = 39;
        ///   evntMarkUnitsExp         = 40;
        ///   evntMarkUnitsProd        = 41;
        ///   evntForcedExpiredDispatch= 42;
        ///   evntForcedCustDispatch   = 43;
        /// </summary>
        [Column("EVNTEVENTSYSTYPE")]
        public int? Eventsystype { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNTEVENTTYPE</para>
        /// Will be used for user event categorization. Not implemented.
        /// </summary>
        [Column("EVNTEVENTTYPE")]
        public int? Eventtype { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNTINFO</para>
        /// The description of the event
        /// </summary>
        [Column("EVNTINFO")]
        public string Info { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNTPLOKEYID</para>
        /// Ref. to where the event happened (TPosLoca). If null, event generated from Admin.
        /// </summary>
        [Column("EVNTPLOKEYID")]
        public int? PloKeyId { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNTREFKEYID</para>
        /// This field holds the KEYID of the &quot;owner&quot; of the event. The table of the KEYID is determined by EVNTTYPE.
        /// </summary>
        [Column("EVNTREFKEYID")]
        [Required]
        public int RefKeyId { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNTSYSDATA</para>
        /// Used for the system data. This text is currently also added to the EvntInfo field, but might be removed later.
        ///
        /// The value depends on EvntEventSysType, fx:
        ///   evntProcessProgramChange: Programs changed from and to.
        ///   evntProcessLogfileImport: Name of logfile.
        ///   evntUnitErrorMarked: Error put on unit.
        /// </summary>
        [Column("EVNTSYSDATA")]
        [MaxLength(150)]
        public string Sysdata { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNTSYSTEM</para>
        /// If true Indicates that it is a system created event only to be deleted when father is deleted.
        /// </summary>
        [Column("EVNTSYSTEM")]
        [Required]
        public bool System { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNTTIME</para>
        /// The time of the event.
        ///
        /// Not neccesarily the same as the time it was created
        /// </summary>
        [Column("EVNTTIME", TypeName = "datetime")]
        [Required]
        public DateTime Time { get; set; }

        /// <summary>
        /// <para>TEVENT.EVNTTYPE</para>
        /// A TTableType value (taXXXXX)
        ///
        /// Currently valid are:
        ///   Product       = 1
        ///   Serial        = 2
        ///   Item          = 3
        ///   Machine       = 4
        ///   System        = 7
        ///   Unit          = 8
        ///   User          = 13
        ///   Process       = 14
        ///   OperationData = 18
        ///   RepairType    = 28
        ///   Repair        = 29
        ///   Indicator     = 39
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None                 = 0
        ///   Product              = 1
        ///   Serial               = 2
        ///   Item                 = 3
        ///   Machine              = 4
        ///   Supplier             = 5
        ///   Customer             = 6
        ///   System               = 7
        ///   Unit                 = 8
        ///   Text                 = 9
        ///   Factory              = 10
        ///   Lot_OBSOLETE         = 11
        ///   Stocks               = 12
        ///   User                 = 13
        ///   Process              = 14
        ///   LotTransAct_OBSOLETE = 15
        ///   Location             = 16
        ///   RushPlan             = 17
        ///   OperationData        = 18
        ///   OperationType        = 19
        ///   ProcedureType        = 20
        ///   Program              = 21
        ///   ProgramRecipe        = 22
        ///   Catalog              = 23
        ///   Patient              = 24
        ///   Order                = 25
        ///   MachineType          = 26
        ///   ProgramGroup         = 27
        ///   RepairType           = 28
        ///   Repair               = 29
        ///   Doctor               = 30
        ///   IndicatorType        = 31
        ///   Room                 = 32
        ///   Pack                 = 33
        ///   FastTrackCode        = 34
        ///   FastTrackPlan        = 35
        ///   FastTrackGroup       = 36
        ///   WashCheckType        = 37
        ///   InfoOverviewConfig   = 38
        ///   Indicator            = 39
        ///   TransportMethod      = 40
        ///   HandlingStep         = 41
        ///   LocationGroup        = 42
        ///   CustSite             = 43
        ///   Tags                 = 44
        ///   DryerProcess         = 45
        ///   StandardComment      = 46
        /// ********************************************************************************
        /// </summary>
        [Column("EVNTTYPE")]
        [Required]
        public TableTypes Type { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TEVENT.EVNT_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TEVENT.EVNT_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a PosLocationModel instance.
        /// <para />
        /// Foreign key: PloKeyId -> PosLocationModel.KeyId (TEVENT.EVNTPLOKEYID -> TPOSLOCA.PLOKEYID)
        /// </summary>
        [ForeignKey(nameof(PloKeyId))]
        public PosLocationModel Plo { get; set; }

        /// <summary>
        /// Reference to a IndicatorModel instance.
        /// <para />
        /// Foreign key: RefKeyId -> IndicatorModel.KeyId (TEVENT.EVNTREFKEYID -> TINDICATOR.INDICINDICATOR)
        /// </summary>
        [ForeignKey(nameof(RefKeyId))]
        public IndicatorModel RefIndicator { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: RefKeyId -> ItemModel.KeyId (TEVENT.EVNTREFKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(RefKeyId))]
        public ItemModel RefItem { get; set; }

        /// <summary>
        /// Reference to a MachineModel instance.
        /// <para />
        /// Foreign key: RefKeyId -> MachineModel.KeyId (TEVENT.EVNTREFKEYID -> TMACHINE.MACHKEYID)
        /// </summary>
        [ForeignKey(nameof(RefKeyId))]
        public MachineModel RefMachine { get; set; }

        /// <summary>
        /// Reference to a OperationDataModel instance.
        /// <para />
        /// Foreign key: RefKeyId -> OperationDataModel.KeyId (TEVENT.EVNTREFKEYID -> TOPDATA.OPDKEYID)
        /// </summary>
        [ForeignKey(nameof(RefKeyId))]
        public OperationDataModel RefOperationData { get; set; }

        /// <summary>
        /// Reference to a ProcessModel instance.
        /// <para />
        /// Foreign key: RefKeyId -> ProcessModel.KeyId (TEVENT.EVNTREFKEYID -> TPROCESS.PROCBATCH)
        /// </summary>
        [ForeignKey(nameof(RefKeyId))]
        public ProcessModel RefProcess { get; set; }

        /// <summary>
        /// Reference to a ProductModel instance.
        /// <para />
        /// Foreign key: RefKeyId -> ProductModel.KeyId (TEVENT.EVNTREFKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [ForeignKey(nameof(RefKeyId))]
        public ProductModel RefProduct { get; set; }

        /// <summary>
        /// Reference to a SerialModel instance.
        /// <para />
        /// Foreign key: RefKeyId -> SerialModel.KeyId (TEVENT.EVNTREFKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [ForeignKey(nameof(RefKeyId))]
        public SerialModel RefSerial { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: RefKeyId -> UnitModel.KeyId (TEVENT.EVNTREFKEYID -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(RefKeyId))]
        public UnitModel RefUnit { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: RefKeyId -> UserModel.KeyId (TEVENT.EVNTREFKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(RefKeyId))]
        public UserModel RefUser { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TEXTDOCREFINFO table.
    /// This table holds info on external documents. An external documents can either be a direct link to e.g. a pdf file from a webserver, or it can be a reference to a doc in a &#39;externanal document store&#39;, see table TEXTDOCSTORE.
    /// </summary>
    [Table("TEXTDOCREFINFO")]
    public class ExtDocRefInfoModel
    {
        /// <summary>
        /// <para>TEXTDOCREFINFO.EDRIKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("EDRIKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFINFO.EDRIDISPLAYCOUNT</para>
        /// The number of times that this document has been displayed.
        /// </summary>
        [Column("EDRIDISPLAYCOUNT")]
        public int? DisplayCount { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFINFO.EDRIEDSKEYID</para>
        /// Reference to an external document store (table TEXTDOCSTORE).
        /// If this field is null, then the EDRIPath field contain a direct link, e.g. to a pdf doc from a webserver.
        /// </summary>
        [Column("EDRIEDSKEYID")]
        public int? EDSKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFINFO.EDRIFILETIME</para>
        /// Used when the doc is in a document store. It is the timestamp of the file. Used to check if documents are updated.
        /// </summary>
        [Column("EDRIFILETIME")]
        public int? FileTime { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFINFO.EDRILASTDISPLAYED</para>
        /// Last time that the document was displayed.
        /// </summary>
        [Column("EDRILASTDISPLAYED", TypeName = "datetime")]
        public DateTime? LastDisplayed { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFINFO.EDRINAME</para>
        /// An alternative name of the document. If set then this name will be displayed to users instead of the documents filename.
        /// </summary>
        [Column("EDRINAME")]
        [MaxLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFINFO.EDRIPATH</para>
        /// The path and filename of the document. Is either a direct link, or (when EDRIEDSKeyID is set) a relative path in a document store.
        /// </summary>
        [Column("EDRIPATH")]
        [Required, MaxLength(250)]
        public string Path { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a ExtDocStoreModel instance.
        /// <para />
        /// Foreign key: EDSKeyId -> ExtDocStoreModel.KeyId (TEXTDOCREFINFO.EDRIEDSKEYID -> TEXTDOCSTORE.EDSKEYID)
        /// </summary>
        [ForeignKey(nameof(EDSKeyId))]
        public ExtDocStoreModel EDS { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TEXTDOCREFLINK table.
    /// This table links external documents (table TEXTDOCREFINFO) to products, items, machines etc etc.
    /// </summary>
    [Table("TEXTDOCREFLINK")]
    public class ExtDocRefLinkModel
    {
        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLCUSTKEYID</para>
        /// Ref to customer that this doc is to be shown for.
        /// </summary>
        [Column("EDRLCUSTKEYID")]
        public int? CustKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLDOCTKEYID</para>
        /// Ref to doctor that this doc is to be shown for.
        /// </summary>
        [Column("EDRLDOCTKEYID")]
        public int? DoctKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLEDRIKEYID</para>
        /// Ref to the external doc in table TEXTDOCREFINFO
        /// </summary>
        [Column("EDRLEDRIKEYID")]
        [Required]
        public int EDRIKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLITEMKEYID</para>
        /// Ref to item that this doc is to be shown for.
        /// </summary>
        [Column("EDRLITEMKEYID")]
        public int? ItemKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLLOCAKEYID</para>
        /// Ref to location that this doc is to be shown for.
        /// </summary>
        [Column("EDRLLOCAKEYID")]
        public int? LocaKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLMACHKEYID</para>
        /// Ref to machine that this doc is to be shown for.
        /// </summary>
        [Column("EDRLMACHKEYID")]
        public int? MachKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLMCTYPKEYID</para>
        /// Ref to machine type/model that this doc is to be shown for.
        /// </summary>
        [Column("EDRLMCTYPKEYID")]
        public int? McTypKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLOPTKEYID</para>
        /// Ref to operation type that this doc is to be shown for.
        /// </summary>
        [Column("EDRLOPTKEYID")]
        public int? OptKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLPACKKEYID</para>
        /// Ref to packing material that this doc is to be shown for.
        /// </summary>
        [Column("EDRLPACKKEYID")]
        public int? PackKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLPOSITION</para>
        /// If e.g. a product has 3 docs, then the position field indicate their display order. The 3 docs will have positions 0, 1 and 2. Users can of course change the display order.
        /// </summary>
        [Column("EDRLPOSITION")]
        [Required]
        public int Position { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLPREKEYID</para>
        /// Ref to program recipe that this doc is to be shown for.
        /// </summary>
        [Column("EDRLPREKEYID")]
        public int? PreKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLPRODKEYID</para>
        /// Ref to product that this doc is to be shown for.
        /// </summary>
        [Column("EDRLPRODKEYID")]
        public int? ProdKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLPROGKEYID</para>
        /// Ref to program that this doc is to be shown for.
        /// </summary>
        [Column("EDRLPROGKEYID")]
        public int? ProgKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLPROTKEYID</para>
        /// Ref to procedure type that this doc is to be shown for.
        /// </summary>
        [Column("EDRLPROTKEYID")]
        public int? ProtKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLSERIKEYID</para>
        /// Ref to serial number that this doc is to be shown for.
        /// </summary>
        [Column("EDRLSERIKEYID")]
        public int? SeriKeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCREFLINK.EDRLSUPPKEYID</para>
        /// Ref to supplier that this doc is to be shown for.
        /// </summary>
        [Column("EDRLSUPPKEYID")]
        public int? SuppKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: CustKeyId -> CustomerModel.KeyId (TEXTDOCREFLINK.EDRLCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(CustKeyId))]
        public CustomerModel Cust { get; set; }

        /// <summary>
        /// Reference to a DoctorModel instance.
        /// <para />
        /// Foreign key: DoctKeyId -> DoctorModel.KeyId (TEXTDOCREFLINK.EDRLDOCTKEYID -> TDOCTOR.DOCTKEYID)
        /// </summary>
        [ForeignKey(nameof(DoctKeyId))]
        public DoctorModel Doct { get; set; }

        /// <summary>
        /// Reference to a ExtDocRefInfoModel instance.
        /// <para />
        /// Foreign key: EDRIKeyId -> ExtDocRefInfoModel.KeyId (TEXTDOCREFLINK.EDRLEDRIKEYID -> TEXTDOCREFINFO.EDRIKEYID)
        /// </summary>
        [ForeignKey(nameof(EDRIKeyId))]
        public ExtDocRefInfoModel EDRI { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: ItemKeyId -> ItemModel.KeyId (TEXTDOCREFLINK.EDRLITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(ItemKeyId))]
        public ItemModel Item { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TEXTDOCREFLINK.EDRLLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a MachineModel instance.
        /// <para />
        /// Foreign key: MachKeyId -> MachineModel.KeyId (TEXTDOCREFLINK.EDRLMACHKEYID -> TMACHINE.MACHKEYID)
        /// </summary>
        [ForeignKey(nameof(MachKeyId))]
        public MachineModel Mach { get; set; }

        /// <summary>
        /// Reference to a MachineTypeModel instance.
        /// <para />
        /// Foreign key: McTypKeyId -> MachineTypeModel.KeyId (TEXTDOCREFLINK.EDRLMCTYPKEYID -> TMACHINT.MCTYPKEYID)
        /// </summary>
        [ForeignKey(nameof(McTypKeyId))]
        public MachineTypeModel McTyp { get; set; }

        /// <summary>
        /// Reference to a OperationTypeModel instance.
        /// <para />
        /// Foreign key: OptKeyId -> OperationTypeModel.KeyId (TEXTDOCREFLINK.EDRLOPTKEYID -> TOPTYPE.OPTKEYID)
        /// </summary>
        [ForeignKey(nameof(OptKeyId))]
        public OperationTypeModel Opt { get; set; }

        /// <summary>
        /// Reference to a PackingModel instance.
        /// <para />
        /// Foreign key: PackKeyId -> PackingModel.KeyId (TEXTDOCREFLINK.EDRLPACKKEYID -> TPACKING.PACKKEYID)
        /// </summary>
        [ForeignKey(nameof(PackKeyId))]
        public PackingModel Pack { get; set; }

        /// <summary>
        /// Reference to a ProductModel instance.
        /// <para />
        /// Foreign key: ProdKeyId -> ProductModel.KeyId (TEXTDOCREFLINK.EDRLPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [ForeignKey(nameof(ProdKeyId))]
        public ProductModel Prod { get; set; }

        /// <summary>
        /// Reference to a ProgramModel instance.
        /// <para />
        /// Foreign key: ProgKeyId -> ProgramModel.KeyId (TEXTDOCREFLINK.EDRLPROGKEYID -> TPROGRAM.PROGKEYID)
        /// </summary>
        [ForeignKey(nameof(ProgKeyId))]
        public ProgramModel Prog { get; set; }

        /// <summary>
        /// Reference to a SerialModel instance.
        /// <para />
        /// Foreign key: SeriKeyId -> SerialModel.KeyId (TEXTDOCREFLINK.EDRLSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [ForeignKey(nameof(SeriKeyId))]
        public SerialModel Seri { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: SuppKeyId -> SupplierModel.KeyId (TEXTDOCREFLINK.EDRLSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppKeyId))]
        public SupplierModel Supp { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TEXTDOCSTORE table.
    /// This table contains info on &#39;External document stores&#39;, also called &#39;Virtual document stores&#39;.
    /// A document store is simply a directory that the &#39;External document provider&#39; job in the jobserver has access to.
    /// </summary>
    [Table("TEXTDOCSTORE")]
    public class ExtDocStoreModel
    {
        /// <summary>
        /// <para>TEXTDOCSTORE.EDSKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("EDSKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TEXTDOCSTORE.EDSEXCLUDELIST</para>
        /// A list of filemasks indicating files that should NOT be listed. By default all executable file types are in the list (*.exe, *.bat, *.pif etc).
        /// </summary>
        [Column("EDSEXCLUDELIST")]
        public string ExcludeList { get; set; }

        /// <summary>
        /// <para>TEXTDOCSTORE.EDSINCLUDELIST</para>
        /// A list of filemasks indicating files that should NOT be listed. By default *.*
        /// </summary>
        [Column("EDSINCLUDELIST")]
        public string IncludeList { get; set; }

        /// <summary>
        /// <para>TEXTDOCSTORE.EDSNAME</para>
        /// Name of the document store.
        /// </summary>
        [Column("EDSNAME")]
        [Required, MaxLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TEXTDOCSTORE.EDSPATH</para>
        /// The directory of the document store.
        /// </summary>
        [Column("EDSPATH")]
        [Required, MaxLength(250)]
        public string Path { get; set; }
    }

    /// <summary>
    /// Model representing the TFACTORY table.
    /// This table is used to hold all the production places (ie. CSSD&#39;s) in the installation.
    ///
    /// A factory with KeyID=1 always exists since there would be no CSSD otherwise.
    ///
    /// *****************************************************************************
    /// WHEN CHANGING FIELDS REMEMBER TO UPDATE uInitTDOCDB.pas CheckDefaultFactory !
    /// *****************************************************************************
    /// </summary>
    [Table("TFACTORY")]
    public class FactoryModel
    {
        /// <summary>
        /// <para>TFACTORY.FACKEYID</para>
        /// The internal database KeyID.
        ///
        /// A factory with KeyID=1 always exists since there would be no CSSD otherwise.
        /// </summary>
        [Column("FACKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FAC_CREATED</para>
        /// </summary>
        [Column("FAC_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TFACTORY.FAC_CREATEDKEYID</para>
        /// </summary>
        [Column("FAC_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FAC_MODIFIED</para>
        /// </summary>
        [Column("FAC_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TFACTORY.FAC_MODIFIEDKEYID</para>
        /// </summary>
        [Column("FAC_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACADDRESS1</para>
        /// The address.
        /// </summary>
        [Column("FACADDRESS1")]
        [MaxLength(40)]
        public string Address1 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACADDRESS2</para>
        /// The address.
        /// </summary>
        [Column("FACADDRESS2")]
        [MaxLength(40)]
        public string Address2 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACALLOWSKIPCLEANANDTEST</para>
        /// Used for endoscopes.
        /// When true, it is not necessary to register clean and test for endoscopes.
        /// </summary>
        [Column("FACALLOWSKIPCLEANANDTEST")]
        [Required]
        public bool AllowSkipCleanAndTest { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACALLOWSKIPDISPATCH</para>
        /// Used for endoscopes.
        /// When true, it is not necessary to register dispatch for endoscopes.
        /// </summary>
        [Column("FACALLOWSKIPDISPATCH")]
        [Required]
        public bool AllowSkipDispatch { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACALLOWSKIPRETURN</para>
        /// Used for endoscopes.
        /// When true, it is not necessary to register return for endoscopes.
        /// </summary>
        [Column("FACALLOWSKIPRETURN")]
        [Required]
        public bool AllowSkipReturn { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACAUTOPLAYVIDEOS</para>
        /// The setting must have options &#39;T&#39;/&#39;F&#39; (default).
        /// If set to &#39;T&#39;, the Media player must autoplay videos in all T-DOC application for all users.
        /// If set to &#39;F&#39;, the Media player must not autoplay videos in any T-DOC application for any user.
        /// If allowed by Users setting &#39;Can change video autoplay&#39;, the user can overwrite the Factory setting on user level.
        /// </summary>
        [Column("FACAUTOPLAYVIDEOS")]
        [Required]
        public bool AutoPlayVideos { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACBIOID</para>
        /// </summary>
        [Column("FACBIOID")]
        [MaxLength(40)]
        public string Bioid { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACCALKEYID</para>
        /// A reference to the calendar. Calendar of work hours for the factory.
        /// </summary>
        [Column("FACCALKEYID")]
        public int? CalKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACCHARGEUSAGE</para>
        /// This code only takes effect when units are returned from a customer, sterile stock or the packing area with an error.
        /// In these cases the options on the error code determines who pays for the unit. This field controls how the &quot;Usage price&quot; that is part of the &quot;Total price&quot; is calculated.
        ///
        /// If true the customer or factory is charged the full amount of the products total price regardless of the DisposableUsed setting on the error code. However the NeedsWashing options is respected. (ie. The price of disposables is never deducted from the Usage price).
        ///
        /// If false the customer or factory is charged according to the DisposableUsed option. (ie. The price of disposables is deducted from the Usage price if the option is set).
        ///
        /// Wheather the customer of factory is charged is determined by the ChargeCustomer option on the error code.
        /// </summary>
        [Column("FACCHARGEUSAGE")]
        [Required]
        public bool ChargeUsage { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACCITY</para>
        /// The address.
        /// </summary>
        [Column("FACCITY")]
        [MaxLength(60)]
        public string City { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACCNTPSKEYID</para>
        /// </summary>
        [Column("FACCNTPSKEYID")]
        public int? CntpsKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACCOUNTRY</para>
        /// The address.
        /// </summary>
        [Column("FACCOUNTRY")]
        [MaxLength(40)]
        public string Country { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACCROSSREFVENDORKEYID</para>
        /// </summary>
        [Column("FACCROSSREFVENDORKEYID")]
        public int? CrossRefVendorKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACCUSTNAMEDISPLAY</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Name      = 0
        ///   ShortName = 1
        ///   Number    = 2
        /// ********************************************************************************
        /// </summary>
        [Column("FACCUSTNAMEDISPLAY")]
        [Required]
        public CustNameDisplay CustNameDisplay { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACCUSTORDACCEPTMODE</para>
        /// Determines if Customer orders are automatically accpeted when sent to the Factory.
        ///
        /// Possible value are:
        /// Off: Orders will have status New and must be manually accepted.
        /// Auto: Order will &quot;skip&quot; status New and immediately get status &quot;Accepted&quot;.
        ///
        ///   TFactoryCustOrderAcceptMode = (Off, Auto);
        /// </summary>
        [Column("FACCUSTORDACCEPTMODE")]
        public FactoryCustOrderAcceptMode? CustOrdAcceptMode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDECITEMSTOCKONPACK</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Off    = 0
        ///   Prompt = 1
        ///   On     = 2
        /// ********************************************************************************
        /// </summary>
        [Column("FACDECITEMSTOCKONPACK")]
        public DecNonDispItemStockOnPack? DecItemStockOnPack { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEDUCTITEMSFROMSTOCK</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   On  = 0
        ///   Off = 1
        /// ********************************************************************************
        /// </summary>
        [Column("FACDEDUCTITEMSFROMSTOCK")]
        [Required]
        public FacDeductItemsFromStockInOpType DeductItemsFromStock { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFADMINLOCAKEYID</para>
        /// The default Admin location for Admin position of the factory.
        /// </summary>
        [Column("FACDEFADMINLOCAKEYID")]
        public int? DefAdminLocaKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFAVGONSITESTORETIME</para>
        /// Average On-site storage time. This is the average time products are stored at the customer before they are used. The value is used in calculations where the operation the product is to be used for is unknown.
        /// The value can be overwritten at the Customer Site, Customer and Product levels.
        /// </summary>
        [Column("FACDEFAVGONSITESTORETIME")]
        public int? DefAvgOnSiteStoreTime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFAVGOPDURATION</para>
        /// Average Operation Duration. This is the average duration of a &quot;generic&quot; operation. The value is used where the operation the product is to be used for is unknown or where the duration of a known operation is unknown.
        /// The value can be overwritten at the Customer Site, Customer and Product levels.
        /// </summary>
        [Column("FACDEFAVGOPDURATION")]
        public int? DefAvgOpDuration { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFDISPATCHRESTRICT</para>
        /// </summary>
        [Column("FACDEFDISPATCHRESTRICT")]
        [Required]
        public int DefDispatchRestrict { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFITEMSHELVINGTIME</para>
        /// The time used to unpack and shelve Single Items after they have  been received from the Supplier.
        /// Stored in seconds.
        /// Can be overwritten at the Single Item level.
        /// </summary>
        [Column("FACDEFITEMSHELVINGTIME")]
        public int? DefItemShelvingTime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFITEMSTOKKEYID</para>
        /// </summary>
        [Column("FACDEFITEMSTOKKEYID")]
        public int? DefItemStokKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFMESPICKINGCAPACITY</para>
        /// Expected hourly picking capacity
        /// </summary>
        [Column("FACDEFMESPICKINGCAPACITY")]
        public int? DefMESPickingCapacity { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFMESRESVSTOKKEYID</para>
        /// Default automated reserved stock (articles are “moved” to this stock to indicate that they are reserved for automated picking)
        /// </summary>
        [Column("FACDEFMESRESVSTOKKEYID")]
        public int? DefMESResvStokKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFMESSTOKKEYID</para>
        /// Default automated picking stock
        /// </summary>
        [Column("FACDEFMESSTOKKEYID")]
        public int? DefMESStokKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFORDSUPPSTOKKEYID</para>
        /// Default Factory stock to assign to Customer Orders.
        /// This stock is used whenever a Customer Order is created and no other stock is specified at a &quot;lower&quot; level.
        ///
        /// If no value/stock is specified here then T-DOC will use the FACDEFITEMSTOKKEYID instead.
        ///
        /// Used in the following places:
        /// - When creating customer orders from order templates
        /// - Return Request and Reordering job
        /// - Operation ordering job
        /// </summary>
        [Column("FACDEFORDSUPPSTOKKEYID")]
        public int? DefOrdSuppStokKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFPRODTRACETYPE</para>
        /// </summary>
        [Column("FACDEFPRODTRACETYPE")]
        public FactoryDefProdTraceType? DefProdTraceType { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFPRODUCTSTOKKEYID</para>
        /// </summary>
        [Column("FACDEFPRODUCTSTOKKEYID")]
        public int? DefProductStokKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFSERIALDISPRESTRICT</para>
        /// </summary>
        [Column("FACDEFSERIALDISPRESTRICT")]
        public int? DefSerialDispRestrict { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFSUPPCALKEYID</para>
        /// A reference to the calendar. Default calendar of work hours for the all suppliers. This calendar is used when supplier does not have assigned own calendar (see TSUPPLIE.SuppCalKeyID).
        /// </summary>
        [Column("FACDEFSUPPCALKEYID")]
        public int? DefSuppCalKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFSUPPORDERDELTIME</para>
        /// The default time used by suppliers to transport the goods to the Factory. Used for all suppliers that do not have a specific value assigned.
        /// Value is stored in seconds.
        /// </summary>
        [Column("FACDEFSUPPORDERDELTIME")]
        public int? DefSuppOrderDelTime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFSUPPORDERHANDLTIME</para>
        /// The default time it takes to process and pick the order at suppliers. Used for all suppliers that do not have a specific value assigned.
        /// Value is stored in seconds.
        /// </summary>
        [Column("FACDEFSUPPORDERHANDLTIME")]
        public int? DefSuppOrderHandlTime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFSUPPORDERRAMPTIME</para>
        /// The default delivery time to RAMP. Used for all suppliers that do not have a specific value assigned.
        /// Value is stored in seconds.
        /// </summary>
        [Column("FACDEFSUPPORDERRAMPTIME")]
        public int? DefSuppOrderRampTime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFSUPPORDERTRANSTIME</para>
        /// The default time it takes to send a purchase order from a Factory to the Supplier. Used for all suppliers that do not have a specific value assigned.
        /// Value is stored in seconds.
        /// </summary>
        [Column("FACDEFSUPPORDERTRANSTIME")]
        public int? DefSuppOrderTransTime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDEFWPLANKEYID</para>
        /// Reference to the default Weight Plan for the Factory. If none is set then some preset defaults apply.
        /// </summary>
        [Column("FACDEFWPLANKEYID")]
        public int? DefWPlanKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDELADDRESS1</para>
        /// </summary>
        [Column("FACDELADDRESS1")]
        [MaxLength(40)]
        public string DelAddress1 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDELADDRESS2</para>
        /// </summary>
        [Column("FACDELADDRESS2")]
        [MaxLength(40)]
        public string DelAddress2 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDELCITY</para>
        /// </summary>
        [Column("FACDELCITY")]
        [MaxLength(60)]
        public string DelCity { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDELCOUNTRY</para>
        /// </summary>
        [Column("FACDELCOUNTRY")]
        [MaxLength(40)]
        public string DelCountry { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDELEMAIL</para>
        /// </summary>
        [Column("FACDELEMAIL")]
        [MaxLength(60)]
        public string DelEmail { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDELFAX</para>
        /// </summary>
        [Column("FACDELFAX")]
        [MaxLength(20)]
        public string DelFax { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDELPKEYID</para>
        /// A reference to the Delivery plan (for Transit products) used for this factory.
        /// Will be overridden if a Delivery plan is set on Customer site or Customer.
        ///
        /// See table TDeliveryPlan
        /// </summary>
        [Column("FACDELPKEYID")]
        public int? DelPKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDELTASCANMODE</para>
        /// OBSOLETE, field to be deleted in the future
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Delta = 0
        ///   Total = 1
        /// ********************************************************************************
        /// </summary>
        [Column("FACDELTASCANMODE")]
        public DeltaScanMode? DeltaScanMode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDELTELEPHONE</para>
        /// </summary>
        [Column("FACDELTELEPHONE")]
        [MaxLength(20)]
        public string DelTelephone { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACDROPITEMSUPPOPORDERS</para>
        /// If set to True then item supplier is disregarded and all items are ordered from the factory.
        /// </summary>
        [Column("FACDROPITEMSUPPOPORDERS")]
        public bool? DropItemSuppOpOrders { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACEMAIL</para>
        /// </summary>
        [Column("FACEMAIL")]
        [MaxLength(60)]
        public string Email { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACENDOCYCLETOCAB</para>
        /// The standard maximum time allowed to pass from an endoscope has been washed (process ended) to the endoscope is put into a drying cabinet.
        /// </summary>
        [Column("FACENDOCYCLETOCAB")]
        public int? EndoCycleToCab { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACENDODEFCABKEYID</para>
        /// </summary>
        [Column("FACENDODEFCABKEYID")]
        public int? EndoDefCabKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACENDODEFFSPLKEYID</para>
        /// </summary>
        [Column("FACENDODEFFSPLKEYID")]
        public int? EndoDefFSPlKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACENDODRYINGMODE</para>
        /// Controls if manual drying is allowed
        ///
        /// NotAllowed (0): Scopes must be scanned into a Drying cabinet before they can be used.
        ///
        /// Allowed (1): Control codes &quot;Start Manual drying&quot; and &quot;End manual drying&quot; indicates start/end of manual drying.
        ///
        /// Assumed (2): It is automatically assumed that scopes are manually dried. Approving the washer process will start the manual drying period. If a scope is scanned into a Drying cabinet then manual drying is &quot;cancelled&quot; and cabinet drying started.
        /// </summary>
        [Column("FACENDODRYINGMODE")]
        public ManualEndoDryingMode? Endodryingmode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACENDOHATKEYID</para>
        /// Reference to Handling type (Group of Handling steps), to be used for endoscopes
        /// </summary>
        [Column("FACENDOHATKEYID")]
        public int? EndoHaTKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACENDOSETIME</para>
        /// All expiry calculations are done on the basis of the &quot;Standard Endoscope Expiry time&quot; (SE Time). Measured in minutes.
        ///
        /// The SE Time is the maximum time allowed to pass between a scope becomes &quot;ready for use&quot; (i.e. dry) and the time of usage on a case/patient, provided that the scope is treated (handled, packaged and stored) in the &quot;Standard way&quot;.
        /// </summary>
        [Column("FACENDOSETIME")]
        public int? EndoSETime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACENDOSHELFDELAY</para>
        /// </summary>
        [Column("FACENDOSHELFDELAY")]
        public int? EndoShelfDelay { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACENDOSHELFRELTIME</para>
        /// </summary>
        [Column("FACENDOSHELFRELTIME")]
        public int? EndoShelfRelTime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACEQUIPMENTUSAGE</para>
        /// If true (and the license allows it) an extra tab called Equipment is displayed in the Serial number window.
        /// </summary>
        [Column("FACEQUIPMENTUSAGE")]
        [Required]
        public bool EquipmentUsage { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACEXPIRETYPE</para>
        /// Time driven
        /// Event driven
        /// Mixed   ??????????
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Normal = 0
        ///   None   = 1
        /// ********************************************************************************
        /// </summary>
        [Column("FACEXPIRETYPE")]
        [Required]
        public ExpireType Expiretype { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACFACRESTRICTMODE</para>
        /// When a factory restriction is violated T-DOC will react according to the current &quot;Factory restriction mode&quot;. This mode can be set at the system or factory level and has the following possible values:
        ///
        ///   { facrDefault : Use higher level setting (not valid at system level where it is
        ///                   translated to facrOn
        ///     facrOn      : All factory restrictions are in effect
        ///     facrWarning : Violating a factory restriction only results in a warning
        ///     facrOff     : No factory restrictions are in effect }
        ///   TFactoryRestrictionMode = (facrDefault, facrOn, facrWarning, facrOff);
        /// </summary>
        [Column("FACFACRESTRICTMODE")]
        public int? Facrestrictmode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACFACTORY</para>
        /// The identification of the factory (ie. number or such)
        /// </summary>
        [Column("FACFACTORY")]
        [Required, MaxLength(40)]
        public string Factory { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACFAX</para>
        /// </summary>
        [Column("FACFAX")]
        [MaxLength(20)]
        public string Fax { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACFIXEDPRICES</para>
        /// </summary>
        [Column("FACFIXEDPRICES")]
        [Required]
        public bool FixedPrices { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACFLAGS1</para>
        /// </summary>
        [Column("FACFLAGS1")]
        public int? Flags1 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACFLAGS2</para>
        /// </summary>
        [Column("FACFLAGS2")]
        public int? Flags2 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACFTMAXCODEDURATION</para>
        /// The maximum time a unit can be fast tracked due to a fast track code. If this time is exceeded than the fast track is ended with status Expired.
        ///
        /// The value is not considered an actual date and time, but a number of days, minutes and seconds.
        /// </summary>
        [Column("FACFTMAXCODEDURATION", TypeName = "datetime")]
        public DateTime? FTMaxCodeDuration { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACFTMAXPLANDURATION</para>
        /// The maximum time a unit can be fast tracked due to any single step in a fast track plan. If this time is exceeded then the fast track plan is ended with status Expired.
        ///
        /// The value is not considered an actual date and time, but a number of days, minutes and seconds.
        /// </summary>
        [Column("FACFTMAXPLANDURATION", TypeName = "datetime")]
        public DateTime? FTMaxPlanDuration { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACFTPLKEYID</para>
        /// Key ID of a permanently assigned Fast Track Plan.
        /// </summary>
        [Column("FACFTPLKEYID")]
        public int? FTPlKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACGUESTPROFKEYID</para>
        /// The profile users that log in to the factory as guests will be temporarilly assigned.
        ///
        /// If this field is null that effectively prevents guest logins to the factory.
        /// </summary>
        [Column("FACGUESTPROFKEYID")]
        public int? GuestprofKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACHOURCOSTS</para>
        /// The hourly rate charged to customers for work performed by the factory.
        /// </summary>
        [Column("FACHOURCOSTS", TypeName = "Money")]
        [Required]
        public decimal HourCosts { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACINCITEMSTOCKONPACK</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Off    = 0
        ///   Prompt = 1
        ///   On     = 2
        /// ********************************************************************************
        /// </summary>
        [Column("FACINCITEMSTOCKONPACK")]
        public IncNonDispItemStockOnPack? IncItemStockOnPack { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACINDICAPPROVELOCAKEYID</para>
        /// A reference to the location used for Units where the result of all their Indicators was Approved.
        /// </summary>
        [Column("FACINDICAPPROVELOCAKEYID")]
        public int? IndicApproveLocaKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACINDICDISAPPLOCAKEYID</para>
        /// A reference to the location used for Units where the result of one of their Indicators was Disapproved.
        /// </summary>
        [Column("FACINDICDISAPPLOCAKEYID")]
        public int? IndicDisappLocaKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACINDICPENDINGLOCAKEYID</para>
        /// A reference to the location used for Units where the result of an Indicator is pending.
        /// </summary>
        [Column("FACINDICPENDINGLOCAKEYID")]
        public int? IndicPendingLocaKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACINVOICELOCKTIME</para>
        /// This value is set whenever an invoice report or export is made coverring a date late that the value it already holds.
        ///
        /// Records MUST NEVER be inserted in TTransAc with a TrnsTime value before this time. Take this into account when transferring records from both TCustInv and TRepair.
        /// </summary>
        [Column("FACINVOICELOCKTIME", TypeName = "datetime")]
        public DateTime? InvoiceLocktime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACITEMALTPRICEMODE</para>
        /// </summary>
        [Column("FACITEMALTPRICEMODE")]
        public ItemAltPricingMode? ItemAltPriceMode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACITEMDISPALTPRICEMODE</para>
        /// </summary>
        [Column("FACITEMDISPALTPRICEMODE")]
        public ItemAltPricingMode? ItemDispAltPriceMode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACITEMDISPPRICEMODE</para>
        /// </summary>
        [Column("FACITEMDISPPRICEMODE")]
        public ItemPricingMode? ItemDispPriceMode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACITEMPRICEMODE</para>
        /// </summary>
        [Column("FACITEMPRICEMODE")]
        public ItemPricingMode? ItemPriceMode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACLOADNUMBERUSAGE</para>
        /// </summary>
        [Column("FACLOADNUMBERUSAGE")]
        [Required]
        public int LoadnumberUsage { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACMINORDERLEADTIME</para>
        /// The minimum order lead time. Specified in minutes.
        /// </summary>
        [Column("FACMINORDERLEADTIME")]
        public int? MinOrderLeadTime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACMINORDLEADTIMEMODE</para>
        /// The value determines how Minimum Order Lead Time specified on Factory, Customer Site, Customer and Operation Type should be interpreted.
        ///
        /// It indicates if the lead time represents &quot;work time&quot; (i.e. factory opening hours) or actual time.
        ///
        /// Possible values are:
        /// 0 = An absolute amount of minutes backward from the requested delivery time/start time.
        /// 1 = The amount of &quot;work time minutes&quot; backward from the requested delivery time/start time. &quot;Work time minutes&quot; are the minutes the Factory delivering the order is &quot;open&quot; according to its calendar definition.
        ///
        /// The value is an enumeration represented by TMinOrderLeadTime
        /// (Actual, Work) defined in TDConst.
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Actual = 0
        ///   Work   = 1
        /// ********************************************************************************
        /// </summary>
        [Column("FACMINORDLEADTIMEMODE")]
        public MinOrderLeadTime? MinOrderLeadTimeMode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACMONEYROUNDING</para>
        /// </summary>
        [Column("FACMONEYROUNDING")]
        [Required]
        public double MoneyRounding { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACNAME</para>
        /// The name of the factory.
        /// </summary>
        [Column("FACNAME")]
        [Required, MaxLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACORDERBOOKINGMODE</para>
        /// Holds order booking mode for the factory
        ///
        ///   0 (Disabled)   - Disabled: Disables all bookings/reservations for orders supplied by the factory. This is the same as not having the module. (Default value).
        ///   1 (Manual)     - Manual: Bookings must be manually invoked for each order where booking is possible.
        ///   2 (Automation) - Automatic: Bookings are automatically created for all orders where booking is possible.
        ///
        /// The values &quot;Manual&quot; and &quot;Automatic&quot; can be overwritten at the customer level. See field TCUST.CUSTORDERBOOKINGMODE.
        /// </summary>
        [Column("FACORDERBOOKINGMODE")]
        public FacOrderBookingMode? OrderBookingMode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACPREDISPATCH</para>
        /// </summary>
        [Column("FACPREDISPATCH")]
        [Required]
        public bool PreDispatch { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACREFNO</para>
        /// </summary>
        [Column("FACREFNO")]
        [Required]
        public int RefNo { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACREMARK</para>
        /// Any remarks concerning the factory.
        /// </summary>
        [Column("FACREMARK")]
        public string Remark { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACREPAIRERROR</para>
        /// </summary>
        [Column("FACREPAIRERROR")]
        public int? RepairError { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACREPAIRMODE</para>
        /// The value in this field determines who repairs conducted at this factory should be invoiced to as a general rule.
        ///
        /// Currently the possible values are the following rpmoXXX values from TDConst:
        /// AskUser
        /// UsingCust
        /// Owner
        /// Factory
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   AskUser   = 0
        ///   UsingCust = 1
        ///   Owner     = 2
        ///   Factory   = 3
        /// ********************************************************************************
        /// </summary>
        [Column("FACREPAIRMODE")]
        [Required]
        public RepairMode Repairmode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSBFTALLSTOCKS</para>
        /// This field determines if unit list, that are processing in Stock Based Fast Tracking functionality, should be filtered by selected stocks list (taken from TFactoryAutoFTStocks).
        /// The default is True.
        /// </summary>
        [Column("FACSBFTALLSTOCKS")]
        [Required]
        public bool SBFTAllStocks { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSBFTBLOCKSTARTEDOP</para>
        /// This field determines if Customer Orders that ARE linked to an operation should be excluded/blocked in Stock Based fast tracking when the operation has already been started.
        /// The default is True.
        /// </summary>
        [Column("FACSBFTBLOCKSTARTEDOP")]
        [Required]
        public bool SBFTBlockStartedOp { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSBFTDISPATCHEDLGRPKEYID</para>
        /// Location group reference.
        /// </summary>
        [Column("FACSBFTDISPATCHEDLGRPKEYID")]
        public int? SBFTDispatchedLGrpKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSBFTESCFTCOKEYID</para>
        /// Escalation Fast Track Code: Allows to specify a fast track code (cannot be the same as the one specified in the existing &quot;Fast Track code&quot; field)
        /// If a code is specifed here then a value must also be specified in FACSBFTESCTIME.
        /// </summary>
        [Column("FACSBFTESCFTCOKEYID")]
        public int? SBFTEscFTCoKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSBFTESCTIME</para>
        /// Escalation time: A timeframe specified in hours/minutes.
        /// Default is 4 hours.
        /// Only enabled if a fast track code is specified in FACSBFTESCFTCOKEYID. Else NULL.
        /// </summary>
        [Column("FACSBFTESCTIME")]
        public int? SBFTEscTime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSBFTFTCOKEYID</para>
        /// Links to a Fast Track Code. This code is the code that will be used to fast track Units based on Stock levels and accepted orders.
        /// The value MUST be set if FACSBFTMODE = ftsbmEnabled.
        /// </summary>
        [Column("FACSBFTFTCOKEYID")]
        public int? SBFTFTCoKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSBFTMAXDELTIME</para>
        /// The time before a Customer Orders requested delivery time the order will come into consideration for Stock Based fast tracking.
        /// The value is stored in minutes.
        /// The default is 4*60 (if set to 0 all orders, not matter how far into the future, will be included).
        /// The value cannot be negative.
        ///
        /// The user should be able to select hours and minutes. This is not a &quot;time of day&quot; but &quot;length of time&quot;. So it should be possible to select 35 hours and 35 minutes for example.
        /// There is no maximum on number of hours. Minimum is 0. Minutes are of course 0..59.
        /// </summary>
        [Column("FACSBFTMAXDELTIME")]
        public int? SBFTMaxDelTime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSBFTMINDELTIME</para>
        /// The time that must remain prior to a Customer Orders requested delivery time in order for it to come into consideration for Stock Based fast tracking. Typically set to the minimum time the Factory must have in order to deliver any Customer Order.
        /// The value is stored in minutes.
        /// The default is 0.
        /// The value can be negative. If negative it means time added to the requested delivery time.
        ///
        /// The user should be able to select hours and minutes. This is not a &quot;time of day&quot; but &quot;length of time&quot;. So it should be possible to select 35 hours and 35 minutes for example.
        /// There is no maximum on number of hours. Minimum is 0. Minutes are of course 0..59.
        /// </summary>
        [Column("FACSBFTMINDELTIME")]
        public int? SBFTMinDelTime { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSBFTMODE</para>
        /// This field determines what type of Stock Based fast tracking is in effect. The values are enums based on TFastTrackStockBasedMode. The default value is Disabled.
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Disabled = 0
        ///   Enabled  = 1
        /// ********************************************************************************
        ///
        /// Disabled = Disabled
        /// Enabled = Enabled
        /// </summary>
        [Column("FACSBFTMODE")]
        public FastTrackStockBasedMode? SBFTMode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSBFTORDERSFILTER</para>
        /// This field determines what customer orders should be taken into consideration when calculating the Stock Based fast tracking needs. The values are enums based on TFastTrackStockBasedOrdersFilter.
        /// The default is AllWithDate.
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   AllWithDate = 0
        ///   Operation   = 1
        /// ********************************************************************************
        ///
        /// AllWithDate = All orders with delivery date
        /// Operation = Only orders linked to operation
        /// </summary>
        [Column("FACSBFTORDERSFILTER")]
        public FastTrackStockBasedOrdersFilter? SBFTOrdersFilter { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSEALCOUNT</para>
        /// Default number of sealings for packing materials in this factory. Default value is 1.
        /// </summary>
        [Column("FACSEALCOUNT")]
        public int? SealCount { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSEALPRINT</para>
        /// Default print options for sealings for packing materials in this factory.
        /// </summary>
        [Column("FACSEALPRINT")]
        [MaxLength(100)]
        public string SealPrint { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSETWEIGHTUSAGE</para>
        /// </summary>
        [Column("FACSETWEIGHTUSAGE")]
        [Required]
        public bool Setweightusage { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSHORTNAME</para>
        /// </summary>
        [Column("FACSHORTNAME")]
        [MaxLength(40)]
        public string Shortname { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSTATUS</para>
        /// </summary>
        [Column("FACSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSTGRKEYID</para>
        /// </summary>
        [Column("FACSTGRKEYID")]
        public int? StgrKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSUAMATCHCONDITIONS</para>
        /// Used for second user approval (hence the SUA in field name)
        /// Determines if user and product complecity are and&#39;ed or or&#39;ed.
        /// 0: Just one of the complexity settings causes second user approval
        /// 1: Both complexity settings must be fulfilled
        /// Translation = &quot;Match conditions&quot;
        /// </summary>
        [Column("FACSUAMATCHCONDITIONS")]
        public int? SUAMatchConditions { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSUAMAXUSERCOMPLEXITY</para>
        /// Used for second user approval (hence the SUA in field name)
        /// Maximun user complexity for second user approval when packing
        /// Translation = &quot;Max. User complexity&quot;
        /// </summary>
        [Column("FACSUAMAXUSERCOMPLEXITY")]
        public int? SUAMaxUserComplexity { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSUAMINPRODCOMPLEXITY</para>
        /// Used for second user approval (hence the SUA in field name)
        /// Minimum product complexity for second user approval when packing
        /// Translation = &quot;Min. Product complexity&quot;
        /// </summary>
        [Column("FACSUAMINPRODCOMPLEXITY")]
        public int? SUAMinProdComplexity { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACSUAREQPRODTYPE</para>
        /// Used for second user approval (hence the SUA in field name)
        /// What types of products that will have second user approval (Trays/single packs/endoscopes)
        /// Translation = &quot;Required for products&quot;
        /// </summary>
        [Column("FACSUAREQPRODTYPE")]
        public int? SUAReqProdType { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACTELEPHONE</para>
        /// </summary>
        [Column("FACTELEPHONE")]
        [MaxLength(20)]
        public string Telephone { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACTRACESTOKKEYID</para>
        /// </summary>
        [Column("FACTRACESTOKKEYID")]
        public int? TraceStokKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACTRANSITSTOKKEYID</para>
        /// </summary>
        [Column("FACTRANSITSTOKKEYID")]
        public int? TransitStokKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACTRGRPKEYID</para>
        /// </summary>
        [Column("FACTRGRPKEYID")]
        public int? TRGrpKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACTYPE</para>
        /// - reserved for future use -
        /// </summary>
        [Column("FACTYPE")]
        [Required]
        public int Type { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF01</para>
        /// These fields can be used to store any information and the user can define their &quot;public&quot; names.
        /// The user defined field names for these fields are stored in TDEFAULT with a # in front of the fieldname and DEFUSERKEYID is always 0.
        /// </summary>
        [Column("FACUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF02</para>
        /// </summary>
        [Column("FACUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF03</para>
        /// </summary>
        [Column("FACUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF04</para>
        /// </summary>
        [Column("FACUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF05</para>
        /// </summary>
        [Column("FACUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF06</para>
        /// </summary>
        [Column("FACUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF07</para>
        /// </summary>
        [Column("FACUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF08</para>
        /// </summary>
        [Column("FACUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF09</para>
        /// </summary>
        [Column("FACUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF10</para>
        /// </summary>
        [Column("FACUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF11</para>
        /// </summary>
        [Column("FACUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF12</para>
        /// </summary>
        [Column("FACUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF13</para>
        /// </summary>
        [Column("FACUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF14</para>
        /// </summary>
        [Column("FACUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF15</para>
        /// </summary>
        [Column("FACUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF16</para>
        /// </summary>
        [Column("FACUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF17</para>
        /// </summary>
        [Column("FACUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF18</para>
        /// </summary>
        [Column("FACUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF19</para>
        /// </summary>
        [Column("FACUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUF20</para>
        /// </summary>
        [Column("FACUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUISTARTMODE</para>
        /// Determines how the Scanner Client will look when started and when a new user logs in.
        ///
        /// Possible values:
        ///   0=Default(Use System setting)
        ///   1=UI Layer Mode
        ///   2=Grid mode
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Default = 0
        ///   Layers  = 1
        ///   Grid    = 2
        /// ********************************************************************************
        /// </summary>
        [Column("FACUISTARTMODE")]
        public ScanUIStartMode? UIStartMode { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUSECOLORFIELDS</para>
        /// If true a field is shown in some windows, such as customers and products, where a color combination can be specified.
        /// The color combination can be used to identify the entity.
        /// </summary>
        [Column("FACUSECOLORFIELDS")]
        [Required]
        public bool UseColorFields { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUSEDISPSTOCKONPACK</para>
        /// If True then the &quot;On stock&quot; count of disposable items is reduced from the locations comsumalbe stock when products are packed.
        /// </summary>
        [Column("FACUSEDISPSTOCKONPACK")]
        [Required]
        public bool Usedispstockonpack { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACUSENTLOGIN</para>
        /// </summary>
        [Column("FACUSENTLOGIN")]
        public int? UseNTLogin { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACWEBITEMLOCATORCOLUMNS</para>
        /// Setting to allow changing list of columns in the Item Locator frame.
        /// </summary>
        [Column("FACWEBITEMLOCATORCOLUMNS")]
        public string Webitemlocatorcolumns { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACWEBLOCAKEYID</para>
        /// Link to a location which web access must use.
        /// </summary>
        [Column("FACWEBLOCAKEYID")]
        public int? WebLocaKeyId { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACWEBORDERINITSTATUS</para>
        /// Initial state for orders received from Web:
        ///   2=New (ossOrder)
        ///   3=Accepted (ossAccepted)
        /// </summary>
        [Column("FACWEBORDERINITSTATUS")]
        public int? WebOrderInitStatus { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACWEBPRODLOCATORCOLUMNS</para>
        /// Setting to allow changing list of columns in the Product Locator frame.
        /// </summary>
        [Column("FACWEBPRODLOCATORCOLUMNS")]
        public string Webprodlocatorcolumns { get; set; }

        /// <summary>
        /// <para>TFACTORY.FACWEBSITE</para>
        /// </summary>
        [Column("FACWEBSITE")]
        [MaxLength(60)]
        public string Website { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TFACTORY.FAC_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: CrossRefVendorKeyId -> SupplierModel.KeyId (TFACTORY.FACCROSSREFVENDORKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(CrossRefVendorKeyId))]
        public SupplierModel CrossRefVendor { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: DefAdminLocaKeyId -> LocationModel.KeyId (TFACTORY.FACDEFADMINLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(DefAdminLocaKeyId))]
        public LocationModel DefAdminLoca { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: DefItemStokKeyId -> StocksModel.KeyId (TFACTORY.FACDEFITEMSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(DefItemStokKeyId))]
        public StocksModel DefItemStok { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: DefMESResvStokKeyId -> StocksModel.KeyId (TFACTORY.FACDEFMESRESVSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(DefMESResvStokKeyId))]
        public StocksModel DefMESResvStok { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: DefMESStokKeyId -> StocksModel.KeyId (TFACTORY.FACDEFMESSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(DefMESStokKeyId))]
        public StocksModel DefMESStok { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: DefOrdSuppStokKeyId -> StocksModel.KeyId (TFACTORY.FACDEFORDSUPPSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(DefOrdSuppStokKeyId))]
        public StocksModel DefOrdSuppStok { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: DefProductStokKeyId -> StocksModel.KeyId (TFACTORY.FACDEFPRODUCTSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(DefProductStokKeyId))]
        public StocksModel DefProductStok { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: EndoDefCabKeyId -> StocksModel.KeyId (TFACTORY.FACENDODEFCABKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(EndoDefCabKeyId))]
        public StocksModel EndoDefCab { get; set; }

        /// <summary>
        /// Reference to a FastTrackPlanModel instance.
        /// <para />
        /// Foreign key: FTPlKeyId -> FastTrackPlanModel.KeyId (TFACTORY.FACFTPLKEYID -> TFASTTRACKPLAN.FTPLKEYID)
        /// </summary>
        [ForeignKey(nameof(FTPlKeyId))]
        public FastTrackPlanModel FTPl { get; set; }

        /// <summary>
        /// Reference to a ProfileModel instance.
        /// <para />
        /// Foreign key: GuestprofKeyId -> ProfileModel.KeyId (TFACTORY.FACGUESTPROFKEYID -> TPROFILE.PROFKEYID)
        /// </summary>
        [ForeignKey(nameof(GuestprofKeyId))]
        public ProfileModel Guestprof { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: IndicApproveLocaKeyId -> LocationModel.KeyId (TFACTORY.FACINDICAPPROVELOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(IndicApproveLocaKeyId))]
        public LocationModel IndicApproveLoca { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: IndicDisappLocaKeyId -> LocationModel.KeyId (TFACTORY.FACINDICDISAPPLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(IndicDisappLocaKeyId))]
        public LocationModel IndicDisappLoca { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: IndicPendingLocaKeyId -> LocationModel.KeyId (TFACTORY.FACINDICPENDINGLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(IndicPendingLocaKeyId))]
        public LocationModel IndicPendingLoca { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TFACTORY.FAC_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: RepairError -> TextModel.Number (TFACTORY.FACREPAIRERROR -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(RepairError))]
        public TextModel RepairErrorText { get; set; }

        /// <summary>
        /// Reference to a FastTrackCodeModel instance.
        /// <para />
        /// Foreign key: SBFTEscFTCoKeyId -> FastTrackCodeModel.KeyId (TFACTORY.FACSBFTESCFTCOKEYID -> TFASTTRACKCODE.FTCOKEYID)
        /// </summary>
        [ForeignKey(nameof(SBFTEscFTCoKeyId))]
        public FastTrackCodeModel SBFTEscFTCo { get; set; }

        /// <summary>
        /// Reference to a FastTrackCodeModel instance.
        /// <para />
        /// Foreign key: SBFTFTCoKeyId -> FastTrackCodeModel.KeyId (TFACTORY.FACSBFTFTCOKEYID -> TFASTTRACKCODE.FTCOKEYID)
        /// </summary>
        [ForeignKey(nameof(SBFTFTCoKeyId))]
        public FastTrackCodeModel SBFTFTCo { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: TraceStokKeyId -> StocksModel.KeyId (TFACTORY.FACTRACESTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(TraceStokKeyId))]
        public StocksModel TraceStok { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: TransitStokKeyId -> StocksModel.KeyId (TFACTORY.FACTRANSITSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(TransitStokKeyId))]
        public StocksModel TransitStok { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: WebLocaKeyId -> LocationModel.KeyId (TFACTORY.FACWEBLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(WebLocaKeyId))]
        public LocationModel WebLoca { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of LocationModel instances.
        /// <para />
        /// Foreign key: LocationModel.FacKeyId -> KeyId (TLOCATIO.LOCAFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [InverseProperty("Fac")]
        public List<LocationModel> FacLocationList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitModel instances.
        /// <para />
        /// Foreign key: UnitModel.FacKeyId -> KeyId (TUNIT.UNITFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [InverseProperty("Fac")]
        public List<UnitModel> FacUnitList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.OrgInvRefFacKeyId -> KeyId (TORDER.ORDORGINVREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [InverseProperty("OrgInvRefFac")]
        public List<OrderModel> OrgInvRefFacOrderList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.OrgRefFacKeyId -> KeyId (TORDER.ORDORGREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [InverseProperty("OrgRefFac")]
        public List<OrderModel> OrgRefFacOrderList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderTemplateModel instances.
        /// <para />
        /// Foreign key: OrderTemplateModel.OrgRefFacKeyId -> KeyId (TORDERTP.ORDTPORGREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [InverseProperty("OrgRefFac")]
        public List<OrderTemplateModel> OrgRefFacOrderTemplateList { get; set; }

        /// <summary>
        /// Reference to a collection of StocksModel instances.
        /// <para />
        /// Foreign key: StocksModel.RefFacKeyId -> KeyId (TSTOCKS.STOKREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [InverseProperty("RefFac")]
        public List<StocksModel> RefFacStocksList { get; set; }

        /// <summary>
        /// Reference to a collection of OperationDataModel instances.
        /// <para />
        /// Foreign key: OperationDataModel.SuppFacKeyId -> KeyId (TOPDATA.OPDSUPPFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [InverseProperty("SuppFac")]
        public List<OperationDataModel> SuppFacOperationDataList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.SuppRefFacKeyId -> KeyId (TORDER.ORDSUPPREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [InverseProperty("SuppRefFac")]
        public List<OrderModel> SuppRefFacOrderList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderTemplateModel instances.
        /// <para />
        /// Foreign key: OrderTemplateModel.SuppRefFacKeyId -> KeyId (TORDERTP.ORDTPSUPPREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [InverseProperty("SuppRefFac")]
        public List<OrderTemplateModel> SuppRefFacOrderTemplateList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TFACCUST table.
    /// </summary>
    [Table("TFACCUST")]
    public class FactoryCustomersModel
    {
        /// <summary>
        /// <para>TFACCUST.FCCUSTCUSTKEYID</para>
        /// Ref to the customer data (TCust).
        /// </summary>
        [Column("FCCUSTCUSTKEYID")]
        [Required]
        public int CustKeyId { get; set; }

        /// <summary>
        /// <para>TFACCUST.FCCUSTFACKEYID</para>
        /// Ref to the factory data (TFactory).
        /// </summary>
        [Column("FCCUSTFACKEYID")]
        [Required]
        public int FacKeyId { get; set; }

        /// <summary>
        /// <para>TFACCUST.FCCUSTPRIMARY</para>
        /// If True it means the factory is primary for the customer
        /// </summary>
        [Column("FCCUSTPRIMARY")]
        [Required]
        public bool Primary { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: CustKeyId -> CustomerModel.KeyId (TFACCUST.FCCUSTCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(CustKeyId))]
        public CustomerModel Cust { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TFACCUST.FCCUSTFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TFACSTDCOMMENT table.
    /// </summary>
    [Table("TFACSTDCOMMENT")]
    public class FactoryStandardCommentModel
    {
        /// <summary>
        /// <para>TFACSTDCOMMENT.FCSTDCFACKEYID</para>
        /// Ref to the factory data (TFactory).
        /// </summary>
        [Column("FCSTDCFACKEYID")]
        [Required]
        public int FacKeyId { get; set; }

        /// <summary>
        /// <para>TFACSTDCOMMENT.FCSTDCPPRIMARY</para>
        /// If True it means the factory is primary for the standard commnet
        /// </summary>
        [Column("FCSTDCPPRIMARY")]
        [Required]
        public bool Primary { get; set; }

        /// <summary>
        /// <para>TFACSTDCOMMENT.FCSTDCSTDCOMKEYID</para>
        /// Ref to the standard comment data (TStandardComment).
        /// </summary>
        [Column("FCSTDCSTDCOMKEYID")]
        [Required]
        public int StdComKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TFACSTDCOMMENT.FCSTDCFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a StandardCommentModel instance.
        /// <para />
        /// Foreign key: StdComKeyId -> StandardCommentModel.KeyId (TFACSTDCOMMENT.FCSTDCSTDCOMKEYID -> TSTANDARDCOMMENT.STDCOMKEYID)
        /// </summary>
        [ForeignKey(nameof(StdComKeyId))]
        public StandardCommentModel StdCom { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TFACUSER table.
    /// </summary>
    [Table("TFACUSER")]
    public class FactoryUsersModel
    {
        /// <summary>
        /// <para>TFACUSER.FCUSERFACKEYID</para>
        /// </summary>
        [Column("FCUSERFACKEYID")]
        [Required]
        public int FacKeyId { get; set; }

        /// <summary>
        /// <para>TFACUSER.FCUSERPRIMARY</para>
        /// </summary>
        [Column("FCUSERPRIMARY")]
        [Required]
        public bool Primary { get; set; }

        /// <summary>
        /// <para>TFACUSER.FCUSERUSEGUESTPROFILE</para>
        /// </summary>
        [Column("FCUSERUSEGUESTPROFILE")]
        [Required]
        public bool Useguestprofile { get; set; }

        /// <summary>
        /// <para>TFACUSER.FCUSERUSERKEYID</para>
        /// </summary>
        [Column("FCUSERUSERKEYID")]
        [Required]
        public int UserKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TFACUSER.FCUSERFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: UserKeyId -> UserModel.KeyId (TFACUSER.FCUSERUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(UserKeyId))]
        public UserModel User { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TFASTTRACKCODE table.
    /// Holds information about fast track codes.
    /// A fast track code has conditions for when fast tracking must start and end for a unit.
    /// </summary>
    [Table("TFASTTRACKCODE")]
    public class FastTrackCodeModel
    {
        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("FTCOKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCO_CREATED</para>
        /// </summary>
        [Column("FTCO_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCO_CREATEDKEYID</para>
        /// </summary>
        [Column("FTCO_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCO_MODIFIED</para>
        /// </summary>
        [Column("FTCO_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCO_MODIFIEDKEYID</para>
        /// </summary>
        [Column("FTCO_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOCODE</para>
        /// The number/ID of the Code
        /// </summary>
        [Column("FTCOCODE")]
        [Required, MaxLength(40)]
        public string Code { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCODESCR</para>
        /// The description of the code.
        /// </summary>
        [Column("FTCODESCR")]
        public string Descr { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCODISPLAYMODE</para>
        /// Determines how the fast track notification should be displayed.
        /// Valid values are:
        /// PromptForced
        /// NoPromptForced
        /// UseUserSetting****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   UserSetting   = 0
        ///   ForcePrompt   = 1
        ///   ForceNoPrompt = 2
        /// ********************************************************************************
        /// </summary>
        [Column("FTCODISPLAYMODE")]
        public FastTrackDisplayMode? DisplayMode { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOENDLOGRPKEYID</para>
        /// KeyID of a location group. When a unit having this code is scanned at one of the locations in the group, fast tracking will end.
        /// </summary>
        [Column("FTCOENDLOGRPKEYID")]
        public int? EndLoGrpKeyId { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOENDSTATUS</para>
        /// A unit status.
        /// When a unit having this FT code get this status, fast tracking will end.
        /// </summary>
        [Column("FTCOENDSTATUS")]
        public int? EndStatus { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOENDTIME</para>
        /// In conjunction with start time, end time determines a time range that fast tracking is allowed to start for a unit, when it has this fast track code. It is the fast track monitor job that checks if fast tracking should be started for a unit, when these two fields have values.
        ///
        /// The date part of StartTime and EndTime are not used.
        /// </summary>
        [Column("FTCOENDTIME", TypeName = "datetime")]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOINVOICEITEMKEYID</para>
        /// A link to the Item in TITEM that will be used to put on the invoice/delivery note when charging for the fast track.
        /// </summary>
        [Column("FTCOINVOICEITEMKEYID")]
        public int? InvoiceItemKeyId { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOINVOICEPRICE</para>
        /// If set this price will be used as the price for the fast track. If not set (NULL) then the Sales Price of the item in FTCOINVOICEITEMKEYID is used.
        /// </summary>
        [Column("FTCOINVOICEPRICE", TypeName = "Money")]
        public decimal? InvoicePrice { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOINVOICETO</para>
        /// An enumerated value specifying who to invoice. The following values are valid:
        /// 0 = None. Invoicing does not take place.
        /// 1 = Factory. The factory where the rule is applied.
        /// 2 = The customer the unit is delivered to.****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None     = 0
        ///   Factory  = 1
        ///   Customer = 2
        /// ********************************************************************************
        /// </summary>
        [Column("FTCOINVOICETO")]
        [Required]
        public FastTrackInvoiceType InvoiceTo { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOINVOICEWITHUNIT</para>
        /// If True then the fast tracking is invoiced at the same time as the unit.
        /// This field is only relevant when FTCOINVOICETO equals 2 (customer). For all other values the field is ignored.
        /// </summary>
        [Column("FTCOINVOICEWITHUNIT")]
        [Required]
        public bool InvoiceWithUnit { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCONAME</para>
        /// The name of the code.
        /// </summary>
        [Column("FTCONAME")]
        [Required, MaxLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOPRIORITY</para>
        /// The priority of the code. The higher the number the LOWER the priority.
        /// </summary>
        [Column("FTCOPRIORITY")]
        [Required]
        public int Priority { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOSTARTLOGRPKEYID</para>
        /// KeyID of a location group. When a unit having this code is scanned at one of the locations in the group, fast tracking will start.
        /// </summary>
        [Column("FTCOSTARTLOGRPKEYID")]
        public int? StartLoGrpKeyId { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOSTARTSTATUS</para>
        /// A unit status.
        /// When a unit having this FT code get this status, fast tracking will start.
        /// </summary>
        [Column("FTCOSTARTSTATUS")]
        public int? StartStatus { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOSTARTTIME</para>
        /// In conjunction with end time, start time determines a time range that fast tracking is allowed to start for a unit, when it has this fast track code. It is the fast track monitor job that checks if fast tracking should be started for a unit, when these two fields have values.
        ///
        /// The date part of StartTime and EndTime are not used.
        /// </summary>
        [Column("FTCOSTARTTIME", TypeName = "datetime")]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOSTATUS</para>
        /// Normal or Omitted.
        /// </summary>
        [Column("FTCOSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOTYPE</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   General      = 0
        ///   AdHoc        = 1
        ///   TemplateOnly = 2
        /// ********************************************************************************
        /// </summary>
        [Column("FTCOTYPE")]
        [Required]
        public FastTrackCodeType Type { get; set; }

        /// <summary>
        /// <para>TFASTTRACKCODE.FTCOWEEKDAYS</para>
        /// Holds a bitmask for weekdays, where the start and end times applies
        /// </summary>
        [Column("FTCOWEEKDAYS")]
        public int? Weekdays { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TFASTTRACKCODE.FTCO_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: InvoiceItemKeyId -> ItemModel.KeyId (TFASTTRACKCODE.FTCOINVOICEITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(InvoiceItemKeyId))]
        public ItemModel InvoiceItem { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TFASTTRACKCODE.FTCO_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of UnitFastTrackModel instances.
        /// <para />
        /// Foreign key: UnitFastTrackModel.FTCoKeyId -> KeyId (TUNITFASTTRACK.UFTFTCOKEYID -> TFASTTRACKCODE.FTCOKEYID)
        /// </summary>
        [InverseProperty("FTCo")]
        public List<UnitFastTrackModel> FTCoUnitFastTrackList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TFASTTRACKPLAN table.
    /// Holds fast track plans.
    /// A plan consist of several steps, each describing start and end of fast track.
    /// </summary>
    [Table("TFASTTRACKPLAN")]
    public class FastTrackPlanModel
    {
        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPLKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("FTPLKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPL_CREATED</para>
        /// </summary>
        [Column("FTPL_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPL_CREATEDKEYID</para>
        /// </summary>
        [Column("FTPL_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPL_MODIFIED</para>
        /// </summary>
        [Column("FTPL_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPL_MODIFIEDKEYID</para>
        /// </summary>
        [Column("FTPL_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPLDESCR</para>
        /// The description of the plan.
        /// </summary>
        [Column("FTPLDESCR")]
        public string Descr { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPLDISPLAYMODE</para>
        /// Determines how the fast track notification should be displayed.
        /// Valid values are:
        /// PromptForced
        /// NoPromptForced
        /// UseUserSetting****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   UserSetting   = 0
        ///   ForcePrompt   = 1
        ///   ForceNoPrompt = 2
        /// ********************************************************************************
        /// </summary>
        [Column("FTPLDISPLAYMODE")]
        public FastTrackDisplayMode? DisplayMode { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPLINVOICEITEMKEYID</para>
        /// A link to the Item in TITEM that will be used to put on the invoice/delivery note when charging for the fast track.
        /// </summary>
        [Column("FTPLINVOICEITEMKEYID")]
        public int? InvoiceItemKeyId { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPLINVOICEPRICE</para>
        /// If set this price will be used as the price for the fast track. If not set (NULL) then the Sales Price of the item in FTPLINVOICEITEMKEYID is used.
        /// </summary>
        [Column("FTPLINVOICEPRICE", TypeName = "Money")]
        public decimal? InvoicePrice { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPLINVOICETO</para>
        /// An enumerated value specifying who to invoice. The following values are valid:
        /// 0 = None. Invoicing does not take place.
        /// 1 = Factory. The factory where the rule is applied.
        /// 2 = The customer the unit is delivered to.****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None     = 0
        ///   Factory  = 1
        ///   Customer = 2
        /// ********************************************************************************
        /// </summary>
        [Column("FTPLINVOICETO")]
        public FastTrackInvoiceType? InvoiceTo { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPLINVOICEWITHUNIT</para>
        /// If True then the fast tracking is invoiced at the same time as the unit.
        /// This field is only relevant when FTPLINVOICETO equals 2 (customer). For all other values the field is ignored.
        /// </summary>
        [Column("FTPLINVOICEWITHUNIT")]
        [Required]
        public bool InvoiceWithUnit { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPLNAME</para>
        /// The name of the plan.
        /// </summary>
        [Column("FTPLNAME")]
        [Required, MaxLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPLPLAN</para>
        /// The number/ID of the Plan
        /// </summary>
        [Column("FTPLPLAN")]
        [Required, MaxLength(40)]
        public string Plan { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPLPRIORITY</para>
        /// The priority of the plan. The higher the number the LOWER the priority.
        /// </summary>
        [Column("FTPLPRIORITY")]
        [Required]
        public int Priority { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPLSTATUS</para>
        /// Normal or Omitted.
        /// </summary>
        [Column("FTPLSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TFASTTRACKPLAN.FTPLWORKHOURMODE</para>
        /// Reserved for future use.
        /// </summary>
        [Column("FTPLWORKHOURMODE")]
        public int? WorkhourMode { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TFASTTRACKPLAN.FTPL_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: InvoiceItemKeyId -> ItemModel.KeyId (TFASTTRACKPLAN.FTPLINVOICEITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(InvoiceItemKeyId))]
        public ItemModel InvoiceItem { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TFASTTRACKPLAN.FTPL_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of UnitFastTrackModel instances.
        /// <para />
        /// Foreign key: UnitFastTrackModel.FTPlKeyId -> KeyId (TUNITFASTTRACK.UFTFTPLKEYID -> TFASTTRACKPLAN.FTPLKEYID)
        /// </summary>
        [InverseProperty("FTPl")]
        public List<UnitFastTrackModel> FTPlUnitFastTrackList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TINDICATOR table.
    /// This table holds one record per actual Indicator used in the system.
    /// </summary>
    [Table("TINDICATOR")]
    public class IndicatorModel
    {
        /// <summary>
        /// <para>TINDICATOR.INDICINDICATOR</para>
        /// The number of the Indicator (like UNITUNIT is to Units)
        /// </summary>
        [Column("INDICINDICATOR")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TINDICATOR.INDICBLOCKBATCH</para>
        /// If True the batch in INDICPROCBATCH cannot be approved yet.
        ///
        /// For Immediate Indicators this is true until the indicator has status Approved.
        ///
        /// For Delayed Indicators this is true until all steps with INTYSUNBLOCK = 1 have been approved.
        /// </summary>
        [Column("INDICBLOCKBATCH")]
        [Required]
        public bool BlockBatch { get; set; }

        /// <summary>
        /// <para>TINDICATOR.INDICBLOCKDISPATCH</para>
        /// If True then any units linked to the indicator cannot be dispatched yet.
        ///
        /// For Immediate Indicators this is true until the indicator has status Approved.
        ///
        /// For Delayed Indicators this is true until all steps with INTYSUNBLOCK = 2 have been approved.
        /// </summary>
        [Column("INDICBLOCKDISPATCH")]
        [Required]
        public bool BlockDispatch { get; set; }

        /// <summary>
        /// <para>TINDICATOR.INDICCBIINDICATOR</para>
        /// Link to BI control indicator (CBI).
        /// </summary>
        [Column("INDICCBIINDICATOR")]
        public int? CBIIndicator { get; set; }

        /// <summary>
        /// <para>TINDICATOR.INDICERROR</para>
        /// If a indicator step or the indicator itself is disapproved this field is a reference to the error code used for disapproving.
        /// </summary>
        [Column("INDICERROR")]
        public int? Error { get; set; }

        /// <summary>
        /// <para>TINDICATOR.INDICEXTREF</para>
        /// Contains the STERRAD BI serial number.
        /// </summary>
        [Column("INDICEXTREF")]
        [MaxLength(64)]
        public string ExtRef { get; set; }

        /// <summary>
        /// <para>TINDICATOR.INDICINTYPKEYID</para>
        /// A reference to the Indicator type the Indicator is based on.
        /// </summary>
        [Column("INDICINTYPKEYID")]
        [Required]
        public int InTypKeyId { get; set; }

        /// <summary>
        /// <para>TINDICATOR.INDICLINKEDTOBATCH</para>
        /// This field is set to True if the Indicator is linked to the whole batch and not just one or more units.
        /// This happens if the indicator is associated with the program the batch/process was run on.
        ///
        /// Thus the value in this field can only be used to determine if the indicator is linked to the batch because of the program and not only because of some of the units.
        ///
        /// INDICBLOCKBATCH can be True even if this field is False. See INDICBLOCKBATCH.
        /// </summary>
        [Column("INDICLINKEDTOBATCH")]
        [Required]
        public bool LinkedToBatch { get; set; }

        /// <summary>
        /// <para>TINDICATOR.INDICPOSTREGISTERED</para>
        /// If True then the indicator was added to the batch AFTER the batch was approved
        /// </summary>
        [Column("INDICPOSTREGISTERED")]
        [Required]
        public bool Postregistered { get; set; }

        /// <summary>
        /// <para>TINDICATOR.INDICPROCBATCH</para>
        /// A reference to the Batch the Indicator was processed in and thus is validating.
        /// </summary>
        [Column("INDICPROCBATCH")]
        public int? ProcBatch { get; set; }

        /// <summary>
        /// <para>TINDICATOR.INDICSERIAL</para>
        /// The primary external barcode for the indicator. When set a record must also be created in TBARCODE.
        ///
        /// Additional external barcodes may be defined in TBARCODE.
        /// </summary>
        [Column("INDICSERIAL")]
        [MaxLength(50)]
        public string Serial { get; set; }

        /// <summary>
        /// <para>TINDICATOR.INDICSTATUS</para>
        /// The current status of the Indicator. Valid values are:
        /// - Created: The indicator is created but not yet in a batch.
        /// - InBatch: The indicator is in a batch and the batch does not yet have status Done.
        /// - Pending: The indicator has been in a batch. The batch is Done. One or more steps for the indicator might be approved.
        /// - Approved: The indicator has been fully approved and is no longer blocking anything.
        /// - Disapproved: The indicator is disapproved and is blocking as configured.
        /// - Cancelled: The indicator has been cancelled. You can only cancel an indicator when it has status Created.
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Created     = 0
        ///   InBatch     = 1
        ///   Pending     = 2
        ///   Approved    = 3
        ///   Disapproved = 4
        ///   Cancelled   = 5
        /// ********************************************************************************
        /// </summary>
        [Column("INDICSTATUS")]
        [Required]
        public IndicStatus Status { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a IndicatorModel instance.
        /// <para />
        /// Foreign key: CBIIndicator -> IndicatorModel.KeyId (TINDICATOR.INDICCBIINDICATOR -> TINDICATOR.INDICINDICATOR)
        /// </summary>
        [ForeignKey(nameof(CBIIndicator))]
        public IndicatorModel CBIIndicatorIndicator { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: Error -> TextModel.Number (TINDICATOR.INDICERROR -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(Error))]
        public TextModel ErrorText { get; set; }

        /// <summary>
        /// Reference to a IndicatorTypeModel instance.
        /// <para />
        /// Foreign key: InTypKeyId -> IndicatorTypeModel.KeyId (TINDICATOR.INDICINTYPKEYID -> TINDICATORTYPE.INTYPKEYID)
        /// </summary>
        [ForeignKey(nameof(InTypKeyId))]
        public IndicatorTypeModel InTyp { get; set; }

        /// <summary>
        /// Reference to a ProcessModel instance.
        /// <para />
        /// Foreign key: ProcBatch -> ProcessModel.KeyId (TINDICATOR.INDICPROCBATCH -> TPROCESS.PROCBATCH)
        /// </summary>
        [ForeignKey(nameof(ProcBatch))]
        public ProcessModel ProcBatchProcess { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of IndicatorLotInfoModel instances.
        /// <para />
        /// Foreign key: IndicatorLotInfoModel.IndicIndicator -> KeyId (TINDICLOTINFO.ILOTININDICINDICATOR -> TINDICATOR.INDICINDICATOR)
        /// </summary>
        [InverseProperty("IndicIndicatorIndicator")]
        public List<IndicatorLotInfoModel> IndicIndicatorIndicatorLotInfoList { get; set; }

        /// <summary>
        /// Reference to a collection of IndicatorUnitModel instances.
        /// <para />
        /// Foreign key: IndicatorUnitModel.IndicIndicator -> KeyId (TINDICUNIT.INUNTINDICINDICATOR -> TINDICATOR.INDICINDICATOR)
        /// </summary>
        [InverseProperty("IndicIndicatorIndicator")]
        public List<IndicatorUnitModel> IndicIndicatorIndicatorUnitList { get; set; }

        /// <summary>
        /// Reference to a collection of TagContentModel instances.
        /// <para />
        /// Foreign key: TagContentModel.IndicIndicator -> KeyId (TTAGCONTENT.TAGCINDICINDICATOR -> TINDICATOR.INDICINDICATOR)
        /// </summary>
        [InverseProperty("IndicIndicatorIndicator")]
        public List<TagContentModel> IndicIndicatorTagContentList { get; set; }

        /// <summary>
        /// Reference to a collection of EventModel instances.
        /// <para />
        /// Foreign key: EventModel.RefKeyId -> KeyId (TEVENT.EVNTREFKEYID -> TINDICATOR.INDICINDICATOR)
        /// </summary>
        [InverseProperty("RefIndicator")]
        public List<EventModel> RefIndicatorEventList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TINDICLOTINFO table.
    /// Used to link an indicator to a LOT number.
    /// </summary>
    [Table("TINDICLOTINFO")]
    public class IndicatorLotInfoModel
    {
        /// <summary>
        /// <para>TINDICLOTINFO.ILOTIN_CREATED</para>
        /// Time the link was created.
        /// </summary>
        [Column("ILOTIN_CREATED", TypeName = "datetime")]
        [Required]
        public DateTime Created { get; set; }

        /// <summary>
        /// <para>TINDICLOTINFO.ILOTIN_CREATEDKEYID</para>
        /// KeyID of the user that created the link.
        /// </summary>
        [Column("ILOTIN_CREATEDKEYID")]
        [Required]
        public int CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TINDICLOTINFO.ILOTININDICINDICATOR</para>
        /// The indicator number.
        /// </summary>
        [Column("ILOTININDICINDICATOR")]
        [Required]
        public int IndicIndicator { get; set; }

        /// <summary>
        /// <para>TINDICLOTINFO.ILOTINLOCAKEYID</para>
        /// KeyID of the location where the link was created.
        /// </summary>
        [Column("ILOTINLOCAKEYID")]
        [Required]
        public int LocaKeyId { get; set; }

        /// <summary>
        /// <para>TINDICLOTINFO.ILOTINLOTINKEYID</para>
        /// KeyID of the LOT number that the indicator links to.
        /// </summary>
        [Column("ILOTINLOTINKEYID")]
        [Required]
        public int LotInKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TINDICLOTINFO.ILOTIN_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a IndicatorModel instance.
        /// <para />
        /// Foreign key: IndicIndicator -> IndicatorModel.KeyId (TINDICLOTINFO.ILOTININDICINDICATOR -> TINDICATOR.INDICINDICATOR)
        /// </summary>
        [ForeignKey(nameof(IndicIndicator))]
        public IndicatorModel IndicIndicatorIndicator { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TINDICLOTINFO.ILOTINLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a LotInfoModel instance.
        /// <para />
        /// Foreign key: LotInKeyId -> LotInfoModel.KeyId (TINDICLOTINFO.ILOTINLOTINKEYID -> TLOTINFO.LOTINKEYID)
        /// </summary>
        [ForeignKey(nameof(LotInKeyId))]
        public LotInfoModel LotIn { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TINDICPROD table.
    /// This table holds one record for each link between a Product and a Indicator Type. A Product can link to multiple Indicator Types and Indicator Types can link to several Products.
    /// </summary>
    [Table("TINDICPROD")]
    public class IndicatorProductModel
    {
        /// <summary>
        /// <para>TINDICPROD.INPRDCOUNT</para>
        /// The number of indicators required (default 1)
        /// </summary>
        [Column("INPRDCOUNT")]
        [Required]
        public int Count { get; set; }

        /// <summary>
        /// <para>TINDICPROD.INPRDINTYPKEYID</para>
        /// A reference to the Indicator type the step belongs to.
        /// </summary>
        [Column("INPRDINTYPKEYID")]
        [Required]
        public int InTypKeyId { get; set; }

        /// <summary>
        /// <para>TINDICPROD.INPRDPRODKEYID</para>
        /// A reference to the Product.
        /// </summary>
        [Column("INPRDPRODKEYID")]
        [Required]
        public int ProdKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a IndicatorTypeModel instance.
        /// <para />
        /// Foreign key: InTypKeyId -> IndicatorTypeModel.KeyId (TINDICPROD.INPRDINTYPKEYID -> TINDICATORTYPE.INTYPKEYID)
        /// </summary>
        [ForeignKey(nameof(InTypKeyId))]
        public IndicatorTypeModel InTyp { get; set; }

        /// <summary>
        /// Reference to a ProductModel instance.
        /// <para />
        /// Foreign key: ProdKeyId -> ProductModel.KeyId (TINDICPROD.INPRDPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [ForeignKey(nameof(ProdKeyId))]
        public ProductModel Prod { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TINDICPROG table.
    /// This table holds one record for each link between a Program and an Indicator Type. A Program can link to multiple Indicator Types and Indicator Types can link to several Programs.
    /// </summary>
    [Table("TINDICPROG")]
    public class IndicatorProgramModel
    {
        /// <summary>
        /// <para>TINDICPROG.INPRGCOUNT</para>
        /// The number of indicators required (default 1)
        /// </summary>
        [Column("INPRGCOUNT")]
        [Required]
        public int Count { get; set; }

        /// <summary>
        /// <para>TINDICPROG.INPRGINTYPKEYID</para>
        /// A reference to the Indicator type the step belongs to.
        /// </summary>
        [Column("INPRGINTYPKEYID")]
        [Required]
        public int InTypKeyId { get; set; }

        /// <summary>
        /// <para>TINDICPROG.INPRGPROGKEYID</para>
        /// A reference to the program.
        /// </summary>
        [Column("INPRGPROGKEYID")]
        [Required]
        public int ProgKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a IndicatorTypeModel instance.
        /// <para />
        /// Foreign key: InTypKeyId -> IndicatorTypeModel.KeyId (TINDICPROG.INPRGINTYPKEYID -> TINDICATORTYPE.INTYPKEYID)
        /// </summary>
        [ForeignKey(nameof(InTypKeyId))]
        public IndicatorTypeModel InTyp { get; set; }

        /// <summary>
        /// Reference to a ProgramModel instance.
        /// <para />
        /// Foreign key: ProgKeyId -> ProgramModel.KeyId (TINDICPROG.INPRGPROGKEYID -> TPROGRAM.PROGKEYID)
        /// </summary>
        [ForeignKey(nameof(ProgKeyId))]
        public ProgramModel Prog { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TINDICATORTYPE table.
    /// This table holds one record per Indicator Type.
    /// </summary>
    [Table("TINDICATORTYPE")]
    public class IndicatorTypeModel
    {
        /// <summary>
        /// <para>TINDICATORTYPE.INTYPKEYID</para>
        /// Key ID of the type
        /// </summary>
        [Column("INTYPKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYP_CREATED</para>
        /// The time the record was created
        /// </summary>
        [Column("INTYP_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYP_CREATEDKEYID</para>
        /// A reference to the user that created the record
        /// </summary>
        [Column("INTYP_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYP_MODIFIED</para>
        /// The time the record was last modified
        /// </summary>
        [Column("INTYP_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYP_MODIFIEDKEYID</para>
        /// A reference to the user that last modified the record
        /// </summary>
        [Column("INTYP_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPBARCODE</para>
        /// </summary>
        [Column("INTYPBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPBITYPKEYID</para>
        /// Reference to the underlying Biological indicator type.
        ///
        /// Only relevant and used for Delayed and Combined indicators.
        /// </summary>
        [Column("INTYPBITYPKEYID")]
        public int? BITypKeyId { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPCBIMODE</para>
        /// Indicated if the indicator type represents a Control Biological Indicator (CBI).
        ///
        /// Only used/valid if Result type is Delayed.
        ///
        /// If set to True then the item specified in InTypItemKeyID must be traced by LOT number.
        /// </summary>
        [Column("INTYPCBIMODE")]
        [Required]
        public bool CBIMode { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPDEDUCTITEMSTOCK</para>
        /// Determines if creating an Indicator number based on the type will pull the item from the Consumable stock assigned to the location.
        ///
        /// Default value is True.
        ///
        /// Field is only visible and active if the Stock module is in the license.
        /// </summary>
        [Column("INTYPDEDUCTITEMSTOCK")]
        [Required]
        public bool DeductItemStock { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPDELAYEDONDISAPPROVE</para>
        /// Determines what happens when you disapprove indicators based on the type.
        ///
        /// Possible values are:
        /// 0.	Error mark all units in batch (default)
        /// 1.	Only error mark associated products
        ///
        /// The value is used for Delayed indicators and for the Delayed part of Combined indicators.
        /// </summary>
        [Column("INTYPDELAYEDONDISAPPROVE")]
        [Required]
        public int DelayedOnDisapprove { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPDESCR</para>
        /// A description.
        /// </summary>
        [Column("INTYPDESCR")]
        public string Descr { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPIMMEDIATEONDISAPPROVE</para>
        /// Determines what happens when you disapprove indicators based on the type.
        ///
        /// Possible values are:
        /// 0.	Error mark all units in batch (default)
        /// 1.	Only error mark associated products
        ///
        /// The value is used for Immediate indicators. Not for Combined or Delayed indicators.
        /// </summary>
        [Column("INTYPIMMEDIATEONDISAPPROVE")]
        [Required]
        public int ImmediateOnDisapprove { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPITEMKEYID</para>
        /// A reference to the Item the indicator is based on. (Restriction: Only Single Items can be specified here).
        ///
        /// If the stock module is present then an item is pulled from the locations Consumable stock every time an Indicator number based on the type is created.
        /// </summary>
        [Column("INTYPITEMKEYID")]
        [Required]
        public int ItemKeyId { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPNAME</para>
        /// The name of the type
        /// </summary>
        [Column("INTYPNAME")]
        [Required, MaxLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPRESULTTYPE</para>
        /// The type of result the indicator provides. Valid values are:
        /// - Immediate
        /// - Delayed
        /// - Combined
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Immediate = 0
        ///   Delayed   = 1
        ///   Combined  = 2
        /// ********************************************************************************
        /// </summary>
        [Column("INTYPRESULTTYPE")]
        [Required]
        public InTypResultType ResultType { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPSHAREINBATCH</para>
        /// If set to True (the default) and several units (or the program) in a batch requires this type of indicator then only one need to be scanned into the batch.
        ///
        /// If set to False then one must be scanned into the batch for each unit (and/or the program) that requires it.
        /// </summary>
        [Column("INTYPSHAREINBATCH")]
        [Required]
        public bool ShareInBatch { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPSTATUS</para>
        /// Standard status field. Valid values are:
        ///
        /// - Normal = Type can be used
        ///
        /// - To be omitted = It is no longer possible to create new indicator numbers based on this type. Existing ones can still be scanned into batches etc.
        ///
        /// - Omitted =  No create. Existing ones cannot be scanned into batches, but those already in batches are still in effect until approved/disapproved.
        /// </summary>
        [Column("INTYPSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TINDICATORTYPE.INTYPTYPE</para>
        /// The number/ID of the type.
        /// </summary>
        [Column("INTYPTYPE")]
        [Required, MaxLength(20)]
        public string Type { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TINDICATORTYPE.INTYP_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: ItemKeyId -> ItemModel.KeyId (TINDICATORTYPE.INTYPITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(ItemKeyId))]
        public ItemModel Item { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TINDICATORTYPE.INTYP_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TINDICUNIT table.
    /// This table holds one record for each Unit to Indicator number link that is caused by the indicator being associated to the product of the unit.
    ///
    /// IMPORTANT: If the indicator is tied to the program of the batch then records are NOT inserted into this table for all units in the batch.
    /// </summary>
    [Table("TINDICUNIT")]
    public class IndicatorUnitModel
    {
        /// <summary>
        /// <para>TINDICUNIT.INUNTINDICINDICATOR</para>
        /// A reference to the Indicator number.
        /// </summary>
        [Column("INUNTINDICINDICATOR")]
        [Required]
        public int IndicIndicator { get; set; }

        /// <summary>
        /// <para>TINDICUNIT.INUNTUNITUNIT</para>
        /// A reference to the Unit.
        /// </summary>
        [Column("INUNTUNITUNIT")]
        [Required]
        public int UnitUnit { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a IndicatorModel instance.
        /// <para />
        /// Foreign key: IndicIndicator -> IndicatorModel.KeyId (TINDICUNIT.INUNTINDICINDICATOR -> TINDICATOR.INDICINDICATOR)
        /// </summary>
        [ForeignKey(nameof(IndicIndicator))]
        public IndicatorModel IndicIndicatorIndicator { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: UnitUnit -> UnitModel.KeyId (TINDICUNIT.INUNTUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(UnitUnit))]
        public UnitModel UnitUnitUnit { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TINFOOVERVIEWCONFIG table.
    /// This table holds info overview configurations.
    /// A configuration specifies what data a client can &#39;subscribe&#39; to, and how the data is displayed.
    /// </summary>
    [Table("TINFOOVERVIEWCONFIG")]
    public class InfoOverviewConfigModel
    {
        /// <summary>
        /// <para>TINFOOVERVIEWCONFIG.IOCKEYID</para>
        /// KeyID of the info overview configuration
        /// </summary>
        [Column("IOCKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TINFOOVERVIEWCONFIG.IOC_CREATED</para>
        /// </summary>
        [Column("IOC_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TINFOOVERVIEWCONFIG.IOC_CREATEDKEYID</para>
        /// </summary>
        [Column("IOC_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TINFOOVERVIEWCONFIG.IOC_MODIFIED</para>
        /// </summary>
        [Column("IOC_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TINFOOVERVIEWCONFIG.IOC_MODIFIEDKEYID</para>
        /// </summary>
        [Column("IOC_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TINFOOVERVIEWCONFIG.IOCCONFIGCLASS</para>
        /// Contains the name of the configuration class.
        ///
        /// If this field is null, the config class will be TInfoOverviewSubscrConfigDB (in unit uInfoOverviewSubscrConf.pas)
        /// </summary>
        [Column("IOCCONFIGCLASS")]
        [MaxLength(50)]
        public string ConfigClass { get; set; }

        /// <summary>
        /// <para>TINFOOVERVIEWCONFIG.IOCCONFIGDATA</para>
        /// Configuration data of the info overview configuration.
        /// This contains the config in DFM format.
        /// </summary>
        [Column("IOCCONFIGDATA")]
        public string ConfigData { get; set; }

        /// <summary>
        /// <para>TINFOOVERVIEWCONFIG.IOCDESCR</para>
        /// A description of the info overview configuration
        /// </summary>
        [Column("IOCDESCR")]
        public string Descr { get; set; }

        /// <summary>
        /// <para>TINFOOVERVIEWCONFIG.IOCNAME</para>
        /// Name of the info overview configuration
        /// </summary>
        [Column("IOCNAME")]
        [Required, MaxLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TINFOOVERVIEWCONFIG.IOCTYPE</para>
        /// Type of the info overview
        ///
        /// Translation = &#39;Overview type&#39;
        /// </summary>
        [Column("IOCTYPE")]
        [Required]
        public InfoOverviewType Type { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TINFOOVERVIEWCONFIG.IOC_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TINFOOVERVIEWCONFIG.IOC_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TITEM table.
    /// This table is used to hold all Single and Composite Items know to T-DOC.
    /// </summary>
    [Table("TITEM")]
    public class ItemModel
    {
        /// <summary>
        /// <para>TITEM.ITEMKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("ITEMKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEM_CREATED</para>
        /// </summary>
        [Column("ITEM_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TITEM.ITEM_CREATEDKEYID</para>
        /// </summary>
        [Column("ITEM_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEM_MODIFIED</para>
        /// </summary>
        [Column("ITEM_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TITEM.ITEM_MODIFIEDKEYID</para>
        /// </summary>
        [Column("ITEM_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMBARCODE</para>
        /// The primary external barcode for the item. When set a record must also be created in TBARCODE.
        ///
        /// Additional external barcodes may be defined in TBARCODE.
        /// </summary>
        [Column("ITEMBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMCATKEYID</para>
        /// A refenrece to the catalog entry for the item (TCATALOG).
        /// </summary>
        [Column("ITEMCATKEYID")]
        public int? CatKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMCOLOR</para>
        /// </summary>
        [Column("ITEMCOLOR")]
        public int? Color { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMCOMPOSITE</para>
        /// If True the item is a composite item.
        ///
        /// This value should never be set to False if referencing records exist in table TCOMP.
        /// </summary>
        [Column("ITEMCOMPOSITE")]
        [Required]
        public bool Composite { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMCONTAMINATION</para>
        /// NOT YET USED.
        ///
        /// The contamination probability of the item.
        ///
        /// If implemented then consider UDF TDFN_GETITEMCONTAMPROBABILITY and table TCONTAMPROB.
        /// </summary>
        [Column("ITEMCONTAMINATION")]
        public int? Contamination { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMCOSTPRICE</para>
        /// The external cost price of the item.
        /// </summary>
        [Column("ITEMCOSTPRICE", TypeName = "Money")]
        public decimal? Costprice { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMDIFFICULTY</para>
        /// Item complexity/difficulty.
        /// A number indicating how complicated it is to pack a product based on this item.
        /// </summary>
        [Column("ITEMDIFFICULTY")]
        public int? Difficulty { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMDIFFICULTYMODE</para>
        /// Item complexity/difficulty mode.
        ///
        /// Possible values (TItemDifficultyMode):
        /// - Sum (0) - the &#39;Complexity&#39; value is calculated as the sum of the complexity values from the items that are in the composite items list, using the standard counts (COMPCOUNT).
        /// - Fixed (1) - the user can enter random values in the &#39;Complexity&#39; field (ITEMDIFFICULTY) or select a value from the drop-down.
        ///
        /// Default = Sum.****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Default = 0
        ///   Fixed   = 1
        ///   Sum     = 2
        ///   Max     = 3
        ///   Count   = 4
        /// ********************************************************************************
        /// </summary>
        [Column("ITEMDIFFICULTYMODE")]
        [Required]
        public ItemDifficultyMode DifficultyMode { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMDISCARDLEVEL</para>
        /// </summary>
        [Column("ITEMDISCARDLEVEL")]
        [Required]
        public int DiscardLevel { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMDISPOSABLE</para>
        /// If True the item is a disposable item.
        ///
        /// ITEMLIFESPAN must be 1 if this field is set to True.
        /// </summary>
        [Column("ITEMDISPOSABLE")]
        [Required]
        public bool Disposable { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMDISPPRICE</para>
        /// This value is calculated by T-DOC.
        ///
        /// Single Items:
        /// If the Item is a disposable item the value will be set equal to the calculated Usage price.
        /// If the Item is not disposable the value will always be 0.
        ///
        /// Composite items:
        /// The value will be the sum of ITEMDISPPRICE for all the Single Items in the Composite Item.
        /// </summary>
        [Column("ITEMDISPPRICE", TypeName = "Money")]
        public decimal? DispPrice { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMEXTERNALTEXT</para>
        /// The field is intended for entering text that is relevant to external systems that are integrated with T-DOC. For example in the T-DOC/Logica Orbit integration the field is used to enter barcode masks for LOT barcodes and is accessed by Orbit as part of the scanning process in the OR using Orbit scanners.
        ///
        /// If the field is not used by external systems it can basically be used for anything.
        ///
        /// The field can be added to reports etc.
        ///
        /// The visibility of the field in the Item window follows the rules for the ITEMEXTERNALTYPE field.
        /// </summary>
        [Column("ITEMEXTERNALTEXT")]
        [MaxLength(100)]
        public string ExternalText { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMEXTERNALTYPE</para>
        /// The field is intended for setting a &quot;type&quot; for the item that is relevant to external systems that are integrated with T-DOC. For example in the T-DOC/Logica Orbit integration the field is used to select between a number of types that determine how the item is treated when imported into Orbit.
        ///
        /// The field is only visible if the following conditions are met:
        /// - The Standard Article Export job is included in the License.
        /// - External Item types have been defined via the &quot;Edit&quot; menu in the &quot;External Systems&quot; window.
        ///
        /// The actual list of external item types is stored in the TSETTINGS table.
        /// </summary>
        [Column("ITEMEXTERNALTYPE")]
        public int? ExternalType { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMFACKEYID</para>
        /// If the item is Factory Bound this field holds the primary factory of the item. A NULL value indicates that the item is not factory bound.
        /// See also the TFACITEM table.
        /// </summary>
        [Column("ITEMFACKEYID")]
        public int? FacKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMHOSPITALDESCRIPTION</para>
        /// The internal name used for the item if different than ITEMTEXT.
        ///
        /// Often items/instruments have local &quot;nick-names&quot; that are different that the offical catalog names. This field can be used to store such names. The value is only used for printing and display if setup in the system.
        /// </summary>
        [Column("ITEMHOSPITALDESCRIPTION")]
        [MaxLength(100)]
        public string HospitalDescription { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMINARTKEYID</para>
        /// Refers to a group with identical items.
        /// </summary>
        [Column("ITEMINARTKEYID")]
        public int? InArtKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMINFO</para>
        /// Holds additional descriptions and remarks about the item.
        /// </summary>
        [Column("ITEMINFO")]
        public string Info { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMITEM</para>
        /// The number/identifier of the item.
        /// </summary>
        [Column("ITEMITEM")]
        [Required, MaxLength(20)]
        public string Item { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMITGRPKEYID</para>
        /// A reference to the item group the item is part of.
        /// </summary>
        [Column("ITEMITGRPKEYID")]
        public int? ItGrpKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMITSPCKEYID</para>
        /// A reference to the specialty the item belongs to.
        /// </summary>
        [Column("ITEMITSPCKEYID")]
        public int? ItspcKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMLENGTH</para>
        /// The length of the item.
        /// </summary>
        [Column("ITEMLENGTH")]
        public int? Length { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMLIFESPAN</para>
        /// The number of times this item can be used. A value of 0 indicates that there is no known limit to the number of uses.
        ///
        /// If ITEMDISPOSABLE is True the value must be 1.
        /// </summary>
        [Column("ITEMLIFESPAN")]
        public int? Lifespan { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMMANUFACTORNO</para>
        /// The number used by the manufactor to identify the item.
        /// </summary>
        [Column("ITEMMANUFACTORNO")]
        [MaxLength(100)]
        public string ManufactorNo { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMMANUKEYID</para>
        /// A reference to the manufactor of the item (TSUPPLIE).
        /// </summary>
        [Column("ITEMMANUKEYID")]
        public int? ManuKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMMATERIAL</para>
        /// The material the item is made of (e.g. steel, plastic etc.)
        ///
        /// References a record  in TTEXT of type ttMaterial.
        /// </summary>
        [Column("ITEMMATERIAL")]
        public int? Material { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMMATERIALSNUM</para>
        /// The materials number of the item as know to an external system.
        ///
        /// The number is not used by T-DOC as standard but is sometimes used when interfacing to other systems.
        /// </summary>
        [Column("ITEMMATERIALSNUM")]
        [MaxLength(100)]
        public string MaterialsNum { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMMAXPRESSURE</para>
        /// The maximum pressure the item can withstand.
        ///
        /// Information only. Not enforced by T-DOC. Use Washer and Sterilizer groups on the product definitions to prevent damage to items/instruments.
        /// </summary>
        [Column("ITEMMAXPRESSURE")]
        public int? MaxPressure { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMMAXTEMP</para>
        /// The maximum temperature the item can withstand.
        ///
        /// Information only. Not enforced by T-DOC. Use Washer and Sterilizer groups on the product definitions to prevent damage to items/instruments.
        /// </summary>
        [Column("ITEMMAXTEMP")]
        public int? MaxTemp { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMORDERLEADTIME</para>
        /// The general lead time when ordering the item. This is the &quot;average&quot;/estimated time it takes from the item is ordered from the supplier until it is delivered to the originator of the order.
        /// The value is specified in minutes.
        /// NOTE: Only used for Single Items.
        /// </summary>
        [Column("ITEMORDERLEADTIME")]
        public int? OrderLeadTime { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMORDERMINCOUNT</para>
        /// The minimum number of UnitCount that must be ordered.
        /// </summary>
        [Column("ITEMORDERMINCOUNT")]
        public int? OrderMinCount { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMORDERSTDCOUNT</para>
        /// The order pakage size
        /// The ordersize must always be dividable by this count.
        ///
        /// eg. OrderMinCount=30 and OrderStdCount=10 then you have to order 30, 40, 50 etc. at a time
        /// </summary>
        [Column("ITEMORDERSTDCOUNT")]
        public int? OrderStdCount { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMORDERSTDUOMKEYID</para>
        /// Reference to the Unit of meassure for the number in ITEMORDERSTDCOUNT.
        /// </summary>
        [Column("ITEMORDERSTDUOMKEYID")]
        public int? OrderstduomKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMOTHERMINCOUNT</para>
        /// </summary>
        [Column("ITEMOTHERMINCOUNT")]
        public int? OtherMinCount { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMOTHERUNITCOUNT</para>
        /// Alternative number sold (normally multipla of ITEMSALESUNITCOUNT)
        ///
        /// Package size etc.
        /// </summary>
        [Column("ITEMOTHERUNITCOUNT")]
        public int? OtherUnitCount { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMOTHERUOMKEYID</para>
        /// Reference to the Unit of meassure for the number in ITEMOTHERUNITCOUNT.
        /// </summary>
        [Column("ITEMOTHERUOMKEYID")]
        public int? OtheruomKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMREPAIRVENDORKEYID</para>
        /// A reference to the repair vendor of the item (TSUPPLIE).
        /// </summary>
        [Column("ITEMREPAIRVENDORKEYID")]
        public int? RepairVendorKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMRESERVATIONMODE</para>
        /// Possible values:
        /// - NotRequired(0) - reservation for item is impossible;
        /// - Enabled(1) - reservation for item is possible;****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   NotRequired = 0
        ///   Enabled     = 1
        /// ********************************************************************************
        /// </summary>
        [Column("ITEMRESERVATIONMODE")]
        public ItemReservationMode? ReservationMode { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSALESMINCOUNT</para>
        /// The smallest number sold. (normally multipla of ITEMSALESUNITCOUNT)
        /// </summary>
        [Column("ITEMSALESMINCOUNT")]
        public int? SalesMinCount { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSALESPRCODE</para>
        /// </summary>
        [Column("ITEMSALESPRCODE")]
        public int? SalesPrCode { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSALESPRICE</para>
        /// </summary>
        [Column("ITEMSALESPRICE", TypeName = "Money")]
        public decimal? SalesPrice { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSALESRESTRICTION</para>
        /// It must not be possible to add an item to an order if ITEMSALESRESTRICTION = 1 and LIC.ItemSalesRestrictionEnabled and LIC.Code = custNRAH
        ///
        /// TItemSalesRestriction = (None = 0, Blocked = 1)
        /// </summary>
        [Column("ITEMSALESRESTRICTION")]
        public ItemSalesRestriction? SalesRestriction { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSALESUNITCOUNT</para>
        /// The smallest unit sold (default 1)
        /// </summary>
        [Column("ITEMSALESUNITCOUNT")]
        public int? SalesUnitCount { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSALESUOMKEYID</para>
        /// Reference to the Unit of meassure for the number in ITEMSALESUNITCOUNT.
        /// </summary>
        [Column("ITEMSALESUOMKEYID")]
        public int? SalesuomKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSERIALMASK</para>
        /// The mask unsed for automatic numbering of serial numbers based on the item. The general mask is defined in TNUMMASK but can be overridden for individual items.
        /// </summary>
        [Column("ITEMSERIALMASK")]
        [MaxLength(20)]
        public string Serialmask { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSHELVINGTIME</para>
        /// The time used to unpack and shelve the item after it has been received from the Supplier.
        /// Stored in seconds.
        /// If set to NULL then the value from FACDEFITEMSHELVINGTIME is used.
        /// </summary>
        [Column("ITEMSHELVINGTIME")]
        public int? ShelvingTime { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSPLITCOUNT</para>
        /// Not used for single items. For composite items, this fields holds the number of split/wash tags that the item must be split to. Default value 1, means that split is not needed.
        /// </summary>
        [Column("ITEMSPLITCOUNT")]
        public int? SplitCount { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSTATUS</para>
        /// Indicates the status of the customer. Valid values are:
        ///
        ///   stNormal = 10
        ///   stDieing = 50
        ///   stDead   = 90
        /// </summary>
        [Column("ITEMSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSTERILIZATIONTYPE</para>
        /// </summary>
        [Column("ITEMSTERILIZATIONTYPE")]
        public int? SterilizationType { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSUPPKEYID</para>
        /// A reference to the supplier of the item (TSUPPLIE).
        /// </summary>
        [Column("ITEMSUPPKEYID")]
        public int? SuppKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMSUPPLIERNO</para>
        /// The number used by the supplier to identify the item.
        /// </summary>
        [Column("ITEMSUPPLIERNO")]
        [MaxLength(100)]
        public string SupplierNo { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMTAGTKEYID</para>
        /// Refers to a tag type, only ttyTransportBox is allowed to be references.
        /// The field is used by the MES job to determine what size transport box is requirred, for an item to be put on stock.
        /// </summary>
        [Column("ITEMTAGTKEYID")]
        public int? TagTKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMTEXT</para>
        /// The name of the item.
        /// </summary>
        [Column("ITEMTEXT")]
        [Required, MaxLength(100)]
        public string Text { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMTIP</para>
        /// The length of the tip of the item/instrument.
        ///
        /// Information only. Not used by T-DOC.
        /// </summary>
        [Column("ITEMTIP")]
        public int? Tip { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMTOTALCOSTPRICE</para>
        /// </summary>
        [Column("ITEMTOTALCOSTPRICE", TypeName = "Money")]
        public decimal? Totalcostprice { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMTOTALSALESPRICE</para>
        /// </summary>
        [Column("ITEMTOTALSALESPRICE", TypeName = "Money")]
        public decimal? Totalsalesprice { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMTOTALUSAGEPRICE</para>
        /// </summary>
        [Column("ITEMTOTALUSAGEPRICE", TypeName = "Money")]
        public decimal? Totalusageprice { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMTRACETYPE</para>
        /// Determines if stock control is maintained at the Item, Serial or LOT level. Values are taken from TDConst and can be
        ///
        /// Item=0        -&gt; You can not use neither LOT nor Serial numbers
        /// SerialItem=1  -&gt; You have to have a Serial number on ALL items
        /// LOT=2         -&gt; You have to have a LOT number on ALL items
        ///
        /// If the value is bigger than 0 you can not scan/enter the Item number but have to scan/enter either the Serial or LOT number at all times.
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Item       = 0
        ///   SerialItem = 1
        ///   LOT        = 2
        /// ********************************************************************************
        /// </summary>
        [Column("ITEMTRACETYPE")]
        public ItemTraceType? TraceType { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMTYPE</para>
        /// Identifies what the item is
        ///
        /// 0=Item (any &#39;normal&#39; item)
        /// 1=Endoscope (ItemType is 1 for the comp item that an endoscope product is based on, and 1 for the single item in that comp item that &#39;is&#39; the endoscope)
        /// 2=Button valve (single item used as button valve for endoscopes)
        /// </summary>
        [Column("ITEMTYPE")]
        [Required]
        public int Type { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF01</para>
        /// </summary>
        [Column("ITEMUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF02</para>
        /// </summary>
        [Column("ITEMUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF03</para>
        /// </summary>
        [Column("ITEMUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF04</para>
        /// </summary>
        [Column("ITEMUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF05</para>
        /// </summary>
        [Column("ITEMUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF06</para>
        /// </summary>
        [Column("ITEMUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF07</para>
        /// </summary>
        [Column("ITEMUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF08</para>
        /// </summary>
        [Column("ITEMUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF09</para>
        /// </summary>
        [Column("ITEMUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF10</para>
        /// </summary>
        [Column("ITEMUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF11</para>
        /// </summary>
        [Column("ITEMUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF12</para>
        /// </summary>
        [Column("ITEMUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF13</para>
        /// </summary>
        [Column("ITEMUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF14</para>
        /// </summary>
        [Column("ITEMUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF15</para>
        /// </summary>
        [Column("ITEMUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF16</para>
        /// </summary>
        [Column("ITEMUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF17</para>
        /// </summary>
        [Column("ITEMUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF18</para>
        /// </summary>
        [Column("ITEMUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF19</para>
        /// </summary>
        [Column("ITEMUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUF20</para>
        /// </summary>
        [Column("ITEMUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUNITCOUNT</para>
        /// The smallest unit this item can be handled in at all.
        ///
        /// Default = 1
        /// </summary>
        [Column("ITEMUNITCOUNT")]
        public int? Unitcount { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUOMKEYID</para>
        /// The unit the item is normally measured in. eg. PCS etc. (non dividable).
        ///
        /// This is the unit stock is taken in (ie. the smallest possible unit)
        /// </summary>
        [Column("ITEMUOMKEYID")]
        public int? UomKeyId { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUSAGEPRCODE</para>
        /// </summary>
        [Column("ITEMUSAGEPRCODE")]
        public int? UsagePrCode { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMUSAGEPRICE</para>
        /// </summary>
        [Column("ITEMUSAGEPRICE", TypeName = "Money")]
        public decimal? UsagePrice { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMWARRENTY</para>
        /// The warrenty of the item.
        ///
        /// References a record  in TTEXT of type ttWarrenty.
        /// </summary>
        [Column("ITEMWARRENTY")]
        public int? Warrenty { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMWEIGHT</para>
        /// The weigth of the item.
        ///
        /// Information only. Not used by T-DOC.
        /// </summary>
        [Column("ITEMWEIGHT")]
        public int? Weight { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMWEIGHTMODE</para>
        /// Can be set to &quot;Sum&quot; or &quot;Fixed&quot;.
        /// &quot;Sum&quot;: Weight is calculated from single items as described above
        /// &quot;Fixed&quot;: Weight is entered directly
        /// </summary>
        [Column("ITEMWEIGHTMODE")]
        public int? WeightMode { get; set; }

        /// <summary>
        /// <para>TITEM.ITEMWIDTH</para>
        /// The width of the item.
        ///
        /// Information only. Not used by T-DOC.
        /// </summary>
        [Column("ITEMWIDTH")]
        public int? Width { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TITEM.ITEM_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TITEM.ITEMFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a ItemGroupModel instance.
        /// <para />
        /// Foreign key: ItGrpKeyId -> ItemGroupModel.KeyId (TITEM.ITEMITGRPKEYID -> TITEMGRP.ITGRPKEYID)
        /// </summary>
        [ForeignKey(nameof(ItGrpKeyId))]
        public ItemGroupModel ItGrp { get; set; }

        /// <summary>
        /// Reference to a ItemSpecialtyModel instance.
        /// <para />
        /// Foreign key: ItspcKeyId -> ItemSpecialtyModel.KeyId (TITEM.ITEMITSPCKEYID -> TITEMSPC.ITSPCKEYID)
        /// </summary>
        [ForeignKey(nameof(ItspcKeyId))]
        public ItemSpecialtyModel Itspc { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: ManuKeyId -> SupplierModel.KeyId (TITEM.ITEMMANUKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(ManuKeyId))]
        public SupplierModel Manu { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: Material -> TextModel.Number (TITEM.ITEMMATERIAL -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(Material))]
        public TextModel MaterialText { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TITEM.ITEM_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: RepairVendorKeyId -> SupplierModel.KeyId (TITEM.ITEMREPAIRVENDORKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(RepairVendorKeyId))]
        public SupplierModel RepairVendor { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: SuppKeyId -> SupplierModel.KeyId (TITEM.ITEMSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppKeyId))]
        public SupplierModel Supp { get; set; }

        /// <summary>
        /// Reference to a TagTypeModel instance.
        /// <para />
        /// Foreign key: TagTKeyId -> TagTypeModel.KeyId (TITEM.ITEMTAGTKEYID -> TTAGTYPE.TAGTKEYID)
        /// </summary>
        [ForeignKey(nameof(TagTKeyId))]
        public TagTypeModel TagT { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: Warrenty -> TextModel.Number (TITEM.ITEMWARRENTY -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(Warrenty))]
        public TextModel WarrentyText { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of CompositeModel instances.
        /// <para />
        /// Foreign key: CompositeModel.CompItemKeyId -> KeyId (TCOMP.COMPCOMPITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [InverseProperty("CompItem")]
        public List<CompositeModel> CompItemCompositeList { get; set; }

        /// <summary>
        /// Reference to a collection of ExtDocRefLinkModel instances.
        /// <para />
        /// Foreign key: ExtDocRefLinkModel.ItemKeyId -> KeyId (TEXTDOCREFLINK.EDRLITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [InverseProperty("Item")]
        public List<ExtDocRefLinkModel> ItemExtDocRefLinkList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderLineAlternativeModel instances.
        /// <para />
        /// Foreign key: OrderLineAlternativeModel.ItemKeyId -> KeyId (TORDLNALTERNATIVE.OLNALTITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [InverseProperty("Item")]
        public List<OrderLineAlternativeModel> ItemOrderLineAlternativeList { get; set; }

        /// <summary>
        /// Reference to a collection of ProductModel instances.
        /// <para />
        /// Foreign key: ProductModel.ItemKeyId -> KeyId (TPRODUCT.PRODITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [InverseProperty("Item")]
        public List<ProductModel> ItemProductList { get; set; }

        /// <summary>
        /// Reference to a collection of TagContentModel instances.
        /// <para />
        /// Foreign key: TagContentModel.ItemKeyId -> KeyId (TTAGCONTENT.TAGCITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [InverseProperty("Item")]
        public List<TagContentModel> ItemTagContentList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderLineModel instances.
        /// <para />
        /// Foreign key: OrderLineModel.OrgAltItemKeyId -> KeyId (TORDLN.OLNORGALTITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [InverseProperty("OrgAltItem")]
        public List<OrderLineModel> OrgAltItemOrderLineList { get; set; }

        /// <summary>
        /// Reference to a collection of EventModel instances.
        /// <para />
        /// Foreign key: EventModel.RefKeyId -> KeyId (TEVENT.EVNTREFKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [InverseProperty("RefItem")]
        public List<EventModel> RefItemEventList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderLineModel instances.
        /// <para />
        /// Foreign key: OrderLineModel.RefItemKeyId -> KeyId (TORDLN.OLNREFITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [InverseProperty("RefItem")]
        public List<OrderLineModel> RefItemOrderLineList { get; set; }

        /// <summary>
        /// Reference to a collection of PatientConsModel instances.
        /// <para />
        /// Foreign key: PatientConsModel.RefItemKeyId -> KeyId (TPATCONS.PATCOREFITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [InverseProperty("RefItem")]
        public List<PatientConsModel> RefItemPatientConsList { get; set; }

        /// <summary>
        /// Reference to a collection of PictureRefModel instances.
        /// <para />
        /// Foreign key: PictureRefModel.RefItemKeyId -> KeyId (TPICTREF.PICTREFITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [InverseProperty("RefItem")]
        public List<PictureRefModel> RefItemPictureRefList { get; set; }

        /// <summary>
        /// Reference to a collection of SerialModel instances.
        /// <para />
        /// Foreign key: SerialModel.RefItemKeyId -> KeyId (TSERIAL.SERIREFITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [InverseProperty("RefItem")]
        public List<SerialModel> RefItemSerialList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitListModel instances.
        /// <para />
        /// Foreign key: UnitListModel.RefItemKeyId -> KeyId (TUNITLST.ULSTREFITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [InverseProperty("RefItem")]
        public List<UnitListModel> RefItemUnitListList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TITEMGRP table.
    /// This table holds all item groups.
    /// </summary>
    [Table("TITEMGRP")]
    public class ItemGroupModel
    {
        /// <summary>
        /// <para>TITEMGRP.ITGRPKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("ITGRPKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TITEMGRP.ITGRPDESCR</para>
        /// A description of the item group.
        /// </summary>
        [Column("ITGRPDESCR")]
        public string Descr { get; set; }

        /// <summary>
        /// <para>TITEMGRP.ITGRPFACKEYID</para>
        /// If the item group is Factory Bound this field holds the primary factory of the item group. A NULL value indicates that the item group is not factory bound.
        /// See also the TFACITGRP table.
        /// </summary>
        [Column("ITGRPFACKEYID")]
        public int? FacKeyId { get; set; }

        /// <summary>
        /// <para>TITEMGRP.ITGRPITEMGROUP</para>
        /// The number of the item group.
        /// </summary>
        [Column("ITGRPITEMGROUP")]
        [Required, MaxLength(20)]
        public string ItemGroup { get; set; }

        /// <summary>
        /// <para>TITEMGRP.ITGRPNAME</para>
        /// The name of the item group.
        /// </summary>
        [Column("ITGRPNAME")]
        [Required, MaxLength(150)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TITEMGRP.ITGRPPRICINGTYPE</para>
        /// Holds how invoicing should be done for the Item.
        ///
        /// values:
        /// Normal = 0
        /// TimeBased = 1****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Normal    = 0
        ///   TimeBased = 1
        /// ********************************************************************************
        /// </summary>
        [Column("ITGRPPRICINGTYPE")]
        [Required]
        public ItemPricingType PricingType { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TITEMGRP.ITGRPFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TITEMSPC table.
    /// This table holds all item specialties.
    /// </summary>
    [Table("TITEMSPC")]
    public class ItemSpecialtyModel
    {
        /// <summary>
        /// <para>TITEMSPC.ITSPCKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("ITSPCKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TITEMSPC.ITSPCDESCR</para>
        /// A description of the specialty.
        /// </summary>
        [Column("ITSPCDESCR")]
        public string Descr { get; set; }

        /// <summary>
        /// <para>TITEMSPC.ITSPCFACKEYID</para>
        /// If the item specialty is Factory Bound this field holds the primary factory of the item specialty. A NULL value indicates that the item specialty is not factory bound.
        /// See also the TFACITSPC table.
        /// </summary>
        [Column("ITSPCFACKEYID")]
        public int? FacKeyId { get; set; }

        /// <summary>
        /// <para>TITEMSPC.ITSPCNAME</para>
        /// The name of the specialty.
        /// </summary>
        [Column("ITSPCNAME")]
        [Required, MaxLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TITEMSPC.ITSPCSPECIALTY</para>
        /// The number of the specialty.
        /// </summary>
        [Column("ITSPCSPECIALTY")]
        [Required, MaxLength(20)]
        public string Specialty { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TITEMSPC.ITSPCFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of ItemModel instances.
        /// <para />
        /// Foreign key: ItemModel.ItspcKeyId -> KeyId (TITEM.ITEMITSPCKEYID -> TITEMSPC.ITSPCKEYID)
        /// </summary>
        [InverseProperty("Itspc")]
        public List<ItemModel> ItspcItemList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TLICENSEBINDING table.
    /// This table used to store current license bindings.
    /// </summary>
    [Table("TLICENSEBINDING")]
    public class LicenseBindingModel
    {
        /// <summary>
        /// <para>TLICENSEBINDING.LICBINDCLIENTID</para>
        /// Client identifier.
        /// </summary>
        [Column("LICBINDCLIENTID")]
        [Required, MaxLength(36)]
        public string ClientId { get; set; }

        /// <summary>
        /// <para>TLICENSEBINDING.LICBINDCLIENTIPADDRESS</para>
        /// IP address of the client.
        /// </summary>
        [Column("LICBINDCLIENTIPADDRESS")]
        [MaxLength(150)]
        public string ClientIPAddress { get; set; }

        /// <summary>
        /// <para>TLICENSEBINDING.LICBINDCONNECTIONID</para>
        /// Connection identifier - unique.
        /// </summary>
        [Column("LICBINDCONNECTIONID")]
        [Required, MaxLength(22)]
        public string ConnectionId { get; set; }

        /// <summary>
        /// <para>TLICENSEBINDING.LICBINDCREATETIME</para>
        /// Date/time the binding was created.
        /// </summary>
        [Column("LICBINDCREATETIME", TypeName = "datetime")]
        [Required]
        public DateTime CreateTime { get; set; }

        /// <summary>
        /// <para>TLICENSEBINDING.LICBINDREFRESHTIME</para>
        /// Date/time the binding was last time updated.
        /// </summary>
        [Column("LICBINDREFRESHTIME", TypeName = "datetime")]
        public DateTime? RefreshTime { get; set; }

        /// <summary>
        /// <para>TLICENSEBINDING.LICBINDSERVERNAME</para>
        /// Name of the server the client is connected to.
        /// </summary>
        [Column("LICBINDSERVERNAME")]
        [Required, MaxLength(50)]
        public string ServerName { get; set; }
    }

    /// <summary>
    /// Model representing the TLOCATIO table.
    /// *****************************************************************************
    /// WHEN CHANGING FIELDS REMEMBER TO UPDATE uInitPosLoca.pas CreateALocation!
    /// *****************************************************************************
    /// This table is used to hold the different T-DOC locations that exist.
    /// Each location has a process attached to it that signifies what can be done at that location. The process can for example be Packing, Dispatch, Return etc.
    ///
    /// A physical position attaches to a location and hence know what to do.
    ///
    /// IMPORTANT: Once a record in this table is referenced from TUNITLCA it must NOT be deleted. Set status instead.
    /// </summary>
    [Table("TLOCATIO")]
    public class LocationModel
    {
        /// <summary>
        /// <para>TLOCATIO.LOCAKEYID</para>
        /// The internal database KeyID.
        ///
        /// Values &lt; 1000 are reserved by T-DOC.
        ///
        /// The database contains a default location for ALL types of processes. These are primarilly used when converting from an old database but are in some instances used when the system creates records in other tables.
        /// </summary>
        [Column("LOCAKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCA_CREATED</para>
        /// </summary>
        [Column("LOCA_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCA_CREATEDKEYID</para>
        /// </summary>
        [Column("LOCA_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCA_MODIFIED</para>
        /// </summary>
        [Column("LOCA_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCA_MODIFIEDKEYID</para>
        /// </summary>
        [Column("LOCA_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAAUTOSTOKKEYID</para>
        /// The stock from where the location should automatically pull any consumables it uses.
        /// </summary>
        [Column("LOCAAUTOSTOKKEYID")]
        public int? AutoStokKeyId { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCABARCODE</para>
        /// </summary>
        [Column("LOCABARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCADEFUSERKEYID</para>
        /// The default user of the location. If set this user is automatically logged in when a barcode is scanned.
        /// </summary>
        [Column("LOCADEFUSERKEYID")]
        public int? DefUserKeyId { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCADESCR</para>
        /// User defined Description
        /// </summary>
        [Column("LOCADESCR")]
        public string Descr { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCADIRECTION</para>
        /// If direction is defined for a location, and a unit is scanned at this location, it indicates whether the unit’s direction is ingoing or outgoing seen from the CSSD point of view.
        /// New EnumType: TLocationDirection=(lodUndefined, lodOutgoing, lodIngoing).
        ///
        /// 0 = lodUndefined
        /// 1 = lodOutgoing
        /// 2 = lodIngoing
        /// </summary>
        [Column("LOCADIRECTION")]
        [Required]
        public int Direction { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAFACKEYID</para>
        /// The link to the factory the location belongs to (if any).
        ///
        /// For locations where LOCAPROCESS=ptNone (ie. a Admin) this field holds the default factory suggested when logging in.
        /// </summary>
        [Column("LOCAFACKEYID")]
        public int? FacKeyId { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAFLAGS</para>
        /// One bit is used to indicate if location scans generate history trail.
        /// </summary>
        [Column("LOCAFLAGS")]
        public int? Flags { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAIDLEMACROKEYID</para>
        /// </summary>
        [Column("LOCAIDLEMACROKEYID")]
        public int? IdlemacroKeyId { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAIDLEMACROTIME</para>
        /// </summary>
        [Column("LOCAIDLEMACROTIME")]
        public int? Idlemacrotime { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAINFO</para>
        /// </summary>
        [Column("LOCAINFO")]
        [MaxLength(60)]
        public string Info { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAISMASTER</para>
        /// Used to indicate if this location is a master location.
        /// Master locations is used to have an easy way to set options for multiple locations in one go.
        /// </summary>
        [Column("LOCAISMASTER")]
        [Required]
        public bool IsMaster { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAMACROKEYID</para>
        /// The default macro for the location. If assigned this macro is executed whenever a user logs in to the location.
        /// </summary>
        [Column("LOCAMACROKEYID")]
        public int? MacroKeyId { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAMASTERLOCAKEYID</para>
        /// KeyID of this locations master location. Is null for master locations, and for locations without master location.
        /// </summary>
        [Column("LOCAMASTERLOCAKEYID")]
        public int? MasterLocaKeyId { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAMESCONFIG</para>
        /// Holds location/table preference regarding MES
        /// </summary>
        [Column("LOCAMESCONFIG")]
        public string MesConfig { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCANAME</para>
        /// User defined name of the location
        /// </summary>
        [Column("LOCANAME")]
        [Required, MaxLength(60)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAPROCESS</para>
        /// The type of process conducted at the location.
        ///
        /// The value maps to a TProcessType constant in TDConst.pas in the range
        /// None..Last
        ///
        /// A special case is locations used to run Admin and Machines where Process will be None.
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None              = 0
        ///   Pack              = 1
        ///   SteriPostBatch    = 2
        ///   Out               = 3
        ///   Return            = 4
        ///   Prepare           = 5
        ///   Wrap              = 6
        ///   LitePro           = 7
        ///   SteriPreBatch     = 8
        ///   Flash             = 9
        ///   Location          = 10
        ///   WashPreBatch      = 11
        ///   WashPostBatch     = 12
        ///   OpenUsed          = 13
        ///   Operation         = 14
        ///   Order             = 15
        ///   Inventory         = 16
        ///   OrderPick         = 17
        ///   Industry          = 18
        ///   PreDisPreBatch    = 19
        ///   LoadQueue         = 20
        ///   PurchaseOrder     = 21
        ///   EndoscopePreBatch = 22
        ///   WashCheck         = 23
        ///   ExtBatchInfo      = 24
        ///   EndoCleanAndTest  = 25
        ///   Transport         = 26
        ///   Last              = 27
        /// ********************************************************************************
        /// </summary>
        [Column("LOCAPROCESS")]
        [Required]
        public ProcessType Process { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAPROCESSOPT</para>
        /// A memo text field that holds the options that apply to the given process.
        ///
        /// Currently the ini-file format is keept but this is subject to change.
        /// </summary>
        [Column("LOCAPROCESSOPT")]
        public string ProcessOpt { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCASTATUS</para>
        /// Indicates the status of the location. Valid values are:
        ///
        ///   stNormal = 10
        ///   stDead   = 90
        ///
        /// It is not possible to attach to locations with status stDead. This effectively prevents them from being used for production.
        /// </summary>
        [Column("LOCASTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCASTOKKEYID</para>
        /// The stock associated with the location.
        ///
        /// For locations where LOCAPROCESS=ptNone (ie. Admin) this field holds the default stock used. The individual users can set another default stock in their desktop file if required.
        /// </summary>
        [Column("LOCASTOKKEYID")]
        public int? StokKeyId { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCASUBPROCESS</para>
        /// The type of sub-process to the process conducted at the location.
        ///
        /// The value maps to a TLocaSubProcessType constant in TDConst.pas
        /// TLocaSubProcessType = (None, Admin, Machine);
        ///
        /// Determines either Admin process (LOCAPROCESS=0) has Admin or Machine sub-process. Else - none.
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None    = 0
        ///   Admin   = 1
        ///   Machine = 2
        /// ********************************************************************************
        /// </summary>
        [Column("LOCASUBPROCESS")]
        [Required]
        public LocaSubProcessType SubProcess { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCATAG</para>
        /// No longer used. A new field &#39;LOCADIRECTION&#39; is used instead.
        /// </summary>
        [Column("LOCATAG")]
        public int? Tag { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAUIAVAILABILITY</para>
        /// Determines if/how the location is selectable in the Scanner UI.
        ///
        /// Possible values:
        /// - Default = Same as Visible
        /// - Visible = Immediately visible for selection
        /// - Advanced = Visible for selection under advanced options
        /// - Hidden = Not visible for selection****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Default  = 0
        ///   Visible  = 1
        ///   Advanced = 2
        ///   Hidden   = 3
        /// ********************************************************************************
        /// </summary>
        [Column("LOCAUIAVAILABILITY")]
        public UILocaAvailability? UIAvailability { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAUILDKEYID</para>
        /// The KeyID of the Default UI Layer used for this location.
        /// </summary>
        [Column("LOCAUILDKEYID")]
        public int? UiLdKeyId { get; set; }

        /// <summary>
        /// <para>TLOCATIO.LOCAUISTARTMODE</para>
        /// Determines how the Scanner Client will look when started and when a new user logs in.
        ///
        /// Possible values:
        /// - 0=Default(Use Factory setting)
        /// - 1=UI Layer Mode
        /// - 2=Grid mode
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Default = 0
        ///   Layers  = 1
        ///   Grid    = 2
        /// ********************************************************************************
        /// </summary>
        [Column("LOCAUISTARTMODE")]
        public ScanUIStartMode? UIStartMode { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: AutoStokKeyId -> StocksModel.KeyId (TLOCATIO.LOCAAUTOSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(AutoStokKeyId))]
        public StocksModel AutoStok { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TLOCATIO.LOCA_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: DefUserKeyId -> UserModel.KeyId (TLOCATIO.LOCADEFUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(DefUserKeyId))]
        public UserModel DefUser { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TLOCATIO.LOCAFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: MasterLocaKeyId -> LocationModel.KeyId (TLOCATIO.LOCAMASTERLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(MasterLocaKeyId))]
        public LocationModel MasterLoca { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TLOCATIO.LOCA_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: StokKeyId -> StocksModel.KeyId (TLOCATIO.LOCASTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(StokKeyId))]
        public StocksModel Stok { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of MachineModel instances.
        /// <para />
        /// Foreign key: MachineModel.DestApproveLocaKeyId -> KeyId (TMACHINE.MACHDESTAPPROVELOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [InverseProperty("DestApproveLoca")]
        public List<MachineModel> DestApproveLocaMachineList { get; set; }

        /// <summary>
        /// Reference to a collection of MachineModel instances.
        /// <para />
        /// Foreign key: MachineModel.DestDisapproveLocaKeyId -> KeyId (TMACHINE.MACHDESTDISAPPROVELOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [InverseProperty("DestDisapproveLoca")]
        public List<MachineModel> DestDisapproveLocaMachineList { get; set; }

        /// <summary>
        /// Reference to a collection of MachineModel instances.
        /// <para />
        /// Foreign key: MachineModel.DestEndErrorLocaKeyId -> KeyId (TMACHINE.MACHDESTENDERRORLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [InverseProperty("DestEndErrorLoca")]
        public List<MachineModel> DestEndErrorLocaMachineList { get; set; }

        /// <summary>
        /// Reference to a collection of MachineModel instances.
        /// <para />
        /// Foreign key: MachineModel.DestEndLocaKeyId -> KeyId (TMACHINE.MACHDESTENDLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [InverseProperty("DestEndLoca")]
        public List<MachineModel> DestEndLocaMachineList { get; set; }

        /// <summary>
        /// Reference to a collection of ExtDocRefLinkModel instances.
        /// <para />
        /// Foreign key: ExtDocRefLinkModel.LocaKeyId -> KeyId (TEXTDOCREFLINK.EDRLLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [InverseProperty("Loca")]
        public List<ExtDocRefLinkModel> LocaExtDocRefLinkList { get; set; }

        /// <summary>
        /// Reference to a collection of MachLocationModel instances.
        /// <para />
        /// Foreign key: MachLocationModel.LocaKeyId -> KeyId (TMACHLOCATION.MCLOCLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [InverseProperty("Loca")]
        public List<MachLocationModel> LocaMachLocationList { get; set; }

        /// <summary>
        /// Reference to a collection of MesTaskLocationsModel instances.
        /// <para />
        /// Foreign key: MesTaskLocationsModel.LocaKeyId -> KeyId (TMESTASKLOCATIONS.MTLCALOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [InverseProperty("Loca")]
        public List<MesTaskLocationsModel> LocaMesTaskLocationsList { get; set; }

        /// <summary>
        /// Reference to a collection of PosLocationModel instances.
        /// <para />
        /// Foreign key: PosLocationModel.LocaKeyId -> KeyId (TPOSLOCA.PLOLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [InverseProperty("Loca")]
        public List<PosLocationModel> LocaPosLocationList { get; set; }

        /// <summary>
        /// Reference to a collection of TagsModel instances.
        /// <para />
        /// Foreign key: TagsModel.LocaKeyId -> KeyId (TTAGS.TAGSLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [InverseProperty("Loca")]
        public List<TagsModel> LocaTagsList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitLocationModel instances.
        /// <para />
        /// Foreign key: UnitLocationModel.LocationKeyId -> KeyId (TUNITLCA.ULCALOCATIONKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [InverseProperty("Location")]
        public List<UnitLocationModel> LocationUnitLocationList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitModel instances.
        /// <para />
        /// Foreign key: UnitModel.LocaKeyId -> KeyId (TUNIT.UNITLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [InverseProperty("Loca")]
        public List<UnitModel> LocaUnitList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TLOTINFO table.
    /// Holds information about LOT numbers.
    /// LOT numbers can be created in TDAdmin, and with various scanners.
    /// LOT numbers can then be associated with indicators, order lines (items), patient consumptions and units (items).
    /// </summary>
    [Table("TLOTINFO")]
    public class LotInfoModel
    {
        /// <summary>
        /// <para>TLOTINFO.LOTINKEYID</para>
        /// Standard KeyID
        /// </summary>
        [Column("LOTINKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TLOTINFO.LOTIN_CREATED</para>
        /// </summary>
        [Column("LOTIN_CREATED", TypeName = "datetime")]
        [Required]
        public DateTime Created { get; set; }

        /// <summary>
        /// <para>TLOTINFO.LOTIN_CREATEDKEYID</para>
        /// </summary>
        [Column("LOTIN_CREATEDKEYID")]
        [Required]
        public int CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TLOTINFO.LOTIN_MODIFIED</para>
        /// </summary>
        [Column("LOTIN_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TLOTINFO.LOTIN_MODIFIEDKEYID</para>
        /// </summary>
        [Column("LOTIN_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TLOTINFO.LOTINEXPIREDATE</para>
        /// An optional expire date of the LOT.
        /// </summary>
        [Column("LOTINEXPIREDATE", TypeName = "datetime")]
        public DateTime? ExpireDate { get; set; }

        /// <summary>
        /// <para>TLOTINFO.LOTINITEMKEYID</para>
        /// A reference to TITEM if relevant.
        /// </summary>
        [Column("LOTINITEMKEYID")]
        public int? ItemKeyId { get; set; }

        /// <summary>
        /// <para>TLOTINFO.LOTINLASTUSED</para>
        /// The time, LOT number was last time linked to item
        /// </summary>
        [Column("LOTINLASTUSED", TypeName = "datetime")]
        public DateTime? LastUsed { get; set; }

        /// <summary>
        /// <para>TLOTINFO.LOTINLOCAKEYID</para>
        /// The location where the record was created/edited.
        /// </summary>
        [Column("LOTINLOCAKEYID")]
        [Required]
        public int LocaKeyId { get; set; }

        /// <summary>
        /// <para>TLOTINFO.LOTINLOT</para>
        /// The LOT number/information.
        /// </summary>
        [Column("LOTINLOT")]
        [Required, MaxLength(200)]
        public string Lot { get; set; }

        /// <summary>
        /// <para>TLOTINFO.LOTINREMARK</para>
        /// Free text field for additional info.
        /// </summary>
        [Column("LOTINREMARK")]
        public string Remark { get; set; }

        /// <summary>
        /// <para>TLOTINFO.LOTINSTATUS</para>
        /// Values come from an enumeration in TDConst.
        /// 0 = Active
        /// 1 = Disabled
        /// </summary>
        [Column("LOTINSTATUS")]
        [Required]
        public LotStatus Status { get; set; }

        /// <summary>
        /// <para>TLOTINFO.LOTINSUPPKEYID</para>
        /// A reference to TSUPPLIE if relevant.
        /// </summary>
        [Column("LOTINSUPPKEYID")]
        public int? SuppKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TLOTINFO.LOTIN_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: ItemKeyId -> ItemModel.KeyId (TLOTINFO.LOTINITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(ItemKeyId))]
        public ItemModel Item { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TLOTINFO.LOTINLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TLOTINFO.LOTIN_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: SuppKeyId -> SupplierModel.KeyId (TLOTINFO.LOTINSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppKeyId))]
        public SupplierModel Supp { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of TagContentModel instances.
        /// <para />
        /// Foreign key: TagContentModel.LotInKeyId -> KeyId (TTAGCONTENT.TAGCLOTINKEYID -> TLOTINFO.LOTINKEYID)
        /// </summary>
        [InverseProperty("LotIn")]
        public List<TagContentModel> LotInTagContentList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TMACHDISPLAYGROUP table.
    /// This table holds the defined machine display groups.
    /// These are used when display machines T-DOC is logging data from.
    /// </summary>
    [Table("TMACHDISPLAYGROUP")]
    public class MachDisplayGroupModel
    {
        /// <summary>
        /// <para>TMACHDISPLAYGROUP.MCDGRPKEYID</para>
        /// The KeyID of the display group.
        /// </summary>
        [Column("MCDGRPKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TMACHDISPLAYGROUP.MCDGRPDISPLAYGROUP</para>
        /// The &quot;number&quot; of the display group.
        /// </summary>
        [Column("MCDGRPDISPLAYGROUP")]
        [Required, MaxLength(20)]
        public string DisplayGroup { get; set; }

        /// <summary>
        /// <para>TMACHDISPLAYGROUP.MCDGRPFACKEYID</para>
        /// A reference to the factory the group belongs to.
        ///
        /// Though the field can be null this is currently not used. All groups must be linked to a factory.
        /// </summary>
        [Column("MCDGRPFACKEYID")]
        public int? FacKeyId { get; set; }

        /// <summary>
        /// <para>TMACHDISPLAYGROUP.MCDGRPNAME</para>
        /// The name of the display group.
        /// </summary>
        [Column("MCDGRPNAME")]
        [Required, MaxLength(50)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TMACHDISPLAYGROUP.MCDGRPPARENTKEYID</para>
        /// The parent display group, if the group is not a top level group.
        ///
        /// Not implemented. Reserved for future use.
        /// </summary>
        [Column("MCDGRPPARENTKEYID")]
        public int? ParentKeyId { get; set; }

        /// <summary>
        /// <para>TMACHDISPLAYGROUP.MCDGRPREMARK</para>
        /// A remark for the group.
        /// </summary>
        [Column("MCDGRPREMARK")]
        public string Remark { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TMACHDISPLAYGROUP.MCDGRPFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a MachDisplayGroupModel instance.
        /// <para />
        /// Foreign key: ParentKeyId -> MachDisplayGroupModel.KeyId (TMACHDISPLAYGROUP.MCDGRPPARENTKEYID -> TMACHDISPLAYGROUP.MCDGRPKEYID)
        /// </summary>
        [ForeignKey(nameof(ParentKeyId))]
        public MachDisplayGroupModel Parent { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TMACHDISPLAYGROUPLINK table.
    /// This table links machines to one or more display groups.
    /// A machine can be a member of an unlimited number of groups, but it is not required to be a member of any group.
    /// </summary>
    [Table("TMACHDISPLAYGROUPLINK")]
    public class MachDisplayGroupLinkModel
    {
        /// <summary>
        /// <para>TMACHDISPLAYGROUPLINK.MCDLNKMACHKEYID</para>
        /// A link to the machine.
        /// </summary>
        [Column("MCDLNKMACHKEYID")]
        [Required]
        public int MachKeyId { get; set; }

        /// <summary>
        /// <para>TMACHDISPLAYGROUPLINK.MCDLNKMCDGRPKEYID</para>
        /// A link to the machine display group.
        /// </summary>
        [Column("MCDLNKMCDGRPKEYID")]
        [Required]
        public int McDGrpKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a MachineModel instance.
        /// <para />
        /// Foreign key: MachKeyId -> MachineModel.KeyId (TMACHDISPLAYGROUPLINK.MCDLNKMACHKEYID -> TMACHINE.MACHKEYID)
        /// </summary>
        [ForeignKey(nameof(MachKeyId))]
        public MachineModel Mach { get; set; }

        /// <summary>
        /// Reference to a MachDisplayGroupModel instance.
        /// <para />
        /// Foreign key: McDGrpKeyId -> MachDisplayGroupModel.KeyId (TMACHDISPLAYGROUPLINK.MCDLNKMCDGRPKEYID -> TMACHDISPLAYGROUP.MCDGRPKEYID)
        /// </summary>
        [ForeignKey(nameof(McDGrpKeyId))]
        public MachDisplayGroupModel McDGrp { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TMACHINE table.
    /// *****************************************************************************
    /// WHEN CHANGING FIELDS REMEMBER TO UPDATE uInitMach.pas CreateAMachine!
    /// *****************************************************************************
    ///
    /// Holds all the actual machines. The types are taken from TMACHINT.
    /// </summary>
    [Table("TMACHINE")]
    public class MachineModel
    {
        /// <summary>
        /// <para>TMACHINE.MACHKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("MACHKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACH_CREATED</para>
        /// </summary>
        [Column("MACH_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACH_CREATEDKEYID</para>
        /// </summary>
        [Column("MACH_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACH_MODIFIED</para>
        /// </summary>
        [Column("MACH_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACH_MODIFIEDKEYID</para>
        /// </summary>
        [Column("MACH_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHACTUALPROGRAMCHECK</para>
        /// This field controls if/how T-DOC checks the actual run program against the program scanned when the batch was initiated with a scanner.
        /// the check is ONLY performed at the time of MANUAL approval and only if a program has actually been scanned when the batch was initiated.
        ///
        /// Possible values are:
        /// 0 = Off - No check is performed
        /// 1 = WarningPrompt - If the programs differ a warning is issued but approval is completed if the user confirms.
        /// 2 = Error - An error message is given. Approval of the batch is not possible.
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Off           = 0
        ///   WarningPrompt = 1
        ///   Error         = 2
        /// ********************************************************************************
        /// </summary>
        [Column("MACHACTUALPROGRAMCHECK")]
        public ActualProgramCheck? ActualProgramCheck { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHAGSKEYID</para>
        /// Ref. to TAGS, if machine is attached to a load queue.
        /// </summary>
        [Column("MACHAGSKEYID")]
        public int? AgsKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHALERTDELAY</para>
        /// Not implemented.
        /// </summary>
        [Column("MACHALERTDELAY")]
        public int? Alertdelay { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHALLOWBATCH</para>
        /// If true batch registration is allowed on the machine.
        /// </summary>
        [Column("MACHALLOWBATCH")]
        [Required]
        public bool AllowBatch { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHALLOWDATAEXPORT</para>
        /// </summary>
        [Column("MACHALLOWDATAEXPORT")]
        [Required]
        public bool AllowDataExport { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHALLOWLOG</para>
        /// If true datalogging and Process Image scan is allowed on the machine.
        /// </summary>
        [Column("MACHALLOWLOG")]
        [Required]
        public bool AllowLog { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHBARCODE</para>
        /// </summary>
        [Column("MACHBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHCHARGENUMMODE</para>
        /// Can a charge/cycle number be provided by scanning?
        ///
        /// 0=Not possible
        /// 1=Possible
        /// 2=Must be provided
        /// </summary>
        [Column("MACHCHARGENUMMODE")]
        public int? Chargenummode { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHCONFDATA</para>
        /// </summary>
        [Column("MACHCONFDATA")]
        public string ConfData { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHCYCLECOUNT</para>
        /// The total number of cycles that TDOC has registered for the machine
        /// </summary>
        [Column("MACHCYCLECOUNT")]
        [Required]
        public int CycleCount { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHDEFPROGFROMMODEL</para>
        /// </summary>
        [Column("MACHDEFPROGFROMMODEL")]
        [Required]
        public bool DefProgFromModel { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHDEFPROGKEYID</para>
        /// </summary>
        [Column("MACHDEFPROGKEYID")]
        public int? DefProgKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHDESTAPPROVELOCAKEYID</para>
        /// Can be set to a location with Process=Location. If set then units, and any tags that contain the units, are moved to this location when a machine process is approved.
        /// If the machine process is disapproved then the units/tags are NOT moved to this location, but instead to the location specified in MACHDESTDISAPPROVELOCAKEYID.
        ///
        /// NOTE: See documentation for MACHDESTENDLOCAKEYID for more details.
        /// </summary>
        [Column("MACHDESTAPPROVELOCAKEYID")]
        public int? DestApproveLocaKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHDESTDISAPPROVELOCAKEYID</para>
        /// Can be set to a location with Process=Location. If set then units, and any tags that contain the units, are moved to this location when a machine process is disapproved.
        /// If the machine process is approved then the units/tags are NOT moved to this location, but instead to the location specified in MACHDESTAPPROVELOCAKEYID.
        ///
        /// NOTE: See documentation for MACHDESTENDLOCAKEYID for more details.
        /// </summary>
        [Column("MACHDESTDISAPPROVELOCAKEYID")]
        public int? DestDisapproveLocaKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHDESTENDERRORLOCAKEYID</para>
        /// Can be set to a location with Process=Location. If set then units, and any tags that contain the units, are moved to this location when a machine process ends with an reported error.
        /// If the machine process ends without an error then the units/tags are NOT moved to this location, but instead to the location specified in MACHDESTENDLOCAKEYID.
        ///
        /// NOTE: See documentation for MACHDESTENDLOCAKEYID for more details.
        /// </summary>
        [Column("MACHDESTENDERRORLOCAKEYID")]
        public int? DestEndErrorLocaKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHDESTENDLOCAKEYID</para>
        /// Can be set to a location with Process=Location. If set then units, and any tags that contain the units, are moved to this location when a machine process ends with no reported error.
        /// If the machine process ends with an error then the units/tags are NOT moved to this location, but instead to the location specified in MACHDESTENDERRORLOCAKEYID.
        ///
        /// The functionality is currently only available for machines of type Sterilizer, Washer and EndoWasher.
        ///
        /// The four new fields are available in the Machine window on the Setup tab.
        /// In the group &quot;Process end locations&quot; you find the fields:
        /// - Process end destination: Used when a process ends sucessfully (i.e. no errors reported from the machine)
        /// - Process end error destination: Used when a process ends unsucessfully with en error reported from the machine.
        /// For machines with datalogging a process ends when it is reported &quot;Done&quot; by the machine. I.e. when the Process gets status=Done. For &quot;manual&quot; machines without datalogging this happens immediately when the process is created.
        ///
        /// In the group &quot;Process approval locations&quot; you find the fields:
        /// - Approval destination: Used when a process is approved by a user.
        /// - Disapproval destination: Used when a process is disapproved by a user.
        ///
        /// For all four fields it is only possible to select locations with Process type=Location. It is possible to set zero, one or more of the four new fields in any combination.
        ///
        /// What is moved?
        /// 1. All Units that were/are in the batch/process are moved to the specified location.
        /// 2. All Tags that contain one or more Units that were/are in the process are also moved. This includes any &quot;parent&quot; tags. So if a Unit is in a bundle, that is in a basket that is in a load, then both load, basket and bundle tags are moved. Note that the Units must still be in tags tags at the time the move takes place. Tags that were dissolved (i.e. did not survive) until the time the move takes place are not moved.
        ///
        /// Special case for &quot;manual&quot; machines:
        /// When a &quot;manual&quot; machines without datalogging runs a program that does NOT require approval, then the &quot;Approval destination&quot; location is still used. And it is used automatically and immediately. So if both the &quot;Process end destination&quot; and &quot;Approval destination&quot; are set tyhe units/tags are first moved to the &quot;End location&quot; and then to the &quot;Approval location&quot;, and this takes place as soon as the batch is created.
        /// </summary>
        [Column("MACHDESTENDLOCAKEYID")]
        public int? DestEndLocaKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHINFO</para>
        /// Free text
        /// </summary>
        [Column("MACHINFO")]
        public string Info { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHINITBATCHCOUNT</para>
        /// How many batches can have status &quot;Initiated&quot;, ie. number of active batches.
        /// Possible values are:
        ///
        /// -2=Last batch must be approved
        ///  0=Last batch must have ended
        ///  1=Allow 1 initiated batch
        ///  2=Allow 2 initiated batches
        ///  3=Allow 3 initiated batches
        ///  4=Allow 4 initiated batches
        ///  5=Allow 5 initiated batches
        /// </summary>
        [Column("MACHINITBATCHCOUNT")]
        [Required]
        public int InitBatchCount { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHLASTCYCLECOUNT</para>
        /// Holds the values present the last time a trigger was fired on this value.
        /// </summary>
        [Column("MACHLASTCYCLECOUNT")]
        public int? LastCycleCount { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHLASTMINUTESON</para>
        /// Holds the values present the last time a trigger was fired on this value.
        /// </summary>
        [Column("MACHLASTMINUTESON")]
        public int? LastMinutesOn { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHLASTMINUTESRUN</para>
        /// Holds the values present the last time a trigger was fired on this value.
        /// </summary>
        [Column("MACHLASTMINUTESRUN")]
        public int? LastMinutesRun { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHLOADONSTART</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   UseModelValue = 0
        ///   Yes           = 1
        ///   No            = 2
        /// ********************************************************************************
        /// </summary>
        [Column("MACHLOADONSTART")]
        [Required]
        public MachineLoadOnStart LoadOnStart { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHLOGBATCHCONTENT</para>
        /// Determines how potential batch content information in logged data is used.
        ///
        /// Possible values are:
        /// 0: Not used even if present.
        /// 1: Batch registration of logged batch content is On/Enabled.
        /// </summary>
        [Column("MACHLOGBATCHCONTENT")]
        [Required]
        public LogBatchContent LogBatchContent { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHMCTYPKEYID</para>
        /// Ref. to machine type
        /// </summary>
        [Column("MACHMCTYPKEYID")]
        [Required]
        public int McTypKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHMINUTESON</para>
        /// The total number of minutes that TDOC has been in actual contact with the machine
        /// </summary>
        [Column("MACHMINUTESON")]
        [Required]
        public int MinutesOn { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHMINUTESRUN</para>
        /// The total number of minutes that TDOC has registered a running cycle on the machine
        /// </summary>
        [Column("MACHMINUTESRUN")]
        [Required]
        public int MinutesRun { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHNAME</para>
        /// The name of the machine
        /// </summary>
        [Column("MACHNAME")]
        [Required, MaxLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRESCAN</para>
        /// Indicates if scanning are conducted on the front or rear side of the machine
        /// </summary>
        [Column("MACHPRESCAN")]
        [Required]
        public bool Prescan { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRINTLABELAPPROVE</para>
        /// If True, print selected labels when the process is approved.
        /// </summary>
        [Column("MACHPRINTLABELAPPROVE")]
        [Required]
        public bool PrintLabelApprove { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRINTLABELDISAPPR</para>
        /// If True, print selected labels when the process is disapproved.
        /// </summary>
        [Column("MACHPRINTLABELDISAPPR")]
        [Required]
        public bool PrintLabelDisappr { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRINTLABELEND</para>
        /// If True, print selected labels when the process is ended.
        /// </summary>
        [Column("MACHPRINTLABELEND")]
        [Required]
        public bool PrintLabelEnd { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRINTLABELINIT</para>
        /// If True, print selected labels when the process is initiated.
        /// </summary>
        [Column("MACHPRINTLABELINIT")]
        [Required]
        public bool PrintLabelInit { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRINTLABELSTART</para>
        /// If True, print selected labels when the process is started.
        /// </summary>
        [Column("MACHPRINTLABELSTART")]
        [Required]
        public bool PrintLabelStart { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRINTLABELSTICKERS</para>
        /// If True, print stickers (for each unit) when the process is approved.
        /// </summary>
        [Column("MACHPRINTLABELSTICKERS")]
        [Required]
        public bool PrintLabelStickers { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRINTLISTAPPROVE</para>
        /// If True, print selected lists when the process is approved.
        /// </summary>
        [Column("MACHPRINTLISTAPPROVE")]
        [Required]
        public bool PrintListApprove { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRINTLISTDISAPPR</para>
        /// If True, print selected lists when the process is disapproved.
        /// </summary>
        [Column("MACHPRINTLISTDISAPPR")]
        [Required]
        public bool PrintListDisappr { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRINTLISTEND</para>
        /// If True, print selected lists when the process is ended.
        /// </summary>
        [Column("MACHPRINTLISTEND")]
        [Required]
        public bool PrintListEnd { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRINTLISTINIT</para>
        /// If True, print selected lists when the process is initiated.
        /// </summary>
        [Column("MACHPRINTLISTINIT")]
        [Required]
        public bool PrintListInit { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRINTLISTSTART</para>
        /// If True, print selected lists when the process is started.
        /// </summary>
        [Column("MACHPRINTLISTSTART")]
        [Required]
        public bool PrintListStart { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHPRINTNATIVEPDF</para>
        /// </summary>
        [Column("MACHPRINTNATIVEPDF")]
        [Required]
        public int PrintNativePdf { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHREFNUM</para>
        /// Link to TDOC.INI.  (SYSTEM SETTING)
        ///
        /// This is NO longer the machine number to use for scannings. Use the KeyID instead.
        /// </summary>
        [Column("MACHREFNUM")]
        [Required]
        public int RefNum { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHSERIALNO</para>
        /// The manufacturers serialnumber for the machine (not a TDOC number).
        /// </summary>
        [Column("MACHSERIALNO")]
        [MaxLength(30)]
        public string SerialNo { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHSHIFTTOHOURS</para>
        /// </summary>
        [Column("MACHSHIFTTOHOURS")]
        public int? ShiftToHours { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHTEXT</para>
        /// A longer more descriptive name for the machine
        /// </summary>
        [Column("MACHTEXT")]
        [MaxLength(80)]
        public string Text { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHUPDATEINTERVAL</para>
        /// </summary>
        [Column("MACHUPDATEINTERVAL")]
        public int? Updateinterval { get; set; }

        /// <summary>
        /// <para>TMACHINE.MACHWARNEMPTYBATCH</para>
        /// Is it possible to create an empty batch (ie. no units)?
        ///
        /// 0=Not possible
        /// 1=Possible
        /// 2=Warning
        /// </summary>
        [Column("MACHWARNEMPTYBATCH")]
        public int? Warnemptybatch { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a AGSModel instance.
        /// <para />
        /// Foreign key: AgsKeyId -> AGSModel.KeyId (TMACHINE.MACHAGSKEYID -> TAGS.AGSKEYID)
        /// </summary>
        [ForeignKey(nameof(AgsKeyId))]
        public AGSModel Ags { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TMACHINE.MACH_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a ProgramModel instance.
        /// <para />
        /// Foreign key: DefProgKeyId -> ProgramModel.KeyId (TMACHINE.MACHDEFPROGKEYID -> TPROGRAM.PROGKEYID)
        /// </summary>
        [ForeignKey(nameof(DefProgKeyId))]
        public ProgramModel DefProg { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: DestApproveLocaKeyId -> LocationModel.KeyId (TMACHINE.MACHDESTAPPROVELOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(DestApproveLocaKeyId))]
        public LocationModel DestApproveLoca { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: DestDisapproveLocaKeyId -> LocationModel.KeyId (TMACHINE.MACHDESTDISAPPROVELOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(DestDisapproveLocaKeyId))]
        public LocationModel DestDisapproveLoca { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: DestEndErrorLocaKeyId -> LocationModel.KeyId (TMACHINE.MACHDESTENDERRORLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(DestEndErrorLocaKeyId))]
        public LocationModel DestEndErrorLoca { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: DestEndLocaKeyId -> LocationModel.KeyId (TMACHINE.MACHDESTENDLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(DestEndLocaKeyId))]
        public LocationModel DestEndLoca { get; set; }

        /// <summary>
        /// Reference to a MachineTypeModel instance.
        /// <para />
        /// Foreign key: McTypKeyId -> MachineTypeModel.KeyId (TMACHINE.MACHMCTYPKEYID -> TMACHINT.MCTYPKEYID)
        /// </summary>
        [ForeignKey(nameof(McTypKeyId))]
        public MachineTypeModel McTyp { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TMACHINE.MACH_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of ExtDocRefLinkModel instances.
        /// <para />
        /// Foreign key: ExtDocRefLinkModel.MachKeyId -> KeyId (TEXTDOCREFLINK.EDRLMACHKEYID -> TMACHINE.MACHKEYID)
        /// </summary>
        [InverseProperty("Mach")]
        public List<ExtDocRefLinkModel> MachExtDocRefLinkList { get; set; }

        /// <summary>
        /// Reference to a collection of MachLocationModel instances.
        /// <para />
        /// Foreign key: MachLocationModel.MachKeyId -> KeyId (TMACHLOCATION.MCLOCMACHKEYID -> TMACHINE.MACHKEYID)
        /// </summary>
        [InverseProperty("Mach")]
        public List<MachLocationModel> MachMachLocationList { get; set; }

        /// <summary>
        /// Reference to a collection of ProcessModel instances.
        /// <para />
        /// Foreign key: ProcessModel.MachKeyId -> KeyId (TPROCESS.PROCMACHKEYID -> TMACHINE.MACHKEYID)
        /// </summary>
        [InverseProperty("Mach")]
        public List<ProcessModel> MachProcessList { get; set; }

        /// <summary>
        /// Reference to a collection of EventModel instances.
        /// <para />
        /// Foreign key: EventModel.RefKeyId -> KeyId (TEVENT.EVNTREFKEYID -> TMACHINE.MACHKEYID)
        /// </summary>
        [InverseProperty("RefMachine")]
        public List<EventModel> RefMachineEventList { get; set; }

        /// <summary>
        /// Reference to a collection of PictureRefModel instances.
        /// <para />
        /// Foreign key: PictureRefModel.RefMachKeyId -> KeyId (TPICTREF.PICTREFMACHKEYID -> TMACHINE.MACHKEYID)
        /// </summary>
        [InverseProperty("RefMach")]
        public List<PictureRefModel> RefMachPictureRefList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TMACHINT table.
    /// *****************************************************************************
    /// WHEN CHANGING FIELDS REMEMBER TO UPDATE uInitMach.pas CreateAMachType!
    /// *****************************************************************************
    ///
    /// Holds all types of machines (models).
    /// </summary>
    [Table("TMACHINT")]
    public class MachineTypeModel
    {
        /// <summary>
        /// <para>TMACHINT.MCTYPKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("MCTYPKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYP_CREATED</para>
        /// </summary>
        [Column("MCTYP_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYP_CREATEDKEYID</para>
        /// </summary>
        [Column("MCTYP_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYP_MODIFIED</para>
        /// </summary>
        [Column("MCTYP_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYP_MODIFIEDKEYID</para>
        /// </summary>
        [Column("MCTYP_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPABSOLUTEPRESSURE</para>
        /// If true, pressure values from the machine are considered absolute, else they are relative to 1000 mBar, or the measured pressure (see McTypUseMAP).
        /// </summary>
        [Column("MCTYPABSOLUTEPRESSURE")]
        [Required]
        public bool AbsolutePressure { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPAUTOCREATEDINDIC</para>
        /// An Incubator machine can only incubate indicators based on BI types that has the same &#39;Auto created indicators&#39; setting value as the Incubator’s Machine model.
        ///
        /// Only applicable for Incubator machine models.
        /// </summary>
        [Column("MCTYPAUTOCREATEDINDIC")]
        [Required]
        public bool AutoCreatedIndic { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPBASKETDEPTH</para>
        /// The depth of the standard basket used in this type of machine.
        ///
        /// (Stored in internal units)
        /// </summary>
        [Column("MCTYPBASKETDEPTH")]
        public int? BasketDepth { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPBASKETFITS</para>
        /// The number of standard basket used in this type of machine that will fit in it at the same time.
        /// </summary>
        [Column("MCTYPBASKETFITS")]
        public int? BasketFits { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPBASKETHEIGHT</para>
        /// The height of the standard basket used in this type of machine.
        ///
        /// (Stored in internal units)
        /// </summary>
        [Column("MCTYPBASKETHEIGHT")]
        public int? BasketHeight { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPBASKETWIDTH</para>
        /// The width of the standard basket used in this type of machine.
        ///
        /// (Stored in internal units)
        /// </summary>
        [Column("MCTYPBASKETWIDTH")]
        public int? BasketWidth { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPCANAUTOCREATEBI</para>
        /// If set to &#39;Yes&#39; there must be an AUTO Indicator type associated to the machine program.
        ///
        /// Only applicable for Sterilizer machine models.
        /// </summary>
        [Column("MCTYPCANAUTOCREATEBI")]
        [Required]
        public bool CanAutoCreateBI { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPCBIUSAGEMODE</para>
        /// Tells how control BIs are used. Only applicable for incubators.
        /// Possible values are (TCBIUsageMode):
        ///  - Daily (Daily = 0)
        ///  - Daily per machine (DailyPerMachine = 1)
        ///  - None (None = 2)
        /// </summary>
        [Column("MCTYPCBIUSAGEMODE")]
        public CBIUsageMode? CBIUsageMode { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPDEFPROGKEYID</para>
        /// </summary>
        [Column("MCTYPDEFPROGKEYID")]
        public int? DefProgKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPFIXEDTIME</para>
        /// The number of minutes subtracted from or added to the SE Time when the scope is put into the cabinet.
        /// </summary>
        [Column("MCTYPFIXEDTIME")]
        public int? FixedTime { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPINCUBATORTYPE</para>
        /// TIncubatorType
        /// This enumeration type is used to indicate the type of the incubator in case if the Machine model is specified as Incubator (MCTYPTYPE = mtIncubator).
        /// For the current moment this setting is used to determine Batch data incubator among the other types of the supported incubators (manual and 3M) to split their functionality. That&#39;s why this field is called in UI as &quot;Batch data incubator&quot; and the related dropdown contains 2 values &#39;No&#39;/&#39;Yes&#39; like for a boolean field. So if a ney type of an incubators comes the name of this field will be changed to &quot;Incubator type&quot; and the dropdown values will be changed from &#39;No&#39;/&#39;Yes&#39; to &#39;Batch data incubator&#39;/&#39;New incubator&#39;/&#39;Other&#39; or smth like this.
        ///
        /// TIncubatorType = (Other, Batch)
        ///
        /// Other:
        ///   The Incubator model is manual incubator or 3M incubator (&#39;No&#39; value in the related dropdown for now).
        ///
        /// Batch:
        ///   The Incubator model is Batch data incubator (&#39;Yes&#39; value in the related dropdown for now).
        /// </summary>
        [Column("MCTYPINCUBATORTYPE")]
        [Required]
        public IncubatorType IncubatorType { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPLOADONSTART</para>
        /// </summary>
        [Column("MCTYPLOADONSTART")]
        [Required]
        public bool LoadOnStart { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPLOGBATCHREGERROR</para>
        /// A reference to the error code that should be used to assign to processes where batch registration via data logging fails.
        /// </summary>
        [Column("MCTYPLOGBATCHREGERROR")]
        [Required]
        public int LogBatchRegError { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPLOGBATCHREGMODE</para>
        /// Determines if the machine type is capable of providing batch content via data logging.
        ///
        /// Possible values are:
        /// 0: The machine type is not capable of providing this information OR T-DOC should completely ignore the information with regard to batch registration.
        /// 1: The machine type provides information about batch content that should be used by T-DOC.
        /// </summary>
        [Column("MCTYPLOGBATCHREGMODE")]
        [Required]
        public LogBatchRegMode LogBatchRegMode { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPMANUKEYID</para>
        /// Ref. to the machine manufacturer (TSUPPLIE).
        /// </summary>
        [Column("MCTYPMANUKEYID")]
        public int? ManuKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPMAXENDO</para>
        /// Max number of endoscopes in one batch.
        /// Only applicable if model is an endoscope washer  (MCTYPTYPE = mtEndoWasher)
        /// </summary>
        [Column("MCTYPMAXENDO")]
        public int? MaxEndo { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPMAXLOADCOUNT</para>
        /// </summary>
        [Column("MCTYPMAXLOADCOUNT")]
        public int? MaxLoadCount { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPMAXPERPLACEMENT</para>
        /// Only shown for endoscope dryers. Can be set to one of the following values:
        /// msppOne (0): Only 1 endoscope per placement
        /// msppTwo (1): Only 2 endoscopes per placement
        /// msppThree (2): Only 3 endoscopes per placement
        /// msppFour (3): Only 4 endoscopes per placement
        ///
        /// Set to 1 for new and existing dryer models.
        /// </summary>
        [Column("MCTYPMAXPERPLACEMENT")]
        public int? MaxPerPlacement { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPMAXPRES</para>
        /// Maximum value for gauges displaying pressures.
        /// </summary>
        [Column("MCTYPMAXPRES")]
        public int? MaxPres { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPMAXTEMP</para>
        /// Maximum value for gauges displaying temperatures.
        /// </summary>
        [Column("MCTYPMAXTEMP")]
        public int? MaxTemp { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPMINPRES</para>
        /// Minimum value for gauges displaying pressures.
        /// </summary>
        [Column("MCTYPMINPRES")]
        public int? MinPres { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPMINTEMP</para>
        /// Minimum value for gauges displaying temperatures.
        /// </summary>
        [Column("MCTYPMINTEMP")]
        public int? MinTemp { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPNAME</para>
        /// The name of the machine type/model
        /// </summary>
        [Column("MCTYPNAME")]
        [Required, MaxLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPNONENDO</para>
        /// Indicates if an endoscope washer be used as washer for regular articles.
        /// Only applicable if model is an endoscope washer  (MCTYPTYPE = mtEndoWasher)
        /// </summary>
        [Column("MCTYPNONENDO")]
        [Required]
        public bool NonEndo { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPPLACEMENTCOUNT</para>
        /// Number of machine placements.
        /// </summary>
        [Column("MCTYPPLACEMENTCOUNT")]
        public int? PlacementCount { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPPLACEMENTMODE</para>
        /// Use for machines of type Incubator. Possible values are:
        /// - Single
        /// - Dual
        ///
        /// Determines if the incubator has placements for 1 or two different types of indicators.
        /// </summary>
        [Column("MCTYPPLACEMENTMODE")]
        public int? PlacementMode { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPPLACEMENTUSGMODE</para>
        /// Only shown for endoscope dryers. Can be set to one of the following values:
        /// Off (0): Scanning a placement is not allowed
        /// On (1): Scanning a placement is allowed, but not required
        /// Required (2): Scanning a placement is required
        ///
        /// Required is default when creating a new endoscope dryer model. On will be set on existing dryer models when upgrading from v12 to v13.
        /// </summary>
        [Column("MCTYPPLACEMENTUSGMODE")]
        public MachPlacementUsageMode? PlacementUsgMode { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPPRESSUREDECIMALS</para>
        /// Number of decimals to display pressures with.
        /// Values logged from the machine are NOT affected by this setting.
        /// </summary>
        [Column("MCTYPPRESSUREDECIMALS")]
        public int? PressureDecimals { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPPRESSURELOGARITHMIC</para>
        /// Logarithmic scale
        /// </summary>
        [Column("MCTYPPRESSURELOGARITHMIC")]
        [Required]
        public bool PressureLogarithmic { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPPRESSURETYPE</para>
        /// The measurement unit used for preassure readings on this machine type (DISPLAY ONLY). Values logged from the machine are NOT affected by this setting.
        ///
        /// Possible values are:
        /// 20529=Default (the global setting from SYSLOCALE is used)
        /// 20546=Bar
        /// 20545=Atm
        /// 20560=PSI
        /// 20555=kPa
        /// 20596=mTorr
        /// 20564=Torr
        /// 20553=inHg
        /// </summary>
        [Column("MCTYPPRESSURETYPE")]
        [Required]
        public int PressureType { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPQUEUELENGTH</para>
        /// Not implemented.
        /// </summary>
        [Column("MCTYPQUEUELENGTH")]
        public int? Queuelength { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPRELATIVETIME</para>
        /// This value is specified in percent (%). The value is used to &quot;alter&quot; the actual time a scope is stored in the cabinet into the time that will be used for calculating the expiry time.
        ///
        /// If a scope is stored in the cabinet for 1 hour and the value is set to 110% then 1 hour and 6 minutes will be deducted from the expiry time. If the value is set to 90% then 54 minutes will be deducted from the expiry time.
        /// </summary>
        [Column("MCTYPRELATIVETIME")]
        public int? RelativeTime { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPREPAIRVENDORKEYID</para>
        /// Ref. to the machine repair vendor (TSUPPLIE).
        /// </summary>
        [Column("MCTYPREPAIRVENDORKEYID")]
        public int? RepairVendorKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPREPORTFLAGS</para>
        /// This field indicates if documentation reports for processes run on this type of machine should include info on last bowie dick, last leakage test etc.
        ///
        /// Not implemented.
        /// </summary>
        [Column("MCTYPREPORTFLAGS")]
        public int? Reportflags { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPSTANDARDERROR</para>
        /// If an error is reported from the machine during a process, this error is put in the ProcError on the process.
        /// </summary>
        [Column("MCTYPSTANDARDERROR")]
        [Required]
        public int StandardError { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPSUPPKEYID</para>
        /// Ref. to the machine supplier (TSUPPLIE).
        /// </summary>
        [Column("MCTYPSUPPKEYID")]
        public int? SuppKeyId { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPTECHERROR</para>
        /// If defined, set as ProcError on process if no error from machine but a &#39;technical&#39; error is encountered.
        ///
        /// Currently only used if no native log is received from machine.
        /// </summary>
        [Column("MCTYPTECHERROR")]
        public int? TechError { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPTEMPDECIMALS</para>
        /// Number of decimals to display temperatures with.
        /// Values logged from the machine are NOT affected by this setting.
        /// </summary>
        [Column("MCTYPTEMPDECIMALS")]
        public int? TempDecimals { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPTEMPTYPE</para>
        /// The measurement unit used for temperatures on this machine type (DISPLAY ONLY). Values logged from the machine are NOT affected by this setting.
        ///
        /// Possible values are:
        /// 21553=Default (the global setting from SYSLOCALE is used)
        /// 21571=Celcius
        /// 21574=Fahrenheit
        /// </summary>
        [Column("MCTYPTEMPTYPE")]
        [Required]
        public int TempType { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPTEXT</para>
        /// A longer more descriptive name for the type/model
        /// </summary>
        [Column("MCTYPTEXT")]
        [MaxLength(80)]
        public string Text { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPTYPE</para>
        /// The type of the machine. Predefined constans defined in code:
        ///
        ///   mtSterilizer = 0;
        ///   mtWasher = 1;
        ///   mtPreDis = 2; // Pre-Disinfector
        ///   mtEndoWasher = 3; // Endoscope washer
        ///   mtIncubator  = 4; // Indicators only
        ///   mtEndoDryer  = 5;
        /// </summary>
        [Column("MCTYPTYPE")]
        [Required]
        public int Type { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPUSEMAP</para>
        /// Use Measured Atmospheric Pressure
        /// If relative pressure is selected this boolean indicate if the used relative pressure should be measured (just before the door is sealed and the cycle starts).
        /// If this is FALSE then 1000 mBar is used as relative offset.
        /// </summary>
        [Column("MCTYPUSEMAP")]
        [Required]
        public bool UseMAP { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPUSERECIPE</para>
        /// If true the machine uses Recipies otherwise it uses programs.
        /// </summary>
        [Column("MCTYPUSERECIPE")]
        [Required]
        public bool UseRecipe { get; set; }

        /// <summary>
        /// <para>TMACHINT.MCTYPVOLUME</para>
        /// The volume of the chamber in this type of machine.
        ///
        /// (Stored in internal units)
        /// </summary>
        [Column("MCTYPVOLUME")]
        public double? Volume { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TMACHINT.MCTYP_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a ProgramModel instance.
        /// <para />
        /// Foreign key: DefProgKeyId -> ProgramModel.KeyId (TMACHINT.MCTYPDEFPROGKEYID -> TPROGRAM.PROGKEYID)
        /// </summary>
        [ForeignKey(nameof(DefProgKeyId))]
        public ProgramModel DefProg { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: LogBatchRegError -> TextModel.Number (TMACHINT.MCTYPLOGBATCHREGERROR -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(LogBatchRegError))]
        public TextModel LogBatchRegErrorText { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: ManuKeyId -> SupplierModel.KeyId (TMACHINT.MCTYPMANUKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(ManuKeyId))]
        public SupplierModel Manu { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TMACHINT.MCTYP_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: RepairVendorKeyId -> SupplierModel.KeyId (TMACHINT.MCTYPREPAIRVENDORKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(RepairVendorKeyId))]
        public SupplierModel RepairVendor { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: StandardError -> TextModel.Number (TMACHINT.MCTYPSTANDARDERROR -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(StandardError))]
        public TextModel StandardErrorText { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: SuppKeyId -> SupplierModel.KeyId (TMACHINT.MCTYPSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppKeyId))]
        public SupplierModel Supp { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: TechError -> TextModel.Number (TMACHINT.MCTYPTECHERROR -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(TechError))]
        public TextModel TechErrorText { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of ExtDocRefLinkModel instances.
        /// <para />
        /// Foreign key: ExtDocRefLinkModel.McTypKeyId -> KeyId (TEXTDOCREFLINK.EDRLMCTYPKEYID -> TMACHINT.MCTYPKEYID)
        /// </summary>
        [InverseProperty("McTyp")]
        public List<ExtDocRefLinkModel> McTypExtDocRefLinkList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TMACHLOCATION table.
    /// This table associates machines with locations
    /// </summary>
    [Table("TMACHLOCATION")]
    public class MachLocationModel
    {
        /// <summary>
        /// <para>TMACHLOCATION.MCLOCAUTOINC</para>
        /// Primary key.
        /// </summary>
        [Column("MCLOCAUTOINC")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TMACHLOCATION.MCLOC_CREATED</para>
        /// </summary>
        [Column("MCLOC_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TMACHLOCATION.MCLOC_CREATEDKEYID</para>
        /// </summary>
        [Column("MCLOC_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TMACHLOCATION.MCLOC_MODIFIED</para>
        /// </summary>
        [Column("MCLOC_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TMACHLOCATION.MCLOC_MODIFIEDKEYID</para>
        /// </summary>
        [Column("MCLOC_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TMACHLOCATION.MCLOCLOCAKEYID</para>
        /// Ref. to location.
        /// </summary>
        [Column("MCLOCLOCAKEYID")]
        [Required]
        public int LocaKeyId { get; set; }

        /// <summary>
        /// <para>TMACHLOCATION.MCLOCMACHKEYID</para>
        /// Ref. to machine.
        /// </summary>
        [Column("MCLOCMACHKEYID")]
        [Required]
        public int MachKeyId { get; set; }

        /// <summary>
        /// <para>TMACHLOCATION.MCLOCPOSITION</para>
        /// The machine display order.
        /// </summary>
        [Column("MCLOCPOSITION")]
        [Required]
        public int Position { get; set; }

        /// <summary>
        /// <para>TMACHLOCATION.MCLOCVISIBILITY</para>
        /// Determines whether the current machine is visible/hidden by default at the new prebatch area.
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Visible = 0
        ///   Hidden  = 1
        /// ********************************************************************************
        /// </summary>
        [Column("MCLOCVISIBILITY")]
        [Required]
        public MachineVisiblity Visibility { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TMACHLOCATION.MCLOC_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TMACHLOCATION.MCLOCLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a MachineModel instance.
        /// <para />
        /// Foreign key: MachKeyId -> MachineModel.KeyId (TMACHLOCATION.MCLOCMACHKEYID -> TMACHINE.MACHKEYID)
        /// </summary>
        [ForeignKey(nameof(MachKeyId))]
        public MachineModel Mach { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TMACHLOCATION.MCLOC_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TMESTASKDEF table.
    /// Table contains information about all functions that can be used to communicate with the MES system.
    /// All function calls to MES must be stated in this table
    /// </summary>
    [Table("TMESTASKDEF")]
    public class MesTaskDefModel
    {
        /// <summary>
        /// <para>TMESTASKDEF.MTDEFKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("MTDEFKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFCOUNT</para>
        /// Amount of items requested
        /// </summary>
        [Column("MTDEFCOUNT")]
        public int? Count { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFDESCRIPTION</para>
        /// A short description of the logical function.
        /// </summary>
        [Column("MTDEFDESCRIPTION")]
        public string Description { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFDESTINATIONLOCATION</para>
        /// Destination Location GLN for where item should be delivered.
        /// </summary>
        [Column("MTDEFDESTINATIONLOCATION")]
        [MaxLength(100)]
        public string DestinationLocation { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFDISPLAYNAME</para>
        /// Display name of the function. The name that should be displayed on the buttons in the MES panel. This can be overwritten by definition/displaytext in the TMESTASKLOCATION table.
        /// </summary>
        [Column("MTDEFDISPLAYNAME")]
        [Required, MaxLength(100)]
        public string DisplayName { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFDISPLAYORDER</para>
        /// </summary>
        [Column("MTDEFDISPLAYORDER")]
        public int? DisplayOrder { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFEXECUTIONDELAY</para>
        /// Default vaue is NULL - means to use MesServer &#39;DefaultTaskDefExecutionDelaySEC&#39; value instead of NULL.
        /// Value 0 - means no execution delay before send task to MES.
        /// Value &gt; 0 - means wait N seconds before send task to MES.
        /// </summary>
        [Column("MTDEFEXECUTIONDELAY")]
        public int? ExecutionDelay { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFFACKEYID</para>
        /// Link to the factory the task pertains to.
        /// </summary>
        [Column("MTDEFFACKEYID")]
        [Required]
        public int FacKeyId { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFMACHKEYID</para>
        /// A link to machines
        /// </summary>
        [Column("MTDEFMACHKEYID")]
        public int? MachKeyId { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFSOURCELOCATION</para>
        /// Location GLN for where item has it source, e,g pickup location for a wash rack.
        /// </summary>
        [Column("MTDEFSOURCELOCATION")]
        [MaxLength(100)]
        public string SourceLocation { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFTASKID</para>
        /// ID of the Task definition.
        /// </summary>
        [Column("MTDEFTASKID")]
        [Required, MaxLength(20)]
        public string TaskId { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFTASKNAME</para>
        /// Name of the Task definition.
        /// </summary>
        [Column("MTDEFTASKNAME")]
        [Required, MaxLength(100)]
        public string TaskName { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFTASKTYPE</para>
        /// Function No. for MES function.
        ///
        ///   TMESTaskType = ( mesTRequestNewItems = 10,
        ///                    mesTRequestEmptyTransportBoxPickup = 11,
        ///                    mesTRequestEmptyInstrumentContainerPickup = 12,
        ///                    mesTRequestTransportBoardsPickup_obsolete = 13, // Obsolete - 2017/09/11
        ///                    mesTRequestEmptyWashCart = 14,
        ///                    mesTRequestFullWashCartPickup = 15,
        ///                    mesTRequestFullWashCart = 16,
        ///                    mesTRequestEmptyWashCartPickup = 17,
        ///                    mesTRequestFullInstrumentContainerPickup = 18,
        ///                    mesTRequestFullAutoclaveBasketPickup = 19,
        ///                    mesTRequestEmptyAutoclaveBasketStacks = 20,
        ///                    mesTRequestEmptyTransportBoxes = 21,
        ///                    mesTRequestFullAutoclaveRackPickup = 22, // Prebatch / Manual loading
        ///                    mesTRequestAutoclaveRackPickup = 23, // Postbatch / Unloading
        ///                    mesTRequestEmptyAutoclaveRackPickup = 24, // Postbatch / Unloading
        ///                    mesTRequestExtractItemFromStorage = 25,
        ///                    mesTRequestTransportBoards = 26,
        ///                    mesTRequestStoreItem = 27,
        ///                    mesTRequestMachineBatchCheck = 28
        ///                 //, and so on for the rest of the MES functions..
        ///                 );
        /// </summary>
        [Column("MTDEFTASKTYPE")]
        [Required]
        public int TaskType { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFTYPEID</para>
        /// The value is this field is used for TaskType specific information for some task types:
        ///
        /// mesTRequestEmptyWashCart:
        /// The value indicates the type of wash cart requested. The number/ID is sent directly to the MES system. Valid values must be agreed between T-DOC and MES.
        /// At Capital Region valid values are &quot;Almindelig&quot; and &quot;Hulroor&quot;.
        ///
        /// mesTRequestEmptyTransportBoxes:
        /// The value indicates the size of transport box requested. The number/ID is sent directly to the MES system. Valid values must be agreed between T-DOC and MES.
        /// At Capital Region valid values are &quot;200&quot; and &quot;300&quot;. Height of boxes in mm.
        ///
        /// REWRITE THIS WHEN CLARIFIED:
        /// This field is using to set different type for locations.
        /// For example, value &#39;nonultrasound&#39; - this is indicator that Return/Packing location is only for non-ultrasound goods.
        /// </summary>
        [Column("MTDEFTYPEID")]
        [MaxLength(100)]
        public string TypeId { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF01</para>
        /// </summary>
        [Column("MTDEFUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF02</para>
        /// </summary>
        [Column("MTDEFUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF03</para>
        /// </summary>
        [Column("MTDEFUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF04</para>
        /// </summary>
        [Column("MTDEFUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF05</para>
        /// </summary>
        [Column("MTDEFUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF06</para>
        /// </summary>
        [Column("MTDEFUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF07</para>
        /// </summary>
        [Column("MTDEFUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF08</para>
        /// </summary>
        [Column("MTDEFUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF09</para>
        /// </summary>
        [Column("MTDEFUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF10</para>
        /// </summary>
        [Column("MTDEFUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF11</para>
        /// </summary>
        [Column("MTDEFUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF12</para>
        /// </summary>
        [Column("MTDEFUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF13</para>
        /// </summary>
        [Column("MTDEFUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF14</para>
        /// </summary>
        [Column("MTDEFUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF15</para>
        /// </summary>
        [Column("MTDEFUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF16</para>
        /// </summary>
        [Column("MTDEFUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF17</para>
        /// </summary>
        [Column("MTDEFUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF18</para>
        /// </summary>
        [Column("MTDEFUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF19</para>
        /// </summary>
        [Column("MTDEFUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TMESTASKDEF.MTDEFUF20</para>
        /// </summary>
        [Column("MTDEFUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TMESTASKDEF.MTDEFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a MachineModel instance.
        /// <para />
        /// Foreign key: MachKeyId -> MachineModel.KeyId (TMESTASKDEF.MTDEFMACHKEYID -> TMACHINE.MACHKEYID)
        /// </summary>
        [ForeignKey(nameof(MachKeyId))]
        public MachineModel Mach { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of MesTaskLocationsModel instances.
        /// <para />
        /// Foreign key: MesTaskLocationsModel.MtDefKeyId -> KeyId (TMESTASKLOCATIONS.MTLCAMTDEFKEYID -> TMESTASKDEF.MTDEFKEYID)
        /// </summary>
        [InverseProperty("MtDef")]
        public List<MesTaskLocationsModel> MtDefMesTaskLocationsList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TMESTASKLOCATIONS table.
    /// Holds information about which MES Panels (Scanner Client) that shall have enabled which specific MES task. E.g. Scanner @computer PC-1 shall have shown: Request Empty Wash Cart.
    /// </summary>
    [Table("TMESTASKLOCATIONS")]
    public class MesTaskLocationsModel
    {
        /// <summary>
        /// <para>TMESTASKLOCATIONS.MTLCAKEY</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("MTLCAKEY")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TMESTASKLOCATIONS.MTLCADISPLAYNAME</para>
        /// Display caption for button.
        /// </summary>
        [Column("MTLCADISPLAYNAME")]
        [MaxLength(100)]
        public string DisplayName { get; set; }

        /// <summary>
        /// <para>TMESTASKLOCATIONS.MTLCADISPLAYORDER</para>
        /// </summary>
        [Column("MTLCADISPLAYORDER")]
        public int? Displayorder { get; set; }

        /// <summary>
        /// <para>TMESTASKLOCATIONS.MTLCALOCAKEYID</para>
        /// Reference to the location
        /// </summary>
        [Column("MTLCALOCAKEYID")]
        [Required]
        public int LocaKeyId { get; set; }

        /// <summary>
        /// <para>TMESTASKLOCATIONS.MTLCAMTDEFKEYID</para>
        /// Reference to which specific TASK
        /// </summary>
        [Column("MTLCAMTDEFKEYID")]
        [Required]
        public int MtDefKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TMESTASKLOCATIONS.MTLCALOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a MesTaskDefModel instance.
        /// <para />
        /// Foreign key: MtDefKeyId -> MesTaskDefModel.KeyId (TMESTASKLOCATIONS.MTLCAMTDEFKEYID -> TMESTASKDEF.MTDEFKEYID)
        /// </summary>
        [ForeignKey(nameof(MtDefKeyId))]
        public MesTaskDefModel MtDef { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TOPDATA table.
    /// Operation Data
    /// Holds the actual data for each operation
    /// </summary>
    [Table("TOPDATA")]
    public class OperationDataModel
    {
        /// <summary>
        /// <para>TOPDATA.OPDKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("OPDKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPD_CREATED</para>
        /// </summary>
        [Column("OPD_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPD_CREATEDKEYID</para>
        /// </summary>
        [Column("OPD_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPD_MODIFIED</para>
        /// </summary>
        [Column("OPD_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPD_MODIFIEDKEYID</para>
        /// </summary>
        [Column("OPD_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDACTUALENDTIME</para>
        /// </summary>
        [Column("OPDACTUALENDTIME", TypeName = "datetime")]
        public DateTime? ActualEndTime { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDACTUALSTARTTIME</para>
        /// </summary>
        [Column("OPDACTUALSTARTTIME", TypeName = "datetime")]
        public DateTime? ActualStartTime { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDBOOKINGFORCE</para>
        /// </summary>
        [Column("OPDBOOKINGFORCE")]
        public bool? BookingForce { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDBOOKINGSTATUS</para>
        /// </summary>
        [Column("OPDBOOKINGSTATUS")]
        public int? BookingStatus { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDCUSTKEYID</para>
        /// Points to the originator for orders created in relation to this operation.
        /// </summary>
        [Column("OPDCUSTKEYID")]
        public int? CustKeyId { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDCUSTSTOKKEYID</para>
        /// Points to the originator stock for orders created in relation to this operation.
        /// </summary>
        [Column("OPDCUSTSTOKKEYID")]
        public int? CustStokKeyId { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDDOCTKEYID</para>
        /// Ref. to the doctor, if known.
        /// </summary>
        [Column("OPDDOCTKEYID")]
        public int? DoctKeyId { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDENDTIME</para>
        /// Scheduled end time of the operation. Initially calculated from the duration defined in the operation type.
        /// </summary>
        [Column("OPDENDTIME", TypeName = "datetime")]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDIDENT</para>
        /// The ID of the operation.
        /// </summary>
        [Column("OPDIDENT")]
        [Required, MaxLength(50)]
        public string Ident { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDINCOMPLETEORDER</para>
        /// If the delivered order, with OrdDelIncomplete = &#39;T&#39;, is synchronized with an operation, then an OPDIncompleteOrder field must be set in &#39;T&#39;.
        /// </summary>
        [Column("OPDINCOMPLETEORDER")]
        [Required]
        public bool IncompleteOrder { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDNAME</para>
        /// The name of the operation.
        /// </summary>
        [Column("OPDNAME")]
        [MaxLength(150)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDOPTKEYID</para>
        /// Ref to the operation type the operation is based on.
        /// </summary>
        [Column("OPDOPTKEYID")]
        public int? OptKeyId { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDORDERSNEEDUPDATE</para>
        /// Indicates that changes have been made on the operation that CAN cause linked orders based on preference lists to require updating.
        ///
        /// Set to True whenever any properties on the operation that can affect orders are changed. I.e. operation type, procedure types, patient, room etc.
        /// </summary>
        [Column("OPDORDERSNEEDUPDATE")]
        [Required]
        public bool OrdersNeedUpdate { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDPATAGE</para>
        /// The age of the patient. If not set then T-DOC will try to get the age from a potentially assigned OPDPATKEYID.
        ///
        /// If the Operation Type or its Procedure Type(s) require age then it must be specified.
        ///
        /// If a default age has been specified at system level T-DOC will use the default as specified.
        ///
        /// The value is specified in days (???)
        /// </summary>
        [Column("OPDPATAGE")]
        public int? PatAge { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDPATGENDER</para>
        /// The gender of the patient. See PATCATATTGENDER for possible values. If not set then T-DOC will try to get the gender from a potentially assigned OPDPATKEYID.
        ///
        /// If the Operation Type or its Procedure Type(s) require gender then it must be specified.
        ///
        /// If a default gender has been specified at system level T-DOC will use the default as specified.
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None   = 0
        ///   Male   = 1
        ///   Female = 2
        /// ********************************************************************************
        /// </summary>
        [Column("OPDPATGENDER")]
        public SexType? PatGender { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDPATKEYID</para>
        /// Ref. to the patient, if known.
        /// </summary>
        [Column("OPDPATKEYID")]
        public int? PatKeyId { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDPATWEIGHT</para>
        /// The weight of the patient. If not set then T-DOC will try to get the weight from a potentially assigned OPDPATKEYID.
        ///
        /// The value is specified in grams. So if the weight of the patient is 70KG (kilograms) the value must be 70000.
        /// </summary>
        [Column("OPDPATWEIGHT")]
        public int? PatWeight { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDPREFLISTDELSHORTAGE</para>
        /// If operation data is changed and the operation has a preference list based order, that has been delivered and the change results in a goods shortage, then OPDPrefListDelShortage must be updated. This is an enum with the following options
        /// 0: Unknown (No preference list based order has been delivered)
        /// 1: Preference list based order delievered with no shortages
        /// 2: Shortage due to operation data change
        /// </summary>
        [Column("OPDPREFLISTDELSHORTAGE")]
        [Required]
        public int PrefListDelShortage { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDPREFLISTORDERMODE</para>
        /// The value determines when preference list based orders for the operation are to be created.
        ///
        /// If the operation is created in T-DOC Admin the default value is Immediate.
        /// If the operation is created by the Job Server job &quot;T-DOC Standard XML Order Import Job&quot; the value is determined by the settings on the job.
        ///
        /// Immediate = Orders are created as soon as the operation status changes to Accepted.
        /// TimeBased = Orders are created by the Job Server job &quot;T-DOC Operation Ordering job&quot; based on the settings of that job. Simplified this allows orders to be created as late as possible while still being able to deliver them.
        /// Manual = Orders are not created until a user selects &quot;Create order&quot; in the Operation data window on the Preference lists tab.
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Immediate = 0
        ///   TimeBased = 1
        ///   Manual    = 2
        /// ********************************************************************************
        /// </summary>
        [Column("OPDPREFLISTORDERMODE")]
        public PrefListOrderCreateMode? PrefListOrderMode { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDREMARK</para>
        /// Optional remark.
        /// </summary>
        [Column("OPDREMARK")]
        public string Remark { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDROOMKEYID</para>
        /// Ref. to the operation room/theater.
        /// </summary>
        [Column("OPDROOMKEYID")]
        public int? RoomKeyId { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDSTARTTIME</para>
        /// Scheduled start time of the operation.
        /// </summary>
        [Column("OPDSTARTTIME", TypeName = "datetime")]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDSTARTTIMEMODIFIED</para>
        /// Last time OPDSTARTTIME was modified.
        /// </summary>
        [Column("OPDSTARTTIMEMODIFIED", TypeName = "datetime")]
        public DateTime? StartTimeModified { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDSTATUS</para>
        /// Status of the operation. Valid values are:
        ///
        ///   odstPlanned   = 10;
        ///   odstAccepted  = 20;
        ///   odstStarted   = 30;
        ///   odstDone      = 40;
        ///   odstCancelled = 50;
        /// </summary>
        [Column("OPDSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TOPDATA.OPDSUPPFACKEYID</para>
        /// If set then this factory is used as the supplying factory for all orders that are created as a result of being based on one or more preference lists.
        /// The selected factory is also used as the supplying factory when the PlanAssure module creates virtual orders based on preference lists.
        ///
        /// If the field is not set then T-DOC will use the users &quot;current factory&quot; if this is possible. If there is no &quot;current factory&quot; and it is not possible to determine a factory in any other way (such as for some jobs in the Job Server) then orders based on preference lists are not created and PlanAssure will not consider such virtual orders.
        /// </summary>
        [Column("OPDSUPPFACKEYID")]
        public int? SuppFacKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TOPDATA.OPD_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: CustKeyId -> CustomerModel.KeyId (TOPDATA.OPDCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(CustKeyId))]
        public CustomerModel Cust { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: CustStokKeyId -> StocksModel.KeyId (TOPDATA.OPDCUSTSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(CustStokKeyId))]
        public StocksModel CustStok { get; set; }

        /// <summary>
        /// Reference to a DoctorModel instance.
        /// <para />
        /// Foreign key: DoctKeyId -> DoctorModel.KeyId (TOPDATA.OPDDOCTKEYID -> TDOCTOR.DOCTKEYID)
        /// </summary>
        [ForeignKey(nameof(DoctKeyId))]
        public DoctorModel Doct { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TOPDATA.OPD_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a OperationTypeModel instance.
        /// <para />
        /// Foreign key: OptKeyId -> OperationTypeModel.KeyId (TOPDATA.OPDOPTKEYID -> TOPTYPE.OPTKEYID)
        /// </summary>
        [ForeignKey(nameof(OptKeyId))]
        public OperationTypeModel Opt { get; set; }

        /// <summary>
        /// Reference to a PatientModel instance.
        /// <para />
        /// Foreign key: PatKeyId -> PatientModel.KeyId (TOPDATA.OPDPATKEYID -> TPATIENT.PATKEYID)
        /// </summary>
        [ForeignKey(nameof(PatKeyId))]
        public PatientModel Pat { get; set; }

        /// <summary>
        /// Reference to a RoomModel instance.
        /// <para />
        /// Foreign key: RoomKeyId -> RoomModel.KeyId (TOPDATA.OPDROOMKEYID -> TROOM.ROOMKEYID)
        /// </summary>
        [ForeignKey(nameof(RoomKeyId))]
        public RoomModel Room { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: SuppFacKeyId -> FactoryModel.KeyId (TOPDATA.OPDSUPPFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppFacKeyId))]
        public FactoryModel SuppFac { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of PatientConsModel instances.
        /// <para />
        /// Foreign key: PatientConsModel.OpDKeyId -> KeyId (TPATCONS.PATCOOPDKEYID -> TOPDATA.OPDKEYID)
        /// </summary>
        [InverseProperty("OpD")]
        public List<PatientConsModel> OpDPatientConsList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitModel instances.
        /// <para />
        /// Foreign key: UnitModel.OpDKeyId -> KeyId (TUNIT.UNITOPDKEYID -> TOPDATA.OPDKEYID)
        /// </summary>
        [InverseProperty("OpD")]
        public List<UnitModel> OpDUnitList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.RefOpDKeyId -> KeyId (TORDER.ORDREFOPDKEYID -> TOPDATA.OPDKEYID)
        /// </summary>
        [InverseProperty("RefOpD")]
        public List<OrderModel> RefOpDOrderList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitLocationModel instances.
        /// <para />
        /// Foreign key: UnitLocationModel.RefOpdKeyId -> KeyId (TUNITLCA.ULCAREFOPDKEYID -> TOPDATA.OPDKEYID)
        /// </summary>
        [InverseProperty("RefOpd")]
        public List<UnitLocationModel> RefOpdUnitLocationList { get; set; }

        /// <summary>
        /// Reference to a collection of EventModel instances.
        /// <para />
        /// Foreign key: EventModel.RefKeyId -> KeyId (TEVENT.EVNTREFKEYID -> TOPDATA.OPDKEYID)
        /// </summary>
        [InverseProperty("RefOperationData")]
        public List<EventModel> RefOperationDataEventList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TOPTYPE table.
    /// Operation Types. Used as &quot;templates&quot; for the actual scheduled operaions.
    /// </summary>
    [Table("TOPTYPE")]
    public class OperationTypeModel
    {
        /// <summary>
        /// <para>TOPTYPE.OPTKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("OPTKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPT_CREATED</para>
        /// </summary>
        [Column("OPT_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPT_CREATEDKEYID</para>
        /// </summary>
        [Column("OPT_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPT_MODIFIED</para>
        /// </summary>
        [Column("OPT_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPT_MODIFIEDKEYID</para>
        /// </summary>
        [Column("OPT_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTASSDOCTORCOUNT</para>
        /// The number of assisting doctors required to perform the procedure.
        ///
        /// If NULL then the higher number from Procedure Types apply. If set it overrides any number set on Procedure Types.
        ///
        /// Maximum is 5.
        /// </summary>
        [Column("OPTASSDOCTORCOUNT")]
        public int? AssDoctorCount { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTCLEANUP</para>
        /// Scheduled time (in seconds) to clean up after the operation.
        /// </summary>
        [Column("OPTCLEANUP")]
        public int? Cleanup { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTCNTPSKEYID</para>
        /// </summary>
        [Column("OPTCNTPSKEYID")]
        public int? CntpsKeyId { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTCODE</para>
        /// The ID of the operation type.
        /// </summary>
        [Column("OPTCODE")]
        [Required, MaxLength(50)]
        public string Code { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTDEFCUSTKEYID</para>
        /// Points to the default originator for orders created in relation to this operation type.
        /// </summary>
        [Column("OPTDEFCUSTKEYID")]
        public int? DefcustKeyId { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTDEFCUSTSTOKKEYID</para>
        /// Points to the default originator stock for orders created in relation to this operation type.
        /// </summary>
        [Column("OPTDEFCUSTSTOKKEYID")]
        public int? DefcuststokKeyId { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTDEFROOMKEYID</para>
        /// Ref to the default room for the operation type.
        /// </summary>
        [Column("OPTDEFROOMKEYID")]
        public int? DefroomKeyId { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTDESC</para>
        /// An optional longer description of the operation type.
        /// </summary>
        [Column("OPTDESC")]
        public string Desc { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTDURATION</para>
        /// Scheduled time (in seconds) for the operation itself.
        /// </summary>
        [Column("OPTDURATION")]
        public int? Duration { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTMINORDERLEADTIME</para>
        /// The minimum order lead time. Specified in minutes.
        /// </summary>
        [Column("OPTMINORDERLEADTIME")]
        public int? MinOrderLeadTime { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTNAME</para>
        /// The name of the operation type.
        /// </summary>
        [Column("OPTNAME")]
        [Required, MaxLength(150)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTPATAGEUSAGE</para>
        /// Determines if and how patient age is relevant for the procedure type.
        ///
        /// See SYSPATAGEUSAGE for valid values.
        ///
        /// Will implicitly be required if any Procedure Type attached to the Operation Type requires patient age.
        ///
        /// Default = Not set
        /// </summary>
        [Column("OPTPATAGEUSAGE")]
        public PatientAgeUsage? PatAgeUsage { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTPATGENDERUSAGE</para>
        /// Determines if and how patient gender is relevant for the procedure type.
        ///
        /// See SYSPATGENDERUSAGE for valid values.
        ///
        /// Will implicitly be required if any Procedure Type attached to the Operation Type requires patient gender.
        ///
        /// Default = Not set
        /// </summary>
        [Column("OPTPATGENDERUSAGE")]
        public PatientGenderUsage? PatGenderUsage { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTPREPARE</para>
        /// Scheduled time (in seconds) to prepare for the operation.
        /// </summary>
        [Column("OPTPREPARE")]
        public int? Prepare { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTSTATUS</para>
        /// Indicates the status of the operation type. Valid values are:
        ///
        ///   stNormal = 10
        ///   stDead   = 90
        /// </summary>
        [Column("OPTSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTTYPE</para>
        /// The system type of the operation type.
        ///
        /// TOperationTypeType = (Elective, Emergency);
        ///
        /// The value is currently only used to determine if re-ordering of orders should happen automatically on dispatch/delivery of an order that is linked to this operation type via the ORDREFOPTKEYID field.
        /// </summary>
        [Column("OPTTYPE")]
        [Required]
        public OperationTypeType Type { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF01</para>
        /// </summary>
        [Column("OPTUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF02</para>
        /// </summary>
        [Column("OPTUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF03</para>
        /// </summary>
        [Column("OPTUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF04</para>
        /// </summary>
        [Column("OPTUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF05</para>
        /// </summary>
        [Column("OPTUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF06</para>
        /// </summary>
        [Column("OPTUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF07</para>
        /// </summary>
        [Column("OPTUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF08</para>
        /// </summary>
        [Column("OPTUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF09</para>
        /// </summary>
        [Column("OPTUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF10</para>
        /// </summary>
        [Column("OPTUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF11</para>
        /// </summary>
        [Column("OPTUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF12</para>
        /// </summary>
        [Column("OPTUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF13</para>
        /// </summary>
        [Column("OPTUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF14</para>
        /// </summary>
        [Column("OPTUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF15</para>
        /// </summary>
        [Column("OPTUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF16</para>
        /// </summary>
        [Column("OPTUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF17</para>
        /// </summary>
        [Column("OPTUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF18</para>
        /// </summary>
        [Column("OPTUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF19</para>
        /// </summary>
        [Column("OPTUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TOPTYPE.OPTUF20</para>
        /// </summary>
        [Column("OPTUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TOPTYPE.OPT_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: DefcustKeyId -> CustomerModel.KeyId (TOPTYPE.OPTDEFCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(DefcustKeyId))]
        public CustomerModel Defcust { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: DefcuststokKeyId -> StocksModel.KeyId (TOPTYPE.OPTDEFCUSTSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(DefcuststokKeyId))]
        public StocksModel Defcuststok { get; set; }

        /// <summary>
        /// Reference to a RoomModel instance.
        /// <para />
        /// Foreign key: DefroomKeyId -> RoomModel.KeyId (TOPTYPE.OPTDEFROOMKEYID -> TROOM.ROOMKEYID)
        /// </summary>
        [ForeignKey(nameof(DefroomKeyId))]
        public RoomModel Defroom { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TOPTYPE.OPT_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of ExtDocRefLinkModel instances.
        /// <para />
        /// Foreign key: ExtDocRefLinkModel.OptKeyId -> KeyId (TEXTDOCREFLINK.EDRLOPTKEYID -> TOPTYPE.OPTKEYID)
        /// </summary>
        [InverseProperty("Opt")]
        public List<ExtDocRefLinkModel> OptExtDocRefLinkList { get; set; }

        /// <summary>
        /// Reference to a collection of StocksModel instances.
        /// <para />
        /// Foreign key: StocksModel.OpTKeyId -> KeyId (TSTOCKS.STOKOPTKEYID -> TOPTYPE.OPTKEYID)
        /// </summary>
        [InverseProperty("OpT")]
        public List<StocksModel> OpTStocksList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TORDER table.
    /// This table holds the header of all orders.
    ///
    /// There are three types of &quot;orders&quot;:
    ///   ordOrder       = A normal order from Org to Supp.
    ///   ordReturnOrder = A return order created by Supp when Org returns unused articles.
    ///   ordOrderCorr   = Not a real order but a stock correction used to hold inventory
    ///                    correction transactions for a stock.
    ///
    /// ordOrder types of orders can be created in the following ways:
    ///   1. By an Originator to an internal supplier
    ///      STAGE                ORDORGSTATUS            ORDSUPPSTATUS
    ///      Under construction   oosOpen                 ossNone
    ///      Sent                 oosSent                 ossOrder
    ///      Received by Supp     oosSent                 ossAccepted
    ///      Picking started
    ///      on Supp stock        oosSent                 ossPicked
    ///    * Delivered by Supp    oosSent                 ossDelivered
    ///      Received/Completed   oosDone                 ossDelivered (stocks are updated)
    ///
    ///    * This step is only used if receiving stock STOKORDERINMODE=simManual.
    ///      Otherwise it is skipped and the ORDORGSTATUS directly becomes oosDone.
    ///
    ///   2. By an Originator to an external supplier
    ///      STAGE                ORDORGSTATUS            ORDSUPPSTATUS
    ///      Under construction   oosOpen                 ossNone
    ///      Sent                 oosSent                 ossAccepted
    ///    * Delivered by Supp    oosSent                 ossDelivered
    ///    **Received by Org      oosReceived             ossDelivered
    ///      Updated/Corr. by Org oosDone                 ossDelivered (stocks are updated)
    ///
    ///    *  This step is skipped if receiving stock STOKORDERINMODE=simReceive or
    ///       simAuto.
    ///       This step can also be conducted by the Originator by simply receiving the
    ///       order thus automatically triggering a delivery from the supplier. This
    ///       is of cource due to the fact that supplier is not using T-DOC himself.
    ///    ** This step is skipped if receiving stock STOKORDERINMODE=oosDone.
    ///
    ///   3. By the internal supplier (for an Originator)
    ///      STAGE                ORDORGSTATUS            ORDSUPPSTATUS
    ///      Under construction   oosNone                 ossAccepted
    ///      Picked started
    ///      on Supp stock        oosSent                 ossPicked    (not implmented)
    ///    * Delivered by Supp    oosSent                 ossDelivered
    ///      Received/Completed   oosDone                 ossDelivered (stocks are updated)
    ///
    ///    * This step is only used if receiving stock STOKORDERINMODE=simManual.
    ///      Otherwise it is skipped and the ORDORGSTATUS directly becomes oosDone.
    /// </summary>
    [Table("TORDER")]
    public class OrderModel
    {
        /// <summary>
        /// <para>TORDER.ORDKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("ORDKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDAUTOCREATED</para>
        /// When set the order was created by the JobServer when running a transaction to order transfer job or by Scanner/Admin when dispatching units without using a stock-type handler.
        /// </summary>
        [Column("ORDAUTOCREATED")]
        [Required]
        public bool AutoCreated { get; set; }

        /// <summary>
        /// <para>TORDER.ORDBOOKINGFIRSTOK</para>
        /// This field is no longer in use and will be removed in a future version.
        /// </summary>
        [Column("ORDBOOKINGFIRSTOK", TypeName = "datetime")]
        public DateTime? BookingFirstOk { get; set; }

        /// <summary>
        /// <para>TORDER.ORDBOOKINGMODE</para>
        /// Possible values:
        /// - Undetermined(0) - booking is not turned on for current factory;
        /// - Disabled(1) - booking is disabled for current factory;
        /// - Inactive(2) - booking is inactive for current order;
        /// - Active(3) -booking is active for current order.****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Undetermined = 0
        ///   Disabled     = 1
        ///   Inactive     = 2
        ///   Active       = 3
        /// ********************************************************************************
        /// </summary>
        [Column("ORDBOOKINGMODE")]
        public OrderBookingMode? BookingMode { get; set; }

        /// <summary>
        /// <para>TORDER.ORDBOOKINGPRIORITY</para>
        /// Possible values:
        /// - Normal(0) - normal reservation. All reservation that linked to lines of current order can be stolen by other reservation that marked as High or Force;
        /// - High(1) - emergency case cart reservation. All reservation that linked to lines of current order can be stolen by other reservation that marked as Force;
        /// - Force(2) - force reservation. All reservation that linked to lines of current order was marked as forced and can&#39;t be stolen by any other reservation.****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Normal = 0
        ///   High   = 1
        ///   Force  = 2
        /// ********************************************************************************
        /// </summary>
        [Column("ORDBOOKINGPRIORITY")]
        public OrderBookingPriority? BookingPriority { get; set; }

        /// <summary>
        /// <para>TORDER.ORDBOOKINGSTATUS</para>
        /// Possible values:
        /// - Undetermined(0) - there are no any reservation for order lines;
        /// - Ok(1) - reservation of every order lines can be delivered in time for customer;
        /// - Warning(2) - reservation can be delivered in time for customer but there are some exceptions (for example: product already picked but requested delivery time is less than Now);
        /// - Error(3) - reservation for some order line cannot be delivered in time for customer.****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Undetermined = 0
        ///   Ok           = 1
        ///   Warning      = 2
        ///   Error        = 3
        /// ********************************************************************************
        /// </summary>
        [Column("ORDBOOKINGSTATUS")]
        public OrderBookingStatus? BookingStatus { get; set; }

        /// <summary>
        /// <para>TORDER.ORDCREATEDAPPTYPE</para>
        /// The application that created the record. Mapped to the enumerated type TTDOCAppType.
        ///
        /// Currently the following values are valid:
        ///
        /// ScannerServer = 2
        /// ConnectServer = 3
        /// Admin = 5
        /// JobServer = 27
        /// WebServer = 28
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Unknown                = 0
        ///   AppServer              = 1
        ///   ScannerServer          = 2
        ///   ConnectServer          = 3
        ///   TDOCCtrl               = 4
        ///   Admin                  = 5
        ///   Scanner                = 6
        ///   Connect                = 7
        ///   Spool_Obsolete         = 8
        ///   Launcher               = 9
        ///   Exchange               = 10
        ///   MacView                = 11
        ///   Service                = 12
        ///   PrintServer            = 13
        ///   RemoteControl_Obsolete = 14
        ///   JobServer_Obsolete     = 15
        ///   ProfEdit               = 16
        ///   DeviceTest             = 17
        ///   MacSimu                = 18
        ///   IniEdit                = 19
        ///   NetTest                = 20
        ///   UtilityServer          = 21
        ///   SpoolServer            = 22
        ///   SpoolCtrl              = 23
        ///   NetCOMCfg              = 24
        ///   JobCfg                 = 25
        ///   Panel                  = 26
        ///   JobServer              = 27
        ///   WebServer              = 28
        ///   Engine                 = 29
        ///   Upgrade                = 30
        ///   UnknownL               = 31
        /// ********************************************************************************
        /// </summary>
        [Column("ORDCREATEDAPPTYPE")]
        public TDOCAppType? CreatedAppType { get; set; }

        /// <summary>
        /// <para>TORDER.ORDCREATEDFOROPDPREFLIST</para>
        /// This field is set to True if the order was created to represent the preference list for an actual operation.
        /// If will not be True if the order was created based on an Ad-hoc preference list. Not even if the order is subsequently linked to an operation.
        /// </summary>
        [Column("ORDCREATEDFOROPDPREFLIST")]
        [Required]
        public bool CreatedForOpDPrefList { get; set; }

        /// <summary>
        /// <para>TORDER.ORDCREATEDJOBKEYID</para>
        /// Af reference to the job that created the record if it was created from the JobServer.
        ///
        /// NOTE: Do not normalize with TORDERACTION. Duplicated for better end-user search expirience.
        /// </summary>
        [Column("ORDCREATEDJOBKEYID")]
        public int? CreatedJobKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDCREATEDLOCAKEYID</para>
        /// A reference to the location where the record was created. Not used for auto created orders in some cases.
        ///
        /// NOTE: Do not normalize with TORDERACTION. Duplicated for better end-user search expirience.
        /// </summary>
        [Column("ORDCREATEDLOCAKEYID")]
        public int? CreatedLocaKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDCREATEDLSID</para>
        /// For most orders this field will contain the ID of the computer where the order was created.
        ///
        /// NOTE: This field is strictly for internal use and will be removed in a future version.
        /// </summary>
        [Column("ORDCREATEDLSID")]
        [MaxLength(5)]
        public string CreatedLSId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDCREATEDUSERKEYID</para>
        /// A reference to the user that created the record. Not filled if the order was created automatically by T-DOC.
        ///
        /// NOTE: Do not normalize with TORDERACTION. Duplicated for better end-user search expirience.
        /// </summary>
        [Column("ORDCREATEDUSERKEYID")]
        public int? CreatedUserKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDDELINCOMPLETE</para>
        /// When only part of an order is delivered, then value set to &#39;T&#39;
        /// </summary>
        [Column("ORDDELINCOMPLETE")]
        [Required]
        public bool DelIncomplete { get; set; }

        /// <summary>
        /// <para>TORDER.ORDEXPDELTIME</para>
        /// The expected delivery date. This is specified by the supplier.
        /// </summary>
        [Column("ORDEXPDELTIME", TypeName = "datetime")]
        public DateTime? ExpDelTime { get; set; }

        /// <summary>
        /// <para>TORDER.ORDFLAGS</para>
        /// The field contains information about the order that is used internally in T-DOC.
        ///
        /// NOTE: This field is strictly for internal use.
        ///
        /// Each bit in the 32-bit integer represents a flag.
        ///
        /// Used flags:
        /// bit 0: Set if the order was automatically created by dispatching/returning units in Scanner server. See uTransOrd.pas for details.
        /// </summary>
        [Column("ORDFLAGS")]
        public int? Flags { get; set; }

        /// <summary>
        /// <para>TORDER.ORDLOCKMODE</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Unlocked = 0
        ///   Locked   = 1
        /// ********************************************************************************
        /// </summary>
        [Column("ORDLOCKMODE")]
        public OrderLockMode? LockMode { get; set; }

        /// <summary>
        /// <para>TORDER.ORDNEXTORDKEYID</para>
        /// ordOrder:
        ///   Is this order caused a backorder this field will contain the ID of the
        ///   backorder.
        ///
        /// ordReturnOrder:
        ///   not used
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("ORDNEXTORDKEYID")]
        public int? NextOrdKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORDTPKEYID</para>
        /// A reference to the template that was used to create the order (if any).
        /// The field is currently updated in the DB but is not visible anywhere in the UI.
        /// </summary>
        [Column("ORDORDTPKEYID")]
        public int? OrdTpKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGACCOUNT</para>
        /// ordOrder:
        ///   If ORDORGTYPE=taCustomer then this field is set to CUSTACCOUNT when the
        ///   order is delivered (OrdSuppStatus=ossDelivered). Note that it is CUSTACCOUNT
        ///   of OrdOrgKeyID (NOT OrdOrgInvoiceKeyID).
        ///
        /// ordReturnOrder:
        ///   As ordOrder
        ///
        /// ordOrderCorr:
        ///   Not used yet
        /// </summary>
        [Column("ORDORGACCOUNT")]
        [MaxLength(20)]
        public string OrgAccount { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGEXTERNALID</para>
        /// This field is only filled by the Job Server.
        ///
        /// For customer orders created by the job server it will contain the ID of the order in the external system where the order originated. It is used to locate the correct order if the external system sends an update to the order.
        ///
        /// For purchase orders the field will contain the ID of the Job Run that last exported the order. The Job Server uses the field to determine if the order has already been sent if orders must only be exported once and not every time they are updated.
        /// (Do not make any assumptions on this functionality described for purchase orders in reports or external code. Getinge reserves the right to change this implementation at any time).
        /// </summary>
        [Column("ORDORGEXTERNALID")]
        [MaxLength(50)]
        public string OrgExternalId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGINVOICEDIRECT</para>
        /// True:
        ///   Means that ORDORGINVOICEKEYID is to be set to ORDORGKEYID at delivery time
        ///   regardless of the indicated invoicekeyid on the originator.
        ///
        /// False:
        ///   ORDORGINVOICEKEYID is set to the indicated invoicekeyid on the originator (for
        ///   customers CUSTINVOICECUSTKEYID) at delivery time.
        ///
        /// The default is false.
        ///
        /// Eventhough the field is false ORDORGINVOICEKEYID can be equal to ORDORGKEYID as most originators does not have a invoicekeyid other than themselves.
        /// </summary>
        [Column("ORDORGINVOICEDIRECT")]
        [Required]
        public bool OrgInvoiceDirect { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGINVREFCUSTKEYID</para>
        /// Replacing OrdOrgInvoiceKeyID.
        ///
        /// ordOrder:
        ///   This field is set when the order is delivered (OrdSuppStatus=ossDelivered).
        ///   The field is set to OrdOrgKeyID in all cases except when ORDORGTYPE=taCustomer
        ///   where the following rule applies:
        ///     If ORDORGINVOICEDIRECT=false the field is set to CUSTINVOICECUSTKEYID of
        ///     OrdOrgKeyID if CUSTINVOICECUSTKEYID&lt;&gt;0 otherwise to OrdOrgKeyID.
        ///
        /// ordReturnOrder:
        ///   As ordOrder
        ///
        /// ordOrderCorr:
        ///   Not used yet
        ///
        /// Replacing OrdOrgInvoiceKeyid + OrdOrgType
        /// </summary>
        [Column("ORDORGINVREFCUSTKEYID")]
        public int? OrgInvRefCustKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGINVREFFACKEYID</para>
        /// Replacing OrdOrgInvoiceKeyID.
        /// </summary>
        [Column("ORDORGINVREFFACKEYID")]
        public int? OrgInvRefFacKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGINVREFSUPPKEYID</para>
        /// Replacing OrdOrgInvoiceKeyID.
        /// </summary>
        [Column("ORDORGINVREFSUPPKEYID")]
        public int? OrgInvRefSuppKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGREFCUSTKEYID</para>
        /// ordOrder:
        /// The keyid of the originator (receiver of the goods) of the order. Orders can not be delivered without an originator. If there is a need for a &quot;standard/cach&quot; customer one will have to be created and used as such.
        ///
        /// ordReturnOrder:
        /// The keyid of the originator (returning the goods) of the order. Orders can not be returned without an originator.
        ///
        /// ordOrderCorr:
        ///   not used
        ///
        /// Replacing OrdOrgKeyID + OrdOrgType
        /// </summary>
        [Column("ORDORGREFCUSTKEYID")]
        public int? OrgRefCustKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGREFFACKEYID</para>
        /// </summary>
        [Column("ORDORGREFFACKEYID")]
        public int? OrgRefFacKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGREFNO</para>
        /// ordOrder:
        ///   Reference number in Originators purchase order number series.
        ///
        /// ordReturnOrder:
        ///   Reference number in Originators return request number series.
        ///
        /// ordOrderCorr:
        ///   Is set to ORDKEYID to ensure uniqueness for index XORDORG.
        ///   The value is not used.
        /// </summary>
        [Column("ORDORGREFNO")]
        public int? OrgRefNo { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGREFSUPPKEYID</para>
        /// </summary>
        [Column("ORDORGREFSUPPKEYID")]
        public int? OrgRefSuppKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGREFTEXT</para>
        /// ordOrder,ordReturnOrder:
        /// This is a free text (searchable) field. It can be used to hold external reqvisition numbers etc.
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("ORDORGREFTEXT")]
        [MaxLength(40)]
        public string OrgRefText { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGREFTEXT2</para>
        /// </summary>
        [Column("ORDORGREFTEXT2")]
        [MaxLength(40)]
        public string OrgRefText2 { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGREMARK</para>
        /// Any remarks entered for the order by the originator.
        /// </summary>
        [Column("ORDORGREMARK")]
        public string OrgRemark { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGSTATUS</para>
        /// ordOrder:
        ///   None=not used
        ///   Template=not used
        ///   Open=The purchase order is under construction
        ///   Sent=The purchase order is sent to the supplier
        ///   Received=All orderlines are received/rejected
        ///   Done=Prices are updated and the total purchase completed
        ///   Cancelled=The order is cancelled. Everything is undone
        ///
        /// For all orders where OrdSupp is a Factory or internal supplier there is NO option to manually change OrdOrgStatus from Received to Done. In other words when goods are moved internally the price is fixed between stocks.
        ///
        /// ordReturnOrder:
        ///   None=not used
        ///   Template=not used
        ///   Open=not used
        ///   Sent=not used
        ///   Received=All orderlines are received/rejected
        ///   Done=Prices are updated and the total return completed
        ///   Cancelled=The order is cancelled. Everything is undone
        ///
        /// For all orders where OrdSupp is a Factory or internal supplier there is NO option to manually change OrdOrgStatus from Received to Done. In other words when goods are moved internally the price is fixed between stocks.
        ///
        /// ordOrderCorr:
        ///   always None****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None      = 0
        ///   Template  = 1
        ///   Open      = 2
        ///   Sent      = 3
        ///   Received  = 4
        ///   Done      = 5
        ///   Cancelled = 6
        /// ********************************************************************************
        /// </summary>
        [Column("ORDORGSTATUS")]
        [Required]
        public OrderOrgStatus OrgStatus { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGSTOKKEYID</para>
        /// ordOrder,ordReturnOrder:
        /// The stock the originator is ordering for if any.
        ///
        /// If a stock is given the articles are moved to this stock. If none is given the articles will &quot;dissapear&quot; from T-DOC when delivered. In both cases the originator will be invoiced.
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("ORDORGSTOKKEYID")]
        public int? OrgStokKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGTIME</para>
        /// ordOrder,ordReturnOrder:
        ///   The time the current OrdOrgStatus was set
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("ORDORGTIME", TypeName = "datetime")]
        public DateTime? OrgTime { get; set; }

        /// <summary>
        /// <para>TORDER.ORDORGUSERKEYID</para>
        /// ordOrder,ordReturnOrder:
        ///   The user that &quot;caused&quot; the current OrdOrgStatus
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("ORDORGUSERKEYID")]
        public int? OrgUserKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDPREVORDKEYID</para>
        /// ordOrder:
        ///   If this order is a backorder this field will contain the ID of the
        ///   order it originated from.
        ///
        /// ordReturnOrder:
        ///   not used  (should we make a link here ???)
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("ORDPREVORDKEYID")]
        public int? PrevOrdKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDREFOPDKEYID</para>
        /// This field is a reference to the OPDKEYID field. If it has a value then this is the ONLY thing that determines if an order is linked to an operation.
        ///
        /// Being filled in following cases:
        /// - When manually making the link in the Customer Orders (or Return Orders (Customer)) window in Admin
        /// - When you create orders based on preference list (both via Admin and also Job Server Operation Ordering job)
        /// - By scanner using an order scanner.
        /// - By the Job Server when importing orders (Order Import job). Here it is also used to &quot;sync&quot; orders based on changes in external systems.
        ///
        /// Replacing OrdRefKeyID + OrdRefType
        /// </summary>
        [Column("ORDREFOPDKEYID")]
        public int? RefOpDKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDREFOPTKEYID</para>
        /// A link to the operation type that was used as a template to create the order.
        /// You cannot assume that the value set here is the same as the type set on a potential operation specified in ORDREFOPDKEYID.
        /// You cannot assume that ORDREFOPDKEYID is set even if this field is set.
        ///
        /// The link is primarilly used to detemine if re-ordering of the order should happen automatically on dispatch/delivery. This will happen if the linked operation type is an ottEmergency system type.
        /// Reordering might also be dependent on location options.
        /// </summary>
        [Column("ORDREFOPTKEYID")]
        public int? RefOpTKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDREORDERED</para>
        /// Indicates whether the order has been reordered.
        /// </summary>
        [Column("ORDREORDERED")]
        [Required]
        public bool Reordered { get; set; }

        /// <summary>
        /// <para>TORDER.ORDREQDELTIME</para>
        /// The requested delivery date. This is specified by the originator.
        /// </summary>
        [Column("ORDREQDELTIME", TypeName = "datetime")]
        public DateTime? ReqDelTime { get; set; }

        /// <summary>
        /// <para>TORDER.ORDRETURNREQ</para>
        /// Indicates whether the order has been return requested.
        /// </summary>
        [Column("ORDRETURNREQ")]
        [Required]
        public bool ReturnReq { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSPLITORDKEYID</para>
        /// Reserved for internal experimental use. Ref. stock automation project.
        /// </summary>
        [Column("ORDSPLITORDKEYID")]
        public int? SplitOrdKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPPICKMODE</para>
        /// Only used together with a MES system.
        ///
        /// Determines how the order should be picked. Possible values are:
        /// - Normal = Normal picking with no MES involvement
        /// - FullAuto = Picking fully automated
        /// - EjectOnly = Picked goods is ejected from storage for manual processing
        ///
        ///
        /// TOrderSuppPickMode = (Normal, FullAuto, EjectOnly);****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Normal    = 0
        ///   FullAuto  = 1
        ///   EjectOnly = 2
        /// ********************************************************************************
        /// </summary>
        [Column("ORDSUPPPICKMODE")]
        public OrderSuppPickMode? SuppPickMode { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPPICKPRIORITY</para>
        /// Currently only used when T-DOC is connected to a MES system. Determines internal picking priority based on user input or T-DOC logic. Possible values are:
        /// Null/0 = Normal: As specified in ORDSUPPPRIORITY.
        /// 1 = Pick now: User want&#39;s immediate picking if the order can be delivered in full.
        /// 3 = Pick now Forced: User want&#39;s immediate picking. No matter if the order cannot be fully delivered.
        ///
        /// | PICKPRIORITY   | 0 = Normal              | 1 = Now                 |  2 = Now forced         |
        /// |----------------|-------------------------|-------------------------|-------------------------|
        /// | PRIORITY       |                         |                         |                         |
        /// | 0 = Normal     | Normal                  | Ad-hoc job now if       | Ad-hoc job now if       |
        /// |                |                         | all goods is available. | just 1 article is       |
        /// |                |                         |                         | available.              |
        /// |----------------|-------------------------|-------------------------|-------------------------|
        /// | 1 = Fast track | Via Forecast but        | Ad-hoc job now if       | Ad-hoc job now if       |
        /// |                | with first available    | all goods is available. | just 1 article is       |
        /// |                | transport.              |                         | available.              |
        /// |----------------|-------------------------|-------------------------|-------------------------|
        /// | 2 = Acute      | Ad-hoc job now if       | N/A                     | Ad-hoc job now if       |
        /// |                | all goods is available. |                         | just 1 article is       |
        /// |                |                         |                         | available.              |
        /// ------------------------------------------------------------------------------------------------
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Normal        = 0
        ///   PickNow       = 1
        ///   PickNowForced = 2
        /// ********************************************************************************
        /// </summary>
        [Column("ORDSUPPPICKPRIORITY")]
        public OrderSuppPickPriority? SuppPickPriority { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPPRIORITY</para>
        /// Determines the priority of the order as seen from the supplier/factory.
        /// Valid values are:
        /// 0 = Normal: The order should be delivered normally (most often &quot;just-in-time&quot;)
        /// 1 = Fast track: The order should be delivered as soon as possible using normal &quot;transportation&quot;.
        /// 2 = Emergency / Acute: The order should be delivered as fast as possible using any available &quot;means&quot; before anything else.
        ///
        /// Note: The field is currently only used in installations where a MES system is handling automated stocks.
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Normal    = 0
        ///   FastTrack = 1
        ///   Emergency = 2
        /// ********************************************************************************
        /// </summary>
        [Column("ORDSUPPPRIORITY")]
        public OrderSuppPriority? SuppPriority { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPREFCUSTKEYID</para>
        /// ordOrder:
        /// The keyid of the supplier (dispatcher of the goods) of the order. Orders can not be delivered without an supplier.
        ///
        /// ordReturnOrder:
        /// The keyid of the supplier (taking back the goods) of the order. Orders can not be delivered without an supplier.
        ///
        /// ordOrderCorr:
        /// The keyid of the owner of the stock to correct. Corrections can not be conducted without an supplier.
        ///
        /// Replacing OrdSuppKeyID + OrdSuppType
        /// </summary>
        [Column("ORDSUPPREFCUSTKEYID")]
        public int? SuppRefCustKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPREFFACKEYID</para>
        /// Replacing OrdSuppKeyID + OrdSuppType
        /// </summary>
        [Column("ORDSUPPREFFACKEYID")]
        public int? SuppRefFacKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPREFNO</para>
        /// The suppliers order number from their internal number series. (TSequence)
        ///
        /// This is also the number on the T-DOC deliverynote.
        ///
        /// ordOrder:
        ///   Reference number in Suppliers order number series.
        ///   This is also the number on the T-DOC deliverynote.
        ///
        /// ordReturnOrder:
        ///   Reference number in Suppliers return order number series.
        ///   This is also the number on the T-DOC returnnote.
        ///
        /// ordOrderCorr:
        ///   Reference number in Suppliers Inventory correction number series.
        /// </summary>
        [Column("ORDSUPPREFNO")]
        public int? SuppRefNo { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPREFSUPPKEYID</para>
        /// Replacing OrdSuppKeyID + OrdSuppType
        /// </summary>
        [Column("ORDSUPPREFSUPPKEYID")]
        public int? SuppRefSuppKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPREFTEXT</para>
        /// </summary>
        [Column("ORDSUPPREFTEXT")]
        [MaxLength(40)]
        public string SuppRefText { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPREFTEXT2</para>
        /// </summary>
        [Column("ORDSUPPREFTEXT2")]
        [MaxLength(40)]
        public string SuppRefText2 { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPREMARK</para>
        /// Any remarks entered for the order by the supplier.
        /// </summary>
        [Column("ORDSUPPREMARK")]
        public string SuppRemark { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPSTATUS</para>
        /// ordOrder:
        ///   None     =The order is not yet received here. It is a Template or under
        ///                construction at Org
        ///   Template =not used
        ///   Order    =The order is received but not accepted
        ///   Accepted =The order is accepted   (rejected ????)
        ///   Picked   =Picking of the order has started. Set as soon anything at all
        ///                is picked. ORDSUPPSTOKKEYID is now locked.
        ///   Delivered=All orderlines are delivered/rejected/on backorder
        ///   Cancelled=The order is cancelled. Everything is undone.
        ///
        /// ordReturnOrder:
        ///   None     =not used
        ///   Template =not used
        ///   Order    =not used
        ///   Accepted =The return order is accepted
        ///   Picked   =Used for orders automatically created as a result of returning Units.
        ///   Delivered=All orderlines are returned
        ///   Cancelled=The order is cancelled. Everything is undone.
        ///
        /// ordOrderCorr:
        ///   None     =not used
        ///   Template =not used
        ///   Order    =not used
        ///   Accepted =The corrections are under &quot;construction&quot;
        ///   Picked   =not used
        ///   Delivered=All corrections are applied
        ///   Cancelled=not used
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None      = 0
        ///   Template  = 1
        ///   Order     = 2
        ///   Accepted  = 3
        ///   Picked    = 4
        ///   Delivered = 5
        ///   Cancelled = 6
        /// ********************************************************************************
        /// </summary>
        [Column("ORDSUPPSTATUS")]
        [Required]
        public OrderSuppStatus SuppStatus { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPSTOKKEYID</para>
        /// The id of the stock the supplier is supplying from. Orders can not be delivered without a stock is given if the supplier is internal.
        ///
        /// ordOrder,ordReturnOrder:
        /// The id of the stock the supplier is supplying/returning from/to. Orders can not be delivered/returned without a stock is given if the supplier is internal.
        /// Once ORDSUPPSTATUS becomes ossPicked this field MUST NOT be changed as all orderlinies
        /// wihtout a linespecification will be delivered from this stock. You might not understand
        /// this so just DON&#39;T DO IT!!!
        ///
        /// ordOrderCorr:
        /// The id of the stock where ALL the corrections are (to be) applied.
        /// </summary>
        [Column("ORDSUPPSTOKKEYID")]
        public int? SuppStokKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPTIME</para>
        /// ordOrder,ordReturnOrder,ordOrderCorr:
        ///   The time the current OrdSuppStatus was set
        /// </summary>
        [Column("ORDSUPPTIME", TypeName = "datetime")]
        public DateTime? SuppTime { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSUPPUSERKEYID</para>
        /// ordOrder,ordReturnOrder,ordOrderCorr:
        ///   The user that &quot;caused&quot; the current OrdSuppStatus
        /// </summary>
        [Column("ORDSUPPUSERKEYID")]
        public int? SuppUserKeyId { get; set; }

        /// <summary>
        /// <para>TORDER.ORDSYNCTOOPERATION</para>
        /// EnumType: TOrderOperationSyncMode = (NA ,  Synced, Stopped);
        /// When an order is created on basis of a preference list for an Operation), the OrdSyncToOperation = Synced.
        /// If the user “breaks” the synchronization, the values is then set to Stopped.
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   NA      = 0
        ///   Synced  = 1
        ///   Stopped = 2
        /// ********************************************************************************
        /// </summary>
        [Column("ORDSYNCTOOPERATION")]
        [Required]
        public OrderOperationSyncMode SyncToOperation { get; set; }

        /// <summary>
        /// <para>TORDER.ORDTAG</para>
        /// </summary>
        [Column("ORDTAG")]
        public int? Tag { get; set; }

        /// <summary>
        /// <para>TORDER.ORDTYPE</para>
        /// Determines the type of the order.
        ///
        ///   TOrderType = (None,Order,ReturnOrder,OrderCorr);
        ///
        /// None=not used
        /// Order=a normal order
        /// ReturnOrder=Used when articles delivered on a Order are returned unused (credit note)
        /// OrderCorr=used for inventory correction transactions
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None        = 0
        ///   Order       = 1
        ///   ReturnOrder = 2
        ///   OrderCorr   = 3
        /// ********************************************************************************
        /// </summary>
        [Column("ORDTYPE")]
        [Required]
        public OrderType Type { get; set; }

        /// <summary>
        /// <para>TORDER.ORDUNLOCKSTOKKEYID</para>
        /// Indicates the stock all goods should be moved to when an order is unlocked.
        /// Only set if/when the order is locked.
        ///
        /// If the order is not locked then the value will normally be NULL, but if not then the value is not used/does not have any effect.
        /// </summary>
        [Column("ORDUNLOCKSTOKKEYID")]
        public int? UnlockStokKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: CreatedLocaKeyId -> LocationModel.KeyId (TORDER.ORDCREATEDLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedLocaKeyId))]
        public LocationModel CreatedLoca { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedUserKeyId -> UserModel.KeyId (TORDER.ORDCREATEDUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedUserKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a OrderTemplateModel instance.
        /// <para />
        /// Foreign key: OrdTpKeyId -> OrderTemplateModel.KeyId (TORDER.ORDORDTPKEYID -> TORDERTP.ORDTPKEYID)
        /// </summary>
        [ForeignKey(nameof(OrdTpKeyId))]
        public OrderTemplateModel OrdTp { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: OrgInvRefCustKeyId -> CustomerModel.KeyId (TORDER.ORDORGINVREFCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgInvRefCustKeyId))]
        public CustomerModel OrgInvRefCust { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: OrgInvRefFacKeyId -> FactoryModel.KeyId (TORDER.ORDORGINVREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgInvRefFacKeyId))]
        public FactoryModel OrgInvRefFac { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: OrgInvRefSuppKeyId -> SupplierModel.KeyId (TORDER.ORDORGINVREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgInvRefSuppKeyId))]
        public SupplierModel OrgInvRefSupp { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: OrgRefCustKeyId -> CustomerModel.KeyId (TORDER.ORDORGREFCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgRefCustKeyId))]
        public CustomerModel OrgRefCust { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: OrgRefFacKeyId -> FactoryModel.KeyId (TORDER.ORDORGREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgRefFacKeyId))]
        public FactoryModel OrgRefFac { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: OrgRefSuppKeyId -> SupplierModel.KeyId (TORDER.ORDORGREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgRefSuppKeyId))]
        public SupplierModel OrgRefSupp { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: OrgStokKeyId -> StocksModel.KeyId (TORDER.ORDORGSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgStokKeyId))]
        public StocksModel OrgStok { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: OrgUserKeyId -> UserModel.KeyId (TORDER.ORDORGUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgUserKeyId))]
        public UserModel OrgUser { get; set; }

        /// <summary>
        /// Reference to a OperationDataModel instance.
        /// <para />
        /// Foreign key: RefOpDKeyId -> OperationDataModel.KeyId (TORDER.ORDREFOPDKEYID -> TOPDATA.OPDKEYID)
        /// </summary>
        [ForeignKey(nameof(RefOpDKeyId))]
        public OperationDataModel RefOpD { get; set; }

        /// <summary>
        /// Reference to a OperationTypeModel instance.
        /// <para />
        /// Foreign key: RefOpTKeyId -> OperationTypeModel.KeyId (TORDER.ORDREFOPTKEYID -> TOPTYPE.OPTKEYID)
        /// </summary>
        [ForeignKey(nameof(RefOpTKeyId))]
        public OperationTypeModel RefOpT { get; set; }

        /// <summary>
        /// Reference to a OrderModel instance.
        /// <para />
        /// Foreign key: SplitOrdKeyId -> OrderModel.KeyId (TORDER.ORDSPLITORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [ForeignKey(nameof(SplitOrdKeyId))]
        public OrderModel SplitOrd { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: SuppRefCustKeyId -> CustomerModel.KeyId (TORDER.ORDSUPPREFCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppRefCustKeyId))]
        public CustomerModel SuppRefCust { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: SuppRefFacKeyId -> FactoryModel.KeyId (TORDER.ORDSUPPREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppRefFacKeyId))]
        public FactoryModel SuppRefFac { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: SuppRefSuppKeyId -> SupplierModel.KeyId (TORDER.ORDSUPPREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppRefSuppKeyId))]
        public SupplierModel SuppRefSupp { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: SuppStokKeyId -> StocksModel.KeyId (TORDER.ORDSUPPSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppStokKeyId))]
        public StocksModel SuppStok { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: SuppUserKeyId -> UserModel.KeyId (TORDER.ORDSUPPUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppUserKeyId))]
        public UserModel SuppUser { get; set; }

        /// <summary>
        /// Reference to a TagsModel instance.
        /// <para />
        /// Foreign key: Tag -> TagsModel.KeyId (TORDER.ORDTAG -> TTAGS.TAGSKEYID)
        /// </summary>
        [ForeignKey(nameof(Tag))]
        public TagsModel TagTags { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: UnlockStokKeyId -> StocksModel.KeyId (TORDER.ORDUNLOCKSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(UnlockStokKeyId))]
        public StocksModel UnlockStok { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of OrderLineModel instances.
        /// <para />
        /// Foreign key: OrderLineModel.OrdKeyId -> KeyId (TORDLN.OLNORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [InverseProperty("Ord")]
        public List<OrderLineModel> OrdOrderLineList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderLotInfoModel instances.
        /// <para />
        /// Foreign key: OrderLotInfoModel.OrdKeyId -> KeyId (TORDLOTINFO.OLOTINORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [InverseProperty("Ord")]
        public List<OrderLotInfoModel> OrdOrderLotInfoList { get; set; }

        /// <summary>
        /// Reference to a collection of PatientConsModel instances.
        /// <para />
        /// Foreign key: PatientConsModel.OrdKeyId -> KeyId (TPATCONS.PATCOORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [InverseProperty("Ord")]
        public List<PatientConsModel> OrdPatientConsList { get; set; }

        /// <summary>
        /// Reference to a collection of ProductReservationModel instances.
        /// <para />
        /// Foreign key: ProductReservationModel.OrdKeyId -> KeyId (TPRODRESERVATION.PRESVORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [InverseProperty("Ord")]
        public List<ProductReservationModel> OrdProductReservationList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitLocationModel instances.
        /// <para />
        /// Foreign key: UnitLocationModel.RefOrdKeyId -> KeyId (TUNITLCA.ULCAREFORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [InverseProperty("RefOrd")]
        public List<UnitLocationModel> RefOrdUnitLocationList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.SplitOrdKeyId -> KeyId (TORDER.ORDSPLITORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [InverseProperty("SplitOrd")]
        public List<OrderModel> SplitOrdOrderList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderLineModel instances.
        /// <para />
        /// Foreign key: OrderLineModel.SuppLaterOrdKeyId -> KeyId (TORDLN.OLNSUPPLATERORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [InverseProperty("SuppLaterOrd")]
        public List<OrderLineModel> SuppLaterOrdOrderLineList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TORDLN table.
    /// This table holds the actual order lines belonging to the order headers in TOrder.
    ///
    /// The contents of the fields in each line depends on the type of the order (OrdType).
    /// </summary>
    [Table("TORDLN")]
    public class OrderLineModel
    {
        /// <summary>
        /// <para>TORDLN.OLNKEY</para>
        /// Unique identifier, to which other tables can refer to.
        /// </summary>
        [Column("OLNKEY")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNEXPDELTIME</para>
        /// </summary>
        [Column("OLNEXPDELTIME", TypeName = "datetime")]
        public DateTime? ExpDelTime { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNHASALTERNATIVE</para>
        /// Indicates if there are any alternative articles specified specifically for the order line.
        /// I.e. if there are any records in TORDLNALTERNATIVE pointing to this order line.
        /// It is expected that less than 1-2% of all order lines will have alternatives specified. By having the information available in this field a huge amount of lookups in TORDLNALTERNATIVE can be avoided.
        /// Default = &#39;F&#39; (Specified at the database level)
        /// This field shall be computed by a trigger on the TORDLNALTERNATIVE table.
        /// </summary>
        [Column("OLNHASALTERNATIVE")]
        [Required]
        public bool HasAlternative { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNIDENTLINEUSAGE</para>
        /// TIdentArticleLineUsage
        /// This enumeration type is used to indicate if it is possible to specify identical articles at the line level for orders, order templates, composite items lists, preference lists and stocks.
        /// TIdentArticleLineUsage = (Enabled, Disabled)
        ///
        /// Enabled:
        ///   Identical article substitution is enabled for the line.
        ///
        /// Disabled:
        ///   Identical article substitution is disabled for the line.
        ///
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Enabled  = 0
        ///   Disabled = 1
        /// ********************************************************************************
        /// </summary>
        [Column("OLNIDENTLINEUSAGE")]
        [Required]
        public IdentArticleLineUsage IdentLineUsage { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNLINE</para>
        /// All:
        ///   The number of the line in the order.
        ///   These are consequtive numbers but there might be &quot;holes&quot;.
        ///
        ///
        /// ordOrder,ordReturnOrder:
        ///   When an order is viewed on screen or printed lines are sorted on this field
        ///
        /// ordOrderCorr:
        ///   not determined
        /// </summary>
        [Column("OLNLINE")]
        [Required]
        public int Line { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNORDKEYID</para>
        /// The order the line pertains to
        /// </summary>
        [Column("OLNORDKEYID")]
        [Required]
        public int OrdKeyId { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNORGALTITEMKEYID</para>
        /// Abbreviation for: OrderLine_Original_Alternative_Item_KeyId
        ///
        /// This column is filled out, when an identical item for an alternative item has been picked. The value of column is the Alternative Item Key Id.
        /// Column is only used when parent Key Id field is set.
        /// </summary>
        [Column("OLNORGALTITEMKEYID")]
        public int? OrgAltItemKeyId { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNORGALTPRODKEYID</para>
        /// Abbreviation for: OrderLine_Original_Alternative_Prod_KeyId
        ///
        /// This column is filled out, when an identical product for an alternative product has been picked. The value of column is the Alternative Product Key Id.
        ///
        /// Column is only used when parent Key Id field is set.
        /// </summary>
        [Column("OLNORGALTPRODKEYID")]
        public int? OrgAltProdKeyId { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNORGORDERED</para>
        /// ordOrder:
        ///   The number ordered in the smallest possible unit. (If the advanced order entry mode
        ///   is used this field is OLNORGUNITCOUNT*OLNORGSTDCOUNT.
        ///
        /// ordReturnOrder:
        ///   not used
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("OLNORGORDERED")]
        public int? OrgOrdered { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNORGPRICE</para>
        /// ordOrder,ordReturnOrder:
        ///   The usage price of the article at the time of delivery/return.
        ///   The price is for 1 (one) article so it must be multiplied with
        ///   OlnSuppDelivered to get the total.
        ///
        ///   This value is not valid until OlnSuppStatus&gt;=ossDelivered
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("OLNORGPRICE", TypeName = "Money")]
        public decimal? OrgPrice { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNORGRECEIVED</para>
        /// ordOrder:
        ///   The number received. Calculated as OLNUNITRECEIVED * OLNSUPPSTDCOUNT in extended order mode.
        ///
        /// ordReturnOrder:
        ///   The number returned. Calculated as OLNUNITRECEIVED * OLNSUPPSTDCOUNT in extended order mode.
        ///
        /// ordOrderCorr:
        ///   not used
        ///
        /// A null value indicates that OlnOrgOrdered was received
        /// </summary>
        [Column("OLNORGRECEIVED")]
        public int? OrgReceived { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNORGSTATUS</para>
        /// CURRENTLY THIS FIELD IS SLAVED TO ORDORGSTATUS.
        ///
        /// ordOrder:
        ///   None    =not used
        ///   Template=not used
        ///   Open    =not used
        ///   Sent    =not used
        ///   Received=The orderline is received
        ///   Done    =Prices are updated and the line is completed
        ///   Cancelled=The line is cancelled. Everything is undone
        ///
        /// ordReturnOrder:
        ///   None    =not used
        ///   Template=not used
        ///   Open    =not used
        ///   Sent    =not used
        ///   Received=The orderline is returned
        ///   Done    =Prices are updated and the line is completed
        ///   Cancelled=The line is cancelled. Everything is undone
        ///
        /// ordOrderCorr:
        ///   None    =not used
        ///   Template=not used
        ///   Open    =not used
        ///   Sent    =not used
        ///   Received=not used
        ///   Done    =not used
        ///   Cancelled=not used****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None      = 0
        ///   Template  = 1
        ///   Open      = 2
        ///   Sent      = 3
        ///   Received  = 4
        ///   Done      = 5
        ///   Cancelled = 6
        /// ********************************************************************************
        /// </summary>
        [Column("OLNORGSTATUS")]
        public OrderOrgStatus? OrgStatus { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNORGSTDCOUNT</para>
        /// ordOrder:
        ///   Use in advanced order entry mode. This is the &quot;package size&quot; being ordered.
        ///   The total number ordered OLNORGORDERED = OLNORGUNITCOUNT * OLNORGSTDCOUNT.
        ///
        /// ordReturnOrder:
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("OLNORGSTDCOUNT")]
        public int? OrgStdCount { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNORGUNITCOUNT</para>
        /// ordOrder:
        ///   Use in advanced order entry mode. This is the number of OLNORGSTDCOUNT that is ordered.
        ///   The total number ordered OLNORGORDERED = OLNORGUNITCOUNT * OLNORGSTDCOUNT.
        ///
        /// ordReturnOrder:
        ///
        /// ordOrderCorr:
        ///   The actual value of StoInventoryPhysCount. The number is used when applying the
        ///   corrections for products.
        /// </summary>
        [Column("OLNORGUNITCOUNT")]
        public int? OrgUnitCount { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNORGUNITRECEIVED</para>
        /// ordOrder:
        ///   Use in advanced order entry mode. This is the number of OLNSUPPSTDCOUNT that
        ///   is received.
        ///   The total number received OLNORGRECEIVED = OLNORGUNITRECEIVED * OLNSUPPSTDCOUNT.
        ///
        /// ordReturnOrder:
        ///   Save as ordOrder.
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("OLNORGUNITRECEIVED")]
        public int? OrgUnitReceived { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNPARENTKEY</para>
        /// When a substitute article is delivered, a new TORDLN row shall be created. The Substitute article row shall refers to the original Order Line.
        /// </summary>
        [Column("OLNPARENTKEY")]
        public int? ParentKey { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNPRIGRKEYID</para>
        /// A link to the price group that was used when determining the price. Only set for lines based on a Product and only if the units where prices using price groups.
        /// If the price is manually altered the field is cleared.
        /// </summary>
        [Column("OLNPRIGRKEYID")]
        public int? PrigrKeyId { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNPRNORDER</para>
        /// Only used when a stored procedure is used to sort the picklist or delivery note in a special order. When this is done the reports will only put this field in their ORDER BY clause.
        /// </summary>
        [Column("OLNPRNORDER")]
        public int? PrnOrder { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNREFITEMKEYID</para>
        /// ordOrder,ordReturnOrder,ordOrderCorr:
        ///   If set then the order line concerns the referenced item from TITEM.
        ///
        ///   If null then the line concerns a product (OLNREFPRODKEYID).
        ///
        /// Important: Only Single Items are supported (i.e. Items where ITEMCOMPOSITE = False)
        /// </summary>
        [Column("OLNREFITEMKEYID")]
        public int? RefItemKeyId { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNREFPRODKEYID</para>
        /// ordOrder,ordReturnOrder,ordOrderCorr:
        ///   If set then the order line concerns the referenced product from TPRODUCT.
        ///
        ///   If null then the line concerns an item (OLNREFITEMKEYID).
        /// </summary>
        [Column("OLNREFPRODKEYID")]
        public int? RefProdKeyId { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNREFSERIKEYID</para>
        /// Not yet implemented
        ///
        /// If the goods ordered on the line is meant for a particular serial number this field points to that serial number.
        ///
        /// Only used for item order lines.
        /// </summary>
        [Column("OLNREFSERIKEYID")]
        public int? RefSeriKeyId { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNREQDELTIME</para>
        /// </summary>
        [Column("OLNREQDELTIME", TypeName = "datetime")]
        public DateTime? ReqDelTime { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNSUBSTITUTIONREASON</para>
        /// When a substitution order line has been created, the substitution type shall be stated here. New EnumType: TSubstitutionReason=(None, Identical, Alternative, IdenticalForAlternative)
        ///
        /// null = none
        /// 0 = none
        /// 1 = identical
        /// 2 = alternative
        /// 3 = identical for alternative****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None                    = 0
        ///   Identical               = 1
        ///   Alternative             = 2
        ///   IdenticalForAlternative = 3
        /// ********************************************************************************
        /// </summary>
        [Column("OLNSUBSTITUTIONREASON")]
        public SubstitutionReason? SubstitutionReason { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNSUPPDELIVERED</para>
        /// ordOrder:
        ///   The number delivered in the smallest possible unit. (If the advanced order entry mode
        ///   is used this field is OLNSUPPUNITCOUNT * OLNSUPPSTDCOUNT.
        ///
        /// ordReturnOrder:
        ///   The number returned
        ///
        /// ordOrderCorr:
        ///   The actual number on stock when the correction is applied (physical inventory)
        ///   (Correction=OlnSuppDelivered-OlnSuppLater)
        /// </summary>
        [Column("OLNSUPPDELIVERED")]
        public int? SuppDelivered { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNSUPPLATER</para>
        /// ordOrder:
        ///   The number put on hold (backorder) in the smallest possible unit.
        ///   If the advanced order entry mode is used this field is
        ///   OLNSUPPUNITLATER * OLNSUPPSTDCOUNT.
        ///   Only valid if OlnSuppLaterOrdKeyID&lt;&gt;NULL.
        ///
        /// ordReturnOrder:
        ///   not used
        ///
        /// ordOrderCorr:
        ///   The number supposed to be on stock when the correction is applied.
        ///   (Transferred from StoInventoryCount)
        ///
        ///   (Correction=OlnSuppDelivered-OlnSuppLater)
        /// </summary>
        [Column("OLNSUPPLATER")]
        public int? SuppLater { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNSUPPLATERORDKEYID</para>
        /// ordOrder:
        ///   The OrdKeyID the &quot;later&quot; count was transferred to.
        ///
        /// ordReturnOrder:
        ///   not used
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("OLNSUPPLATERORDKEYID")]
        public int? SuppLaterOrdKeyId { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNSUPPPRICE</para>
        /// ordOrder,ordReturnOrder:
        ///   The cost price of the article at the time of delivery/return.
        ///   The price is for 1 (one) article so it must be multiplied
        ///   with OlnSuppDelivered to get the total.
        ///
        ///   This value is not valid until OlnSuppStatus&gt;=ossDelivered
        ///
        /// ordOrderCorr:
        ///   The cost price of the article at the time the correction
        ///   is applied.
        ///   The price is for 1 (one) article so it must be multiplied
        ///   with the &quot;Correction&quot; to get the total.
        ///   (CorrectionAmount=(OlnSuppDelivered-OlnSuppLater)*OlnSuppPrice)
        /// </summary>
        [Column("OLNSUPPPRICE", TypeName = "Money")]
        public decimal? SuppPrice { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNSUPPREF1</para>
        /// Only used for legacy import jobs.
        /// </summary>
        [Column("OLNSUPPREF1")]
        public int? SuppRef1 { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNSUPPREF2</para>
        /// Only used for legacy import jobs.
        /// </summary>
        [Column("OLNSUPPREF2")]
        public int? SuppRef2 { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNSUPPSTATUS</para>
        /// CURRENTLY THIS FIELD IS SLAVED TO ORDSUPPSTATUS.
        ///
        /// ordOrder:
        ///   None     =not used
        ///   Template =not used
        ///   Order    =not used
        ///   Accepted =The line is accepted
        ///   Picked   =A picklist has been printed on this line.
        ///                The line spec. contains LOT, Unit or serial number
        ///   Delivered=The line is delivered/rejected
        ///   Cancelled=The line is cancelled. Everything is undone
        ///
        /// ordReturnOrder:
        ///   None     =not used
        ///   Template =not used
        ///   Order    =not used
        ///   Accepted =The line is accepted
        ///   Picked   =not used
        ///   Delivered=The line is returned
        ///   Cancelled=The line is cancelled. Everything is undone
        ///
        /// ordOrderCorr:
        ///   None     =not used
        ///   Template =not used
        ///   Order    =not used
        ///   Accepted =The correction is under &quot;construction&quot;
        ///   Picked   =not used
        ///   Delivered=The correction is applied
        ///   Cancelled=not used****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None      = 0
        ///   Template  = 1
        ///   Order     = 2
        ///   Accepted  = 3
        ///   Picked    = 4
        ///   Delivered = 5
        ///   Cancelled = 6
        /// ********************************************************************************
        /// </summary>
        [Column("OLNSUPPSTATUS")]
        public OrderSuppStatus? SuppStatus { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNSUPPSTDCOUNT</para>
        /// ordOrder:
        ///   Use in advanced order entry mode. This is the &quot;package size&quot; being delivered.
        ///   The total number delivered OLNSUPPDELIVERED = OLNSUPPUNITCOUNT * OLNSUPPSTDCOUNT.
        ///
        /// ordReturnOrder:
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("OLNSUPPSTDCOUNT")]
        public int? SuppStdCount { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNSUPPUNITCOUNT</para>
        /// ordOrder:
        ///   Use in advanced order entry mode. This is the number of OLNSUPPSTDCOUNT that
        ///   is delivered.
        ///   The total number delivered OLNSUPPDELIVERED = OLNSUPPUNITCOUNT * OLNSUPPSTDCOUNT.
        ///
        /// ordReturnOrder:
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("OLNSUPPUNITCOUNT")]
        public int? SuppUnitCount { get; set; }

        /// <summary>
        /// <para>TORDLN.OLNSUPPUNITLATER</para>
        /// ordOrder:
        ///   Use in advanced order entry mode. This is the number of OLNSUPPSTDCOUNT that
        ///   is put on backorder.
        ///   The total number on backorder OLNSUPPLATER = OLNSUPPUNITLATER * OLNSUPPSTDCOUNT.
        ///
        /// ordReturnOrder:
        ///
        /// ordOrderCorr:
        ///   not used
        /// </summary>
        [Column("OLNSUPPUNITLATER")]
        public int? SuppUnitLater { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a OrderModel instance.
        /// <para />
        /// Foreign key: OrdKeyId -> OrderModel.KeyId (TORDLN.OLNORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [ForeignKey(nameof(OrdKeyId))]
        public OrderModel Ord { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: OrgAltItemKeyId -> ItemModel.KeyId (TORDLN.OLNORGALTITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgAltItemKeyId))]
        public ItemModel OrgAltItem { get; set; }

        /// <summary>
        /// Reference to a ProductModel instance.
        /// <para />
        /// Foreign key: OrgAltProdKeyId -> ProductModel.KeyId (TORDLN.OLNORGALTPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgAltProdKeyId))]
        public ProductModel OrgAltProd { get; set; }

        /// <summary>
        /// Reference to a OrderLineModel instance.
        /// <para />
        /// Foreign key: ParentKey -> OrderLineModel.KeyId (TORDLN.OLNPARENTKEY -> TORDLN.OLNKEY)
        /// </summary>
        [ForeignKey(nameof(ParentKey))]
        public OrderLineModel ParentKeyOrderLine { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: RefItemKeyId -> ItemModel.KeyId (TORDLN.OLNREFITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(RefItemKeyId))]
        public ItemModel RefItem { get; set; }

        /// <summary>
        /// Reference to a ProductModel instance.
        /// <para />
        /// Foreign key: RefProdKeyId -> ProductModel.KeyId (TORDLN.OLNREFPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [ForeignKey(nameof(RefProdKeyId))]
        public ProductModel RefProd { get; set; }

        /// <summary>
        /// Reference to a SerialModel instance.
        /// <para />
        /// Foreign key: RefSeriKeyId -> SerialModel.KeyId (TORDLN.OLNREFSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [ForeignKey(nameof(RefSeriKeyId))]
        public SerialModel RefSeri { get; set; }

        /// <summary>
        /// Reference to a OrderModel instance.
        /// <para />
        /// Foreign key: SuppLaterOrdKeyId -> OrderModel.KeyId (TORDLN.OLNSUPPLATERORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppLaterOrdKeyId))]
        public OrderModel SuppLaterOrd { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of OrderLineAlternativeModel instances.
        /// <para />
        /// Foreign key: OrderLineAlternativeModel.OLnKey -> KeyId (TORDLNALTERNATIVE.OLNALTOLNKEY -> TORDLN.OLNKEY)
        /// </summary>
        [InverseProperty("OLnKeyOrderLine")]
        public List<OrderLineAlternativeModel> OLnKeyOrderLineAlternativeList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderLotInfoModel instances.
        /// <para />
        /// Foreign key: OrderLotInfoModel.OLnKey -> KeyId (TORDLOTINFO.OLOTINOLNKEY -> TORDLN.OLNKEY)
        /// </summary>
        [InverseProperty("OLnKeyOrderLine")]
        public List<OrderLotInfoModel> OLnKeyOrderLotInfoList { get; set; }

        /// <summary>
        /// Reference to a collection of TagContentModel instances.
        /// <para />
        /// Foreign key: TagContentModel.OLnKey -> KeyId (TTAGCONTENT.TAGCOLNKEY -> TORDLN.OLNKEY)
        /// </summary>
        [InverseProperty("OLnKeyOrderLine")]
        public List<TagContentModel> OLnKeyTagContentList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderLineModel instances.
        /// <para />
        /// Foreign key: OrderLineModel.ParentKey -> KeyId (TORDLN.OLNPARENTKEY -> TORDLN.OLNKEY)
        /// </summary>
        [InverseProperty("ParentKeyOrderLine")]
        public List<OrderLineModel> ParentKeyOrderLineList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TORDLNALTERNATIVE table.
    /// The OrderLineAlternative is used to store alternative items or products when:
    ///
    /// A: An adhoc order is created and alternative items/products exists
    /// B: When an order is created on basis of a preferencelist. Alternative items/products is to be copied into this table.
    /// C: When an order is created on basis of an order template. Alternative items/products is to be copied into this table
    /// </summary>
    [Table("TORDLNALTERNATIVE")]
    public class OrderLineAlternativeModel
    {
        /// <summary>
        /// <para>TORDLNALTERNATIVE.OLNALTKEY</para>
        /// Primary key
        /// </summary>
        [Column("OLNALTKEY")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TORDLNALTERNATIVE.OLNALTITEMKEYID</para>
        /// Reference to an item. Either this or OLNALTPRODKEYID must be set.
        /// </summary>
        [Column("OLNALTITEMKEYID")]
        public int? ItemKeyId { get; set; }

        /// <summary>
        /// <para>TORDLNALTERNATIVE.OLNALTOLNKEY</para>
        /// Reference to the order line for which an alternative item/product exists
        /// </summary>
        [Column("OLNALTOLNKEY")]
        [Required]
        public int OLnKey { get; set; }

        /// <summary>
        /// <para>TORDLNALTERNATIVE.OLNALTPRIORITY</para>
        /// The alternative priority No. Does not have to be unique.
        /// </summary>
        [Column("OLNALTPRIORITY")]
        [Required]
        public int Priority { get; set; }

        /// <summary>
        /// <para>TORDLNALTERNATIVE.OLNALTPRODKEYID</para>
        /// Reference to a product. Either this or OLNALTITEMKEYID must be set.
        /// </summary>
        [Column("OLNALTPRODKEYID")]
        public int? ProdKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: ItemKeyId -> ItemModel.KeyId (TORDLNALTERNATIVE.OLNALTITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(ItemKeyId))]
        public ItemModel Item { get; set; }

        /// <summary>
        /// Reference to a OrderLineModel instance.
        /// <para />
        /// Foreign key: OLnKey -> OrderLineModel.KeyId (TORDLNALTERNATIVE.OLNALTOLNKEY -> TORDLN.OLNKEY)
        /// </summary>
        [ForeignKey(nameof(OLnKey))]
        public OrderLineModel OLnKeyOrderLine { get; set; }

        /// <summary>
        /// Reference to a ProductModel instance.
        /// <para />
        /// Foreign key: ProdKeyId -> ProductModel.KeyId (TORDLNALTERNATIVE.OLNALTPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [ForeignKey(nameof(ProdKeyId))]
        public ProductModel Prod { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TORDLOTINFO table.
    /// Links an order line (i.e. item) with a LOT number.
    /// </summary>
    [Table("TORDLOTINFO")]
    public class OrderLotInfoModel
    {
        /// <summary>
        /// <para>TORDLOTINFO.OLOTIN_CREATED</para>
        /// Time the link was created.
        /// </summary>
        [Column("OLOTIN_CREATED", TypeName = "datetime")]
        [Required]
        public DateTime Created { get; set; }

        /// <summary>
        /// <para>TORDLOTINFO.OLOTIN_CREATEDKEYID</para>
        /// KeyID of the user that created the link.
        /// </summary>
        [Column("OLOTIN_CREATEDKEYID")]
        [Required]
        public int CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TORDLOTINFO.OLOTINLOCAKEYID</para>
        /// KeyID of the location where the link was created.
        /// </summary>
        [Column("OLOTINLOCAKEYID")]
        [Required]
        public int LocaKeyId { get; set; }

        /// <summary>
        /// <para>TORDLOTINFO.OLOTINLOTINKEYID</para>
        /// KeyID of the LOT number that the order line links to.
        /// </summary>
        [Column("OLOTINLOTINKEYID")]
        [Required]
        public int LotInKeyId { get; set; }

        /// <summary>
        /// <para>TORDLOTINFO.OLOTINOLNKEY</para>
        /// </summary>
        [Column("OLOTINOLNKEY")]
        [Required]
        public int OLnKey { get; set; }

        /// <summary>
        /// <para>TORDLOTINFO.OLOTINOLNLINE</para>
        /// Order line number. Used in conjunction with OLOTInOrdKeyID to determine the item in the particular order.
        /// </summary>
        [Column("OLOTINOLNLINE")]
        [Required]
        public int OLnLine { get; set; }

        /// <summary>
        /// <para>TORDLOTINFO.OLOTINORDKEYID</para>
        /// KeyID of the order that links to the LOT number. Used in conjunction with OLOTInOLnLine to determine the item in the order.
        /// </summary>
        [Column("OLOTINORDKEYID")]
        [Required]
        public int OrdKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TORDLOTINFO.OLOTIN_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TORDLOTINFO.OLOTINLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a LotInfoModel instance.
        /// <para />
        /// Foreign key: LotInKeyId -> LotInfoModel.KeyId (TORDLOTINFO.OLOTINLOTINKEYID -> TLOTINFO.LOTINKEYID)
        /// </summary>
        [ForeignKey(nameof(LotInKeyId))]
        public LotInfoModel LotIn { get; set; }

        /// <summary>
        /// Reference to a OrderLineModel instance.
        /// <para />
        /// Foreign key: OLnKey -> OrderLineModel.KeyId (TORDLOTINFO.OLOTINOLNKEY -> TORDLN.OLNKEY)
        /// </summary>
        [ForeignKey(nameof(OLnKey))]
        public OrderLineModel OLnKeyOrderLine { get; set; }

        /// <summary>
        /// Reference to a OrderModel instance.
        /// <para />
        /// Foreign key: OrdKeyId -> OrderModel.KeyId (TORDLOTINFO.OLOTINORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [ForeignKey(nameof(OrdKeyId))]
        public OrderModel Ord { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TORDERTP table.
    /// </summary>
    [Table("TORDERTP")]
    public class OrderTemplateModel
    {
        /// <summary>
        /// <para>TORDERTP.ORDTPKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("ORDTPKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTP_CREATED</para>
        /// </summary>
        [Column("ORDTP_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTP_CREATEDKEYID</para>
        /// </summary>
        [Column("ORDTP_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTP_MODIFIED</para>
        /// </summary>
        [Column("ORDTP_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTP_MODIFIEDKEYID</para>
        /// </summary>
        [Column("ORDTP_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPNAME</para>
        /// The name of the order template
        /// </summary>
        [Column("ORDTPNAME")]
        [MaxLength(50)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPORGINVOICEDIRECT</para>
        /// NOT USED
        /// </summary>
        [Column("ORDTPORGINVOICEDIRECT")]
        [Required]
        public bool OrgInvoiceDirect { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPORGREFCUSTKEYID</para>
        /// The default originator for the new orders created from the template.
        ///
        /// Replacing OrdTpOrgKeyID + OrdTpOrgType
        /// </summary>
        [Column("ORDTPORGREFCUSTKEYID")]
        public int? OrgRefCustKeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPORGREFFACKEYID</para>
        /// See ORDTPORGREFCUSTKEYID
        /// </summary>
        [Column("ORDTPORGREFFACKEYID")]
        public int? OrgRefFacKeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPORGREFSUPPKEYID</para>
        /// See ORDTPORGREFCUSTKEYID. Not used.
        /// </summary>
        [Column("ORDTPORGREFSUPPKEYID")]
        public int? OrgRefSuppKeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPORGREFTEXT</para>
        /// A default reference text. The field content gets copied to the new order.
        /// </summary>
        [Column("ORDTPORGREFTEXT")]
        [MaxLength(40)]
        public string OrgRefText { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPORGREFTEXT2</para>
        /// A default reference text. The field content gets copied to the new order.
        /// </summary>
        [Column("ORDTPORGREFTEXT2")]
        [MaxLength(40)]
        public string OrgRefText2 { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPORGREMARK</para>
        /// </summary>
        [Column("ORDTPORGREMARK")]
        public string OrgRemark { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPORGSTOKKEYID</para>
        /// </summary>
        [Column("ORDTPORGSTOKKEYID")]
        public int? OrgStokKeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPOTPTKEYID</para>
        /// KeyID of the order template type, see table TORDTPTYPE
        /// </summary>
        [Column("ORDTPOTPTKEYID")]
        public int? OTpTKeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPREFOPTKEYID</para>
        /// If the template belongs to a operation type (record in TOPTYPE) this field is a reference to that record.
        ///
        /// Deprecated. No longer used. Foreign Key removed. The field is kept in the database to facilitate conversion to the new Preference lists.
        /// </summary>
        [Column("ORDTPREFOPTKEYID")]
        public int? RefOpTKeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPREFPROTKEYID</para>
        /// If the template belongs to a procedure type (record in TPROTYPE) this field is a reference to that record.
        ///
        /// Deprecated. No longer used. Foreign Key removed. The field is kept in the database to facilitate conversion to the new Preference lists.
        /// </summary>
        [Column("ORDTPREFPROTKEYID")]
        public int? RefProTKeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPSUPPREFFACKEYID</para>
        /// The default supplier of the new order.
        ///
        /// Replacing OrdTpSuppKeyID + OrdTpSuppType.
        /// </summary>
        [Column("ORDTPSUPPREFFACKEYID")]
        public int? SuppRefFacKeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPSUPPREFSUPPKEYID</para>
        /// See ORDTPSUPPREFFACKEYID
        /// </summary>
        [Column("ORDTPSUPPREFSUPPKEYID")]
        public int? SuppRefSuppKeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPSUPPREFTEXT</para>
        /// A default reference text. The field content gets copied to the new order.
        /// </summary>
        [Column("ORDTPSUPPREFTEXT")]
        [MaxLength(40)]
        public string SuppRefText { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPSUPPREFTEXT2</para>
        /// A default reference text. The field content gets copied to the new order.
        /// </summary>
        [Column("ORDTPSUPPREFTEXT2")]
        [MaxLength(40)]
        public string SuppRefText2 { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPSUPPREMARK</para>
        /// </summary>
        [Column("ORDTPSUPPREMARK")]
        public string SuppRemark { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPSUPPSTOKKEYID</para>
        /// </summary>
        [Column("ORDTPSUPPSTOKKEYID")]
        public int? SuppStokKeyId { get; set; }

        /// <summary>
        /// <para>TORDERTP.ORDTPTEMPLATE</para>
        /// The number/identifier for the order template
        /// </summary>
        [Column("ORDTPTEMPLATE")]
        [Required, MaxLength(20)]
        public string Template { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TORDERTP.ORDTP_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TORDERTP.ORDTP_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: OrgRefCustKeyId -> CustomerModel.KeyId (TORDERTP.ORDTPORGREFCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgRefCustKeyId))]
        public CustomerModel OrgRefCust { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: OrgRefFacKeyId -> FactoryModel.KeyId (TORDERTP.ORDTPORGREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgRefFacKeyId))]
        public FactoryModel OrgRefFac { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: OrgRefSuppKeyId -> SupplierModel.KeyId (TORDERTP.ORDTPORGREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgRefSuppKeyId))]
        public SupplierModel OrgRefSupp { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: OrgStokKeyId -> StocksModel.KeyId (TORDERTP.ORDTPORGSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(OrgStokKeyId))]
        public StocksModel OrgStok { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: SuppRefFacKeyId -> FactoryModel.KeyId (TORDERTP.ORDTPSUPPREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppRefFacKeyId))]
        public FactoryModel SuppRefFac { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: SuppRefSuppKeyId -> SupplierModel.KeyId (TORDERTP.ORDTPSUPPREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppRefSuppKeyId))]
        public SupplierModel SuppRefSupp { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: SuppStokKeyId -> StocksModel.KeyId (TORDERTP.ORDTPSUPPSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppStokKeyId))]
        public StocksModel SuppStok { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TPACKING table.
    /// This table is used to hold packing materials that can be specified on products.
    /// </summary>
    [Table("TPACKING")]
    public class PackingModel
    {
        /// <summary>
        /// <para>TPACKING.PACKKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("PACKKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPACKING.PACK_CREATED</para>
        /// </summary>
        [Column("PACK_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TPACKING.PACK_CREATEDKEYID</para>
        /// </summary>
        [Column("PACK_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TPACKING.PACK_MODIFIED</para>
        /// </summary>
        [Column("PACK_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TPACKING.PACK_MODIFIEDKEYID</para>
        /// </summary>
        [Column("PACK_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKCOLOR</para>
        /// </summary>
        [Column("PACKCOLOR")]
        public short? Color { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKDESCRIPTION</para>
        /// A description if the packing material.
        /// </summary>
        [Column("PACKDESCRIPTION")]
        [MaxLength(100)]
        public string Description { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKFACKEYID</para>
        /// If the packing material is Factory Bound this field holds the primary factory of the packing material. A NULL value indicates that the packing material is not factory bound.
        /// See also the TFACPACK table.
        /// </summary>
        [Column("PACKFACKEYID")]
        public int? FacKeyId { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKFIXEDTIME</para>
        /// The number of minutes subtracted from or added to the SE Time when this packing material is used.
        /// </summary>
        [Column("PACKFIXEDTIME")]
        public int? FixedTime { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKITEMKEYID</para>
        /// The Item the packing material is based on. If NULL then it is not based on any item.
        ///
        /// If set to an item then the price for this item will be added to the price of the products using this packing material.
        /// </summary>
        [Column("PACKITEMKEYID")]
        public int? ItemKeyId { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKPACKING</para>
        /// The number of the packing material.
        /// </summary>
        [Column("PACKPACKING")]
        [Required, MaxLength(12)]
        public string Packing { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKRELATIVETIME</para>
        /// This value is specified in percent (%). The value is used to &quot;alter&quot; the actual time a scope is in the packaging into the time that will be used for calculating the expiry time.
        /// If a scope is in the packaging for 1 hour and the value is set to 110% then 1 hour and 6 minutes will be deducted from the expiry time. If the value is set to 90% then 54 minutes will be deducted from the expiry time.
        /// </summary>
        [Column("PACKRELATIVETIME")]
        public int? RelativeTime { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKSEALCOUNT</para>
        /// Number of sealings for the packing material. Default as defined for factory.
        /// </summary>
        [Column("PACKSEALCOUNT")]
        public int? SealCount { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKSEALPRINT</para>
        /// Printing options defining what to print for each sealing. Default as defined for factory.
        /// </summary>
        [Column("PACKSEALPRINT")]
        [MaxLength(100)]
        public string SealPrint { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKSEPRGKEYID</para>
        /// A reference to a sealer program. If set and the location used for packing has a T-DOC controller pouch-sealer attached then T-DOC will run it on this program to seal the units.
        /// </summary>
        [Column("PACKSEPRGKEYID")]
        public int? SeprgKeyId { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKSHELFLIFE</para>
        /// The sterile shelf-life time (in days) products have when packed in this packing material. A units expire date is calculated as the date of packing plus the number of days specified in this field. A value of 0 indicates that T-DOC should not use expire dates.
        /// </summary>
        [Column("PACKSHELFLIFE")]
        public int? ShelfLife { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKSTATUS</para>
        /// Indicates the status of the packing material. Valid values are:
        ///
        ///   stNormal = 10
        ///   stDead   = 90
        ///
        /// Setting the status of a packing material to stDead effectively prevents products using the packing material from being packed.
        /// </summary>
        [Column("PACKSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKTAGTKEYID</para>
        /// The tag type the packing material is based on.
        /// </summary>
        [Column("PACKTAGTKEYID")]
        public int? TagTKeyId { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKTRACETYPE</para>
        /// Holds the trace type.
        /// TPackingMatTraceType = (pttMaterial,pttSerial);
        ///
        /// If set to pttSerial and Item is set, and the item is single trace by serial, then the (pack)item will be included in TUnitLst.
        /// If set to pttSerial and Item is set, and the item is composite containing items trace by serial, then these (pack)items will be included in TUnitLst.
        ///
        /// TUnitLst and TSeriLst now both have a xxxSerialType field that indicates if the item serial number is from a &#39;normal&#39; item, or from packing material(item)
        /// </summary>
        [Column("PACKTRACETYPE")]
        public int? Tracetype { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKUSEDFOR</para>
        /// Enum: All (0), Endoscopes (1). Default All.
        /// </summary>
        [Column("PACKUSEDFOR")]
        [Required]
        public PackingUsedFor UsedFor { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKVOLUME</para>
        /// The volume the packing material takes up.
        /// </summary>
        [Column("PACKVOLUME")]
        public int? Volume { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKWEIGHT</para>
        /// The weight of the packing material.
        /// Sum(NonDisposable, Disposable)
        /// </summary>
        [Column("PACKWEIGHT")]
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public int? Weight { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKWEIGHTDISPOSABLE</para>
        /// Depends on PackWeightMode:
        ///
        /// Mode = Sum:
        /// Sum of disposable single items
        /// Mode = Fixed:
        /// Entered weight
        /// </summary>
        [Column("PACKWEIGHTDISPOSABLE")]
        public int? WeightDisposable { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKWEIGHTMODE</para>
        /// Can be &quot;Sum&quot; or &quot;Fixed&quot;
        ///
        /// &quot;Sum&quot;: Weight is taken from Item values. Can only be set if the packing material is based on an item.
        /// &quot;Fixed&quot;: Weight is entered directly
        /// </summary>
        [Column("PACKWEIGHTMODE")]
        public int? WeightMode { get; set; }

        /// <summary>
        /// <para>TPACKING.PACKWEIGHTNONDISPOSABLE</para>
        /// Depends on PackWeightMode:
        ///
        /// Mode = Sum:
        /// Sum of non-disposable single items
        /// Mode = Fixed:
        /// Entered weight
        /// </summary>
        [Column("PACKWEIGHTNONDISPOSABLE")]
        public int? WeightNonDisposable { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TPACKING.PACK_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TPACKING.PACKFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: ItemKeyId -> ItemModel.KeyId (TPACKING.PACKITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(ItemKeyId))]
        public ItemModel Item { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TPACKING.PACK_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a TagTypeModel instance.
        /// <para />
        /// Foreign key: TagTKeyId -> TagTypeModel.KeyId (TPACKING.PACKTAGTKEYID -> TTAGTYPE.TAGTKEYID)
        /// </summary>
        [ForeignKey(nameof(TagTKeyId))]
        public TagTypeModel TagT { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of ExtDocRefLinkModel instances.
        /// <para />
        /// Foreign key: ExtDocRefLinkModel.PackKeyId -> KeyId (TEXTDOCREFLINK.EDRLPACKKEYID -> TPACKING.PACKKEYID)
        /// </summary>
        [InverseProperty("Pack")]
        public List<ExtDocRefLinkModel> PackExtDocRefLinkList { get; set; }

        /// <summary>
        /// Reference to a collection of ProductModel instances.
        /// <para />
        /// Foreign key: ProductModel.PackKeyId -> KeyId (TPRODUCT.PRODPACKKEYID -> TPACKING.PACKKEYID)
        /// </summary>
        [InverseProperty("Pack")]
        public List<ProductModel> PackProductList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TPATIENT table.
    /// This table holds patient information used by the operation module.
    /// </summary>
    [Table("TPATIENT")]
    public class PatientModel
    {
        /// <summary>
        /// <para>TPATIENT.PATKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("PATKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPATIENT.PAT_CREATED</para>
        /// </summary>
        [Column("PAT_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TPATIENT.PAT_CREATEDKEYID</para>
        /// </summary>
        [Column("PAT_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TPATIENT.PAT_MODIFIED</para>
        /// </summary>
        [Column("PAT_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TPATIENT.PAT_MODIFIEDKEYID</para>
        /// </summary>
        [Column("PAT_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATBARCODE</para>
        /// External barcode for the patient.
        /// </summary>
        [Column("PATBARCODE")]
        [MaxLength(150)]
        public string BarCode { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATBIRTHDAY</para>
        /// Birthday of the patient.
        /// </summary>
        [Column("PATBIRTHDAY", TypeName = "datetime")]
        public DateTime? Birthday { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATCODE1</para>
        /// Field for an extra local patient identifier.
        /// </summary>
        [Column("PATCODE1")]
        [MaxLength(40)]
        public string Code1 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATCODE2</para>
        /// Field for an extra local patient identifier.
        /// </summary>
        [Column("PATCODE2")]
        [MaxLength(40)]
        public string Code2 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATCODE3</para>
        /// Field for an extra local patient identifier.
        /// </summary>
        [Column("PATCODE3")]
        [MaxLength(40)]
        public string Code3 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATID</para>
        /// The ID of the patient.
        /// </summary>
        [Column("PATID")]
        [Required, MaxLength(20)]
        public string Id { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATNAME</para>
        /// The name of the patient.
        /// </summary>
        [Column("PATNAME")]
        [MaxLength(150)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATSEX</para>
        /// The gender of the patient.
        ///
        ///   TSexType = (None,Male,Female)
        ///
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None   = 0
        ///   Male   = 1
        ///   Female = 2
        ///   Other  = 3
        /// ********************************************************************************
        /// </summary>
        [Column("PATSEX")]
        public SexType? Sex { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATSTATUS</para>
        /// Current status of the patient. Valid values are:
        ///
        ///   stNormal = 10
        ///   stDead   = 90
        /// </summary>
        [Column("PATSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF01</para>
        /// </summary>
        [Column("PATUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF02</para>
        /// </summary>
        [Column("PATUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF03</para>
        /// </summary>
        [Column("PATUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF04</para>
        /// </summary>
        [Column("PATUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF05</para>
        /// </summary>
        [Column("PATUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF06</para>
        /// </summary>
        [Column("PATUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF07</para>
        /// </summary>
        [Column("PATUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF08</para>
        /// </summary>
        [Column("PATUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF09</para>
        /// </summary>
        [Column("PATUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF10</para>
        /// </summary>
        [Column("PATUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF11</para>
        /// </summary>
        [Column("PATUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF12</para>
        /// </summary>
        [Column("PATUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF13</para>
        /// </summary>
        [Column("PATUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF14</para>
        /// </summary>
        [Column("PATUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF15</para>
        /// </summary>
        [Column("PATUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF16</para>
        /// </summary>
        [Column("PATUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF17</para>
        /// </summary>
        [Column("PATUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF18</para>
        /// </summary>
        [Column("PATUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF19</para>
        /// </summary>
        [Column("PATUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATUF20</para>
        /// </summary>
        [Column("PATUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        /// <summary>
        /// <para>TPATIENT.PATWEIGHT</para>
        /// The weight of the patient.
        ///
        /// The value is specified in grams. So if the weight of the patient is 70KG (kilograms) the value must be 70000.
        /// </summary>
        [Column("PATWEIGHT")]
        public int? Weight { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TPATIENT.PAT_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TPATIENT.PAT_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of OperationDataModel instances.
        /// <para />
        /// Foreign key: OperationDataModel.PatKeyId -> KeyId (TOPDATA.OPDPATKEYID -> TPATIENT.PATKEYID)
        /// </summary>
        [InverseProperty("Pat")]
        public List<OperationDataModel> PatOperationDataList { get; set; }

        /// <summary>
        /// Reference to a collection of PatientConsModel instances.
        /// <para />
        /// Foreign key: PatientConsModel.PatKeyId -> KeyId (TPATCONS.PATCOPATKEYID -> TPATIENT.PATKEYID)
        /// </summary>
        [InverseProperty("Pat")]
        public List<PatientConsModel> PatPatientConsList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TPATCONS table.
    /// This table holds the Operation/Patient Consumption. ie. all things that have been specifically registered to the operation/patient.
    /// </summary>
    [Table("TPATCONS")]
    public class PatientConsModel
    {
        /// <summary>
        /// <para>TPATCONS.PATCOAUTOINC</para>
        /// A record ID. The field is automatically filled with a unique value by the SQL server.
        /// </summary>
        [Column("PATCOAUTOINC")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Required]
        public int AutoInc { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOENDTIME</para>
        /// If the field has a value it is because the PatCoRefKeyID is a item that has it&#39;s ItGrpPricingType set to charge usage of the item by time (ie. mobile equipment)
        /// </summary>
        [Column("PATCOENDTIME", TypeName = "datetime")]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOENDUSERKEYID</para>
        /// </summary>
        [Column("PATCOENDUSERKEYID")]
        public int? EndUserKeyId { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOLOCAKEYID</para>
        /// A reference to the location where the registration was made.
        /// </summary>
        [Column("PATCOLOCAKEYID")]
        public int? LocaKeyId { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOLOTINFO</para>
        /// This field holds external lot number information about items used for the operation/patient. The field can only be used if PATCOREFITEMKEYID is set.
        ///
        /// Currently the field can only be filled when importing data via the OR Registration import job.
        /// </summary>
        [Column("PATCOLOTINFO")]
        [MaxLength(40)]
        public string LotInfo { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOOLNLINE</para>
        /// Indicates line no in order. Can be null in case item/unit is not order based.
        /// </summary>
        [Column("PATCOOLNLINE")]
        public int? OLnLine { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOOPDKEYID</para>
        /// Links to the operation where the entity was used. This field is always filled.
        /// </summary>
        [Column("PATCOOPDKEYID")]
        public int? OpDKeyId { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOORDKEYID</para>
        /// Link to the order. Can be null in case item/unit is not order based.
        /// </summary>
        [Column("PATCOORDKEYID")]
        public int? OrdKeyId { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOPATKEYID</para>
        /// The link to the TPatient. This field is only filled if the patient is known.
        /// </summary>
        [Column("PATCOPATKEYID")]
        public int? PatKeyId { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOREFCOUNT</para>
        /// The number of items registered for the operation/patient. The value will always be 1 if PATCOREFUNITUNIT or PATCOREFSERIKEYID is set.
        /// </summary>
        [Column("PATCOREFCOUNT")]
        public int? RefCount { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOREFITEMKEYID</para>
        /// If set the registration is for a Single Item.
        /// </summary>
        [Column("PATCOREFITEMKEYID")]
        public int? RefItemKeyId { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOREFSERIKEYID</para>
        /// If set the registration is for a Single Item serial number.
        /// </summary>
        [Column("PATCOREFSERIKEYID")]
        public int? RefSeriKeyId { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOREFUNITUNIT</para>
        /// If set the registration is for a unit.
        /// </summary>
        [Column("PATCOREFUNITUNIT")]
        public int? RefUnitUnit { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOSTARTTIME</para>
        /// The time the record was inserted.
        /// </summary>
        [Column("PATCOSTARTTIME", TypeName = "datetime")]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// <para>TPATCONS.PATCOSTARTUSERKEYID</para>
        /// The user that performed the registration.
        /// </summary>
        [Column("PATCOSTARTUSERKEYID")]
        public int? StartUserKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: EndUserKeyId -> UserModel.KeyId (TPATCONS.PATCOENDUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(EndUserKeyId))]
        public UserModel EndUser { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TPATCONS.PATCOLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a OperationDataModel instance.
        /// <para />
        /// Foreign key: OpDKeyId -> OperationDataModel.KeyId (TPATCONS.PATCOOPDKEYID -> TOPDATA.OPDKEYID)
        /// </summary>
        [ForeignKey(nameof(OpDKeyId))]
        public OperationDataModel OpD { get; set; }

        /// <summary>
        /// Reference to a OrderModel instance.
        /// <para />
        /// Foreign key: OrdKeyId -> OrderModel.KeyId (TPATCONS.PATCOORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [ForeignKey(nameof(OrdKeyId))]
        public OrderModel Ord { get; set; }

        /// <summary>
        /// Reference to a PatientModel instance.
        /// <para />
        /// Foreign key: PatKeyId -> PatientModel.KeyId (TPATCONS.PATCOPATKEYID -> TPATIENT.PATKEYID)
        /// </summary>
        [ForeignKey(nameof(PatKeyId))]
        public PatientModel Pat { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: RefItemKeyId -> ItemModel.KeyId (TPATCONS.PATCOREFITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(RefItemKeyId))]
        public ItemModel RefItem { get; set; }

        /// <summary>
        /// Reference to a SerialModel instance.
        /// <para />
        /// Foreign key: RefSeriKeyId -> SerialModel.KeyId (TPATCONS.PATCOREFSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [ForeignKey(nameof(RefSeriKeyId))]
        public SerialModel RefSeri { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: RefUnitUnit -> UnitModel.KeyId (TPATCONS.PATCOREFUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(RefUnitUnit))]
        public UnitModel RefUnitUnitUnit { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: StartUserKeyId -> UserModel.KeyId (TPATCONS.PATCOSTARTUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(StartUserKeyId))]
        public UserModel StartUser { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TPATCONSLOTINFO table.
    /// Links patient comsumptions (items) to LOT numbers.
    /// </summary>
    [Table("TPATCONSLOTINFO")]
    public class PatientLotInfoModel
    {
        /// <summary>
        /// <para>TPATCONSLOTINFO.PLOTIN_CREATED</para>
        /// Time the link was created.
        /// </summary>
        [Column("PLOTIN_CREATED", TypeName = "datetime")]
        [Required]
        public DateTime Created { get; set; }

        /// <summary>
        /// <para>TPATCONSLOTINFO.PLOTIN_CREATEDKEYID</para>
        /// KeyID of the user that created the link.
        /// </summary>
        [Column("PLOTIN_CREATEDKEYID")]
        [Required]
        public int CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TPATCONSLOTINFO.PLOTINBOUNDARTICLENOTE</para>
        /// Free text field for enetring bound article note.
        /// Applicable for single items and units and available in Operation area of the Scanner client.
        /// </summary>
        [Column("PLOTINBOUNDARTICLENOTE")]
        public string BoundArticleNote { get; set; }

        /// <summary>
        /// <para>TPATCONSLOTINFO.PLOTINLOCAKEYID</para>
        /// KeyID of the location where the link was created.
        /// </summary>
        [Column("PLOTINLOCAKEYID")]
        [Required]
        public int LocaKeyId { get; set; }

        /// <summary>
        /// <para>TPATCONSLOTINFO.PLOTINLOTINKEYID</para>
        /// KeyID of the LOT number that the patient consumption links to.
        /// </summary>
        [Column("PLOTINLOTINKEYID")]
        [Required]
        public int LotInKeyId { get; set; }

        /// <summary>
        /// <para>TPATCONSLOTINFO.PLOTINPATCOAUTOINC</para>
        /// The identifier of the patient consumption.
        /// </summary>
        [Column("PLOTINPATCOAUTOINC")]
        [Required]
        public int PatCoAutoInc { get; set; }

        /// <summary>
        /// <para>TPATCONSLOTINFO.PLOTINPOSITION</para>
        /// Optional.
        /// If set, specifies the position (from TComp table) of the item that the LOT number applies to.
        /// If not set, the linked LOT number just applies to &#39;any item&#39; in the unit or single item.
        /// </summary>
        [Column("PLOTINPOSITION")]
        public int? Position { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TPATCONSLOTINFO.PLOTIN_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TPATCONSLOTINFO.PLOTINLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a LotInfoModel instance.
        /// <para />
        /// Foreign key: LotInKeyId -> LotInfoModel.KeyId (TPATCONSLOTINFO.PLOTINLOTINKEYID -> TLOTINFO.LOTINKEYID)
        /// </summary>
        [ForeignKey(nameof(LotInKeyId))]
        public LotInfoModel LotIn { get; set; }

        /// <summary>
        /// Reference to a PatientConsModel instance.
        /// <para />
        /// Foreign key: PatCoAutoInc -> PatientConsModel.AutoInc (TPATCONSLOTINFO.PLOTINPATCOAUTOINC -> TPATCONS.PATCOAUTOINC)
        /// </summary>
        [ForeignKey(nameof(PatCoAutoInc))]
        public PatientConsModel PatCoAutoIncPatientCons { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TPICS table.
    /// This tables holds all pictures used in TDOC.
    /// For each record there is both a full size picture, a thumbnail representation, a text comment and a voice comment.
    ///
    /// Furthermore a hotspot field will be used in the future for hotspot links to other pictures, records etc. The hotspots will be stored as a binary record.
    ///
    /// If the customer has not purchased the picture module only the PicsText field will be available.
    /// </summary>
    [Table("TPICS")]
    public class PictureModel
    {
        /// <summary>
        /// <para>TPICS.PICSKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("PICSKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPICS.PICSHOTSPOTS</para>
        /// Holds hotspots for the picture. Stored in a binary record with format
        ///
        /// THotSpot = record
        ///   Points array of TPoint
        ///   JumpType
        ///   JumpKeyID
        /// end;
        ///
        /// NOT IMPLEMENTED. Low priority
        /// </summary>
        [Column("PICSHOTSPOTS")]
        public byte[] HotSpots { get; set; }

        /// <summary>
        /// <para>TPICS.PICSLASTCHANGE</para>
        /// The date and time of the last change that was made to the record. This is used by clients that cache pictures to determine if their data needs updating.
        /// </summary>
        [Column("PICSLASTCHANGE", TypeName = "datetime")]
        public DateTime? Lastchange { get; set; }

        /// <summary>
        /// <para>TPICS.PICSMEDIATYPE</para>
        /// </summary>
        [Column("PICSMEDIATYPE")]
        public int? Mediatype { get; set; }

        /// <summary>
        /// <para>TPICS.PICSORGFILENAME</para>
        /// This is the original file name of the video clip placed in PICSVIDEO. The extension is used to determine how it should be played.
        /// </summary>
        [Column("PICSORGFILENAME")]
        [MaxLength(255)]
        public string OrgFilename { get; set; }

        /// <summary>
        /// <para>TPICS.PICSPICTURE</para>
        /// Holds the full size picture in JPEG or GIF format.
        ///
        /// The picture is preceded by a graphics header as defined in LDB.pas
        /// </summary>
        [Column("PICSPICTURE")]
        public byte[] Picture { get; set; }

        /// <summary>
        /// <para>TPICS.PICSREFCOUNT</para>
        /// The number of current references to this record/picture.
        ///
        /// NOT IMPLEMENTED. Should actually be removed as implementation will carry more weight than just counting it when needed.
        /// </summary>
        [Column("PICSREFCOUNT")]
        public int? Refcount { get; set; }

        /// <summary>
        /// <para>TPICS.PICSSOUND</para>
        /// Holds a  multimedia blob.
        ///
        /// The contents is preceded by a multimedia header as defined in TDSound.pas
        ///
        /// Currently only WAV-file format sound is supported.
        /// </summary>
        [Column("PICSSOUND")]
        public byte[] Sound { get; set; }

        /// <summary>
        /// <para>TPICS.PICSTEXT</para>
        /// Holds a text comment for the picture
        /// </summary>
        [Column("PICSTEXT")]
        public string Text { get; set; }

        /// <summary>
        /// <para>TPICS.PICSTHUMBNAIL</para>
        /// A thumbnail representation of the picture.
        ///
        /// Currently a 70x50 pixels representation.
        ///
        /// The picture is preceded by a graphics header as defined in LDB.pas
        /// </summary>
        [Column("PICSTHUMBNAIL")]
        public byte[] Thumbnail { get; set; }

        /// <summary>
        /// <para>TPICS.PICSVIDEO</para>
        /// </summary>
        [Column("PICSVIDEO")]
        public byte[] Video { get; set; }

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of PictureRefModel instances.
        /// <para />
        /// Foreign key: PictureRefModel.PicsKeyId -> KeyId (TPICTREF.PICTPICSKEYID -> TPICS.PICSKEYID)
        /// </summary>
        [InverseProperty("Pics")]
        public List<PictureRefModel> PicsPictureRefList { get; set; }

        /// <summary>
        /// Reference to a collection of PictureRefModel instances.
        /// <para />
        /// Foreign key: PictureRefModel.TipPicsKeyId -> KeyId (TPICTREF.PICTTIPPICSKEYID -> TPICS.PICSKEYID)
        /// </summary>
        [InverseProperty("TipPics")]
        public List<PictureRefModel> TipPicsPictureRefList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TPICTREF table.
    /// This table is the link between the items, products etc. that have pictures attached and the pictures themselves.
    ///
    /// The &quot;extra&quot; link is justified in that it saves space because many pictures will be part of several series or used for more than one &quot;father&quot;.
    /// </summary>
    [Table("TPICTREF")]
    public class PictureRefModel
    {
        /// <summary>
        /// <para>TPICTREF.PICTNO</para>
        /// The sequence number of the picture within it&#39;s series.
        ///
        /// The number is unique within the series.
        ///
        /// The first sequence number in a series for a given Item/Product/Trigger (reference) must be 0 (zero).
        /// Otherwise picture hints will not show in search windows.
        /// </summary>
        [Column("PICTNO")]
        [Required]
        public int No { get; set; }

        /// <summary>
        /// <para>TPICTREF.PICTPICSKEYID</para>
        /// The reference to the actual picture in TPICS.
        /// </summary>
        [Column("PICTPICSKEYID")]
        public int? PicsKeyId { get; set; }

        /// <summary>
        /// <para>TPICTREF.PICTREFCATKEYID</para>
        /// Ref. to linked catalog item.
        ///
        /// Replacing PictRefKeyID + PictRefType
        /// </summary>
        [Column("PICTREFCATKEYID")]
        public int? RefCatKeyId { get; set; }

        /// <summary>
        /// <para>TPICTREF.PICTREFITEMKEYID</para>
        /// Ref. to linked item.
        ///
        /// Replacing PictRefKeyID + PictRefType
        /// </summary>
        [Column("PICTREFITEMKEYID")]
        public int? RefItemKeyId { get; set; }

        /// <summary>
        /// <para>TPICTREF.PICTREFMACHKEYID</para>
        /// </summary>
        [Column("PICTREFMACHKEYID")]
        public int? RefMachKeyId { get; set; }

        /// <summary>
        /// <para>TPICTREF.PICTREFPRODKEYID</para>
        /// Ref. to linked product.
        ///
        /// Replacing PictRefKeyID + PictRefType
        /// </summary>
        [Column("PICTREFPRODKEYID")]
        public int? RefProdKeyId { get; set; }

        /// <summary>
        /// <para>TPICTREF.PICTREFSERIKEYID</para>
        /// Ref to linked Serial number.
        /// Pictures can only be linked to Product Serial numbers for Loaner Trays.
        /// When a Loaner Tray is checked in by an external loaner system any pictures received from the external system are first linked to the serial number representing the tray.
        /// Once the loaner tray is checked in via the T-DOC Loaner Check In dialog then the pictures are &quot;moved&quot; to the resulting Unit.
        /// So linking the pictures to the Product Serial Number is a &quot;temporary&quot; link while the T-DOC check-in is awaited.
        /// </summary>
        [Column("PICTREFSERIKEYID")]
        public int? RefseriKeyId { get; set; }

        /// <summary>
        /// <para>TPICTREF.PICTREFTRIGKEYID</para>
        /// Ref. to linked trigger.
        /// </summary>
        [Column("PICTREFTRIGKEYID")]
        public int? ReftrigKeyId { get; set; }

        /// <summary>
        /// <para>TPICTREF.PICTREFUNITUNIT</para>
        /// Ref. to linked unit.
        ///
        /// Replacing PictRefKeyID + PictRefType
        /// </summary>
        [Column("PICTREFUNITUNIT")]
        public int? RefUnitUnit { get; set; }

        /// <summary>
        /// <para>TPICTREF.PICTREFUSERKEYID</para>
        /// Ref. to linked user.
        ///
        /// Replacing PictRefKeyID + PictRefType
        /// </summary>
        [Column("PICTREFUSERKEYID")]
        public int? RefUserKeyId { get; set; }

        /// <summary>
        /// <para>TPICTREF.PICTSERIES</para>
        /// The picture series the record is part of. These series can be user defined but a number of system series always exist. The number of these system series are defined in TDConst and currently the following exist:
        ///
        ///   pseNormal   = 1;
        ///   psePrinting = 2;
        ///   pseService  = 3;
        ///
        /// The range 0-100 is reserved for system series.
        /// </summary>
        [Column("PICTSERIES")]
        [Required]
        public int Series { get; set; }

        /// <summary>
        /// <para>TPICTREF.PICTTIPPICSKEYID</para>
        /// The number of an optional picture in TPICS showing a particular detail in greater resolution (typically the tip of an instrument).
        ///
        /// Not implemented.
        /// </summary>
        [Column("PICTTIPPICSKEYID")]
        public int? TipPicsKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a PictureModel instance.
        /// <para />
        /// Foreign key: PicsKeyId -> PictureModel.KeyId (TPICTREF.PICTPICSKEYID -> TPICS.PICSKEYID)
        /// </summary>
        [ForeignKey(nameof(PicsKeyId))]
        public PictureModel Pics { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: RefItemKeyId -> ItemModel.KeyId (TPICTREF.PICTREFITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(RefItemKeyId))]
        public ItemModel RefItem { get; set; }

        /// <summary>
        /// Reference to a MachineModel instance.
        /// <para />
        /// Foreign key: RefMachKeyId -> MachineModel.KeyId (TPICTREF.PICTREFMACHKEYID -> TMACHINE.MACHKEYID)
        /// </summary>
        [ForeignKey(nameof(RefMachKeyId))]
        public MachineModel RefMach { get; set; }

        /// <summary>
        /// Reference to a ProductModel instance.
        /// <para />
        /// Foreign key: RefProdKeyId -> ProductModel.KeyId (TPICTREF.PICTREFPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [ForeignKey(nameof(RefProdKeyId))]
        public ProductModel RefProd { get; set; }

        /// <summary>
        /// Reference to a SerialModel instance.
        /// <para />
        /// Foreign key: RefseriKeyId -> SerialModel.KeyId (TPICTREF.PICTREFSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [ForeignKey(nameof(RefseriKeyId))]
        public SerialModel Refseri { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: RefUnitUnit -> UnitModel.KeyId (TPICTREF.PICTREFUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(RefUnitUnit))]
        public UnitModel RefUnitUnitUnit { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: RefUserKeyId -> UserModel.KeyId (TPICTREF.PICTREFUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(RefUserKeyId))]
        public UserModel RefUser { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: Series -> TextModel.Number (TPICTREF.PICTSERIES -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(Series))]
        public TextModel SeriesText { get; set; }

        /// <summary>
        /// Reference to a PictureModel instance.
        /// <para />
        /// Foreign key: TipPicsKeyId -> PictureModel.KeyId (TPICTREF.PICTTIPPICSKEYID -> TPICS.PICSKEYID)
        /// </summary>
        [ForeignKey(nameof(TipPicsKeyId))]
        public PictureModel TipPics { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TPIPAUDITLOG table.
    /// </summary>
    [Table("TPIPAUDITLOG")]
    public class PipAuditLogModel
    {
        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGAUTOINC</para>
        /// </summary>
        [Column("PIPLOGAUTOINC")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGAPPTYPE</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Unknown                = 0
        ///   AppServer              = 1
        ///   ScannerServer          = 2
        ///   ConnectServer          = 3
        ///   TDOCCtrl               = 4
        ///   Admin                  = 5
        ///   Scanner                = 6
        ///   Connect                = 7
        ///   Spool_Obsolete         = 8
        ///   Launcher               = 9
        ///   Exchange               = 10
        ///   MacView                = 11
        ///   Service                = 12
        ///   PrintServer            = 13
        ///   RemoteControl_Obsolete = 14
        ///   JobServer_Obsolete     = 15
        ///   ProfEdit               = 16
        ///   DeviceTest             = 17
        ///   MacSimu                = 18
        ///   IniEdit                = 19
        ///   NetTest                = 20
        ///   UtilityServer          = 21
        ///   SpoolServer            = 22
        ///   SpoolCtrl              = 23
        ///   NetCOMCfg              = 24
        ///   JobCfg                 = 25
        ///   Panel                  = 26
        ///   JobServer              = 27
        ///   WebServer              = 28
        ///   Engine                 = 29
        ///   Upgrade                = 30
        ///   UnknownL               = 31
        /// ********************************************************************************
        /// </summary>
        [Column("PIPLOGAPPTYPE")]
        [Required]
        public TDOCAppType AppType { get; set; }

        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGENTRYTYP</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   PIPSettings     = 0
        ///   DirectLookup    = 1
        ///   SuccSearch      = 2
        ///   UnSuccSearch    = 3
        ///   PIPLogOpened    = 4
        ///   PIPLogSearching = 5
        ///   SchedOperations = 6
        /// ********************************************************************************
        /// </summary>
        [Column("PIPLOGENTRYTYP")]
        [Required]
        public PIPLogEntryType EntryTyp { get; set; }

        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGINFO</para>
        /// </summary>
        [Column("PIPLOGINFO")]
        public string Info { get; set; }

        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGLOCAKEYID</para>
        /// </summary>
        [Column("PIPLOGLOCAKEYID")]
        public int? LocaKeyId { get; set; }

        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGOPDKEYID</para>
        /// </summary>
        [Column("PIPLOGOPDKEYID")]
        public int? OpdKeyId { get; set; }

        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGPATKEYID</para>
        /// </summary>
        [Column("PIPLOGPATKEYID")]
        public int? PatKeyId { get; set; }

        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGPROFKEYID</para>
        /// </summary>
        [Column("PIPLOGPROFKEYID")]
        public int? ProfKeyId { get; set; }

        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGREFUSERKEYID</para>
        /// </summary>
        [Column("PIPLOGREFUSERKEYID")]
        public int? RefUserKeyId { get; set; }

        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGSUBTYP</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None            = 0
        ///   SystemData      = 1
        ///   User            = 2
        ///   UserProfile     = 3
        ///   PatientLookup   = 4
        ///   OperationLookup = 5
        ///   Patients        = 6
        ///   Operations      = 7
        /// ********************************************************************************
        /// </summary>
        [Column("PIPLOGSUBTYP")]
        [Required]
        public PIPLogEntrySubType SubTyp { get; set; }

        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGTIME</para>
        /// </summary>
        [Column("PIPLOGTIME", TypeName = "datetime")]
        [Required]
        public DateTime Time { get; set; }

        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGUSERKEYID</para>
        /// </summary>
        [Column("PIPLOGUSERKEYID")]
        [Required]
        public int UserKeyId { get; set; }

        /// <summary>
        /// <para>TPIPAUDITLOG.PIPLOGUSRALLOWSENSI</para>
        /// </summary>
        [Column("PIPLOGUSRALLOWSENSI")]
        [Required]
        public bool UsrAllowSensi { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TPIPAUDITLOG.PIPLOGLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a OperationDataModel instance.
        /// <para />
        /// Foreign key: OpdKeyId -> OperationDataModel.KeyId (TPIPAUDITLOG.PIPLOGOPDKEYID -> TOPDATA.OPDKEYID)
        /// </summary>
        [ForeignKey(nameof(OpdKeyId))]
        public OperationDataModel Opd { get; set; }

        /// <summary>
        /// Reference to a PatientModel instance.
        /// <para />
        /// Foreign key: PatKeyId -> PatientModel.KeyId (TPIPAUDITLOG.PIPLOGPATKEYID -> TPATIENT.PATKEYID)
        /// </summary>
        [ForeignKey(nameof(PatKeyId))]
        public PatientModel Pat { get; set; }

        /// <summary>
        /// Reference to a ProfileModel instance.
        /// <para />
        /// Foreign key: ProfKeyId -> ProfileModel.KeyId (TPIPAUDITLOG.PIPLOGPROFKEYID -> TPROFILE.PROFKEYID)
        /// </summary>
        [ForeignKey(nameof(ProfKeyId))]
        public ProfileModel Prof { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: RefUserKeyId -> UserModel.KeyId (TPIPAUDITLOG.PIPLOGREFUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(RefUserKeyId))]
        public UserModel RefUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: UserKeyId -> UserModel.KeyId (TPIPAUDITLOG.PIPLOGUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(UserKeyId))]
        public UserModel User { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TPOSIT table.
    /// *****************************************************************************
    /// WHEN CHANGING FIELDS REMEMBER TO UPDATE uInitTDOCDB.pas CheckDefaultLocations!
    /// *****************************************************************************
    /// Used to hold all positions in the system. Every scanner, machine, application or whatever that needs to interface with the system through a location needs a position, and ONE only.
    ///
    /// Link to TDOC.INI is PosLinkStaID+PosThing+PosName
    ///
    /// APPLICATIONS (PosThing is given implicitly by PosName):
    ///   For now there only has to be a record for each PC running Admin.
    ///   [COMPUTERS]
    ///   PosLinkStatID=ComputerName;TDAdmin
    ///
    ///   for example with this line in the ini-file:
    ///   A=MyPC;TDAdmin,Scanner
    ///   there must be a record:
    ///   POSNAME=&#39;Admin&#39; POSLINKSTATID=A POSTHING=0
    ///
    /// BARCODE SCANNERS (PosThing is given implicitly):
    ///   There must be a record for every phycical scanner in the whole system.
    ///   [Work&lt;PosLinkStatID&gt;Scanners]
    ///   1=PosName,COM1:Formula734
    ///
    ///   for example with these lines in the ini-file:
    ///   [WorkAScanners]
    ///   1=Order,COM1:Formula734
    ///   there must be a record:
    ///   POSNAME=&#39;Order&#39; POSLINKSTATID=A POSTHING=1
    ///
    /// MACHINES (PosThing is given implicitly):
    ///   There must be a record for every phycical machine in the whole system.
    ///
    ///   for example with these lines in the ini-file:
    ///   [Machines]
    ///   1=S,PACS2000,1,A1
    ///   [WorkAMachines]
    ///   Port1=COM2:
    ///   Scan1=1
    ///   there must be a record:
    ///   POSNAME=&#39;A1&#39; POSLINKSTATID=A POSTHING=2
    /// </summary>
    [Table("TPOSIT")]
    public class PositionModel
    {
        /// <summary>
        /// <para>TPOSIT.POSKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("POSKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPOSIT.POSDISABLED</para>
        /// If true the position is disabled and can not be used for production. Disabled positions are excluded from the license count.
        /// </summary>
        [Column("POSDISABLED")]
        [Required]
        public bool Disabled { get; set; }

        /// <summary>
        /// <para>TPOSIT.POSINFO</para>
        /// A description of the position.
        /// </summary>
        [Column("POSINFO")]
        [MaxLength(60)]
        public string Info { get; set; }

        /// <summary>
        /// <para>TPOSIT.POSLSKEYID</para>
        /// Reference to TLINKSTAT table. Replacing field POSLINKSTATID.
        /// </summary>
        [Column("POSLSKEYID")]
        [Required]
        public int LSKeyId { get; set; }

        /// <summary>
        /// <para>TPOSIT.POSNAME</para>
        /// The name of the position.
        ///
        /// Closely related to the T-DOC ini-file. For applications the name is fixed and for scanners and machines it must match a name in the ini-file.
        /// </summary>
        [Column("POSNAME")]
        [Required, MaxLength(20)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TPOSIT.POSOPTION</para>
        /// Bit field containing various options for the position.
        ///
        /// Currently only option is:
        ///   bit 0: Picture client (Scanner only)
        /// </summary>
        [Column("POSOPTION")]
        public int? Option { get; set; }

        /// <summary>
        /// <para>TPOSIT.POSTAG</para>
        /// Not implemented.
        /// </summary>
        [Column("POSTAG")]
        public int? Tag { get; set; }

        /// <summary>
        /// <para>TPOSIT.POSTHING</para>
        /// A TThingType value from TDConst
        ///
        /// TThingType = (Admin, Scanner, Machine);
        /// </summary>
        [Column("POSTHING")]
        [Required]
        public ThingType Thing { get; set; }

        /// <summary>
        /// <para>TPOSIT.POSUISHOWLOCATIONS</para>
        /// Determines what locations the user can select between in the Scanner UI. I.e. what locations to list in the &quot;Select location&quot; frame.
        ///
        /// Possible values:
        /// - 0=Only visible locations bound to the position are shown
        /// - 1=All visible locations are shown
        ///
        /// NOTE: Currently not implemented.
        /// </summary>
        [Column("POSUISHOWLOCATIONS")]
        public int? UIShowLocations { get; set; }

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of PosLocationModel instances.
        /// <para />
        /// Foreign key: PosLocationModel.PosKeyId -> KeyId (TPOSLOCA.PLOPOSKEYID -> TPOSIT.POSKEYID)
        /// </summary>
        [InverseProperty("Pos")]
        public List<PosLocationModel> PosPosLocationList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TPOSLOCA table.
    /// *****************************************************************************
    /// WHEN CHANGING FIELDS REMEMBER TO UPDATE uInitTDOCDB.pas CheckDefaultLocations!
    /// *****************************************************************************
    /// This table determines what locations a position can attach to and which one is the default. Futhermore it determines what printers the position should use as default at each location.
    ///
    /// Only Scanners can have more than the default location for each position.
    /// </summary>
    [Table("TPOSLOCA")]
    public class PosLocationModel
    {
        /// <summary>
        /// <para>TPOSLOCA.PLOKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("PLOKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPOSLOCA.PLODEFAULT</para>
        /// If true this is the default location for the position.
        ///
        /// NOTE: There can only be ONE default location for each position.
        /// </summary>
        [Column("PLODEFAULT")]
        [Required]
        public bool Default { get; set; }

        /// <summary>
        /// <para>TPOSLOCA.PLOLABELRPL</para>
        /// The RPL number of the default label printer for this position. Can be overriden for individual locations by entering a record in TLOCAPRN.
        /// </summary>
        [Column("PLOLABELRPL")]
        public int? LabelRPL { get; set; }

        /// <summary>
        /// <para>TPOSLOCA.PLOLISTRPL</para>
        /// The RPL number of the default list printer for this position. Can be overriden for individual locations by entering a record in TLOCAPRN.
        /// </summary>
        [Column("PLOLISTRPL")]
        public int? ListRPL { get; set; }

        /// <summary>
        /// <para>TPOSLOCA.PLOLOCAKEYID</para>
        /// The location
        /// </summary>
        [Column("PLOLOCAKEYID")]
        [Required]
        public int LocaKeyId { get; set; }

        /// <summary>
        /// <para>TPOSLOCA.PLOPOSKEYID</para>
        /// The position
        /// </summary>
        [Column("PLOPOSKEYID")]
        [Required]
        public int PosKeyId { get; set; }

        /// <summary>
        /// <para>TPOSLOCA.PLOSCALENO</para>
        /// The number of the weight scale attached to this position
        /// </summary>
        [Column("PLOSCALENO")]
        public int? ScaleNo { get; set; }

        /// <summary>
        /// <para>TPOSLOCA.PLOUIAVAILABILITY</para>
        /// Determines if/how the location is selectable in the Scanner UI.
        ///
        /// Possible values:
        /// - Default = Use location setting.
        /// - Visible = Immediately visible for selection
        /// - Advanced = Visible for selection under advanced options
        /// - Hidden = Not visible for selection
        ///
        /// Can be used to override the location value in LOCAUIAVAILABILITY.****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Default  = 0
        ///   Visible  = 1
        ///   Advanced = 2
        ///   Hidden   = 3
        /// ********************************************************************************
        /// </summary>
        [Column("PLOUIAVAILABILITY")]
        public UILocaAvailability? UIAvailability { get; set; }

        /// <summary>
        /// <para>TPOSLOCA.PLOUILDKEYID</para>
        /// Can be used to override the location value for LOCAUILDKEYID.
        /// </summary>
        [Column("PLOUILDKEYID")]
        public int? UiLdKeyId { get; set; }

        /// <summary>
        /// <para>TPOSLOCA.PLOUISTARTMODE</para>
        /// Determines how the Scanner Client will look when started and when a new user logs in.
        ///
        /// Possible values:
        /// - 0=Default(Use Location setting)
        /// - 1=UI Layer Mode
        /// - 2=Grid mode
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Default = 0
        ///   Layers  = 1
        ///   Grid    = 2
        /// ********************************************************************************
        /// </summary>
        [Column("PLOUISTARTMODE")]
        public ScanUIStartMode? UIStartMode { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TPOSLOCA.PLOLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a PositionModel instance.
        /// <para />
        /// Foreign key: PosKeyId -> PositionModel.KeyId (TPOSLOCA.PLOPOSKEYID -> TPOSIT.POSKEYID)
        /// </summary>
        [ForeignKey(nameof(PosKeyId))]
        public PositionModel Pos { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TPIPFIELDS table.
    /// </summary>
    [Table("TPIPFIELDS")]
    public class PrivacyInfoProtectFldsModel
    {
        /// <summary>
        /// <para>TPIPFIELDS.PIPFLDAUTOINC</para>
        /// </summary>
        [Column("PIPFLDAUTOINC")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPIPFIELDS.PIPFLDFIELDNAME</para>
        /// </summary>
        [Column("PIPFLDFIELDNAME")]
        [Required, MaxLength(50)]
        public string FieldName { get; set; }
    }

    /// <summary>
    /// Model representing the TPROCESS table.
    /// Holds the machine processes.
    /// </summary>
    [Table("TPROCESS")]
    public class ProcessModel
    {
        /// <summary>
        /// <para>TPROCESS.PROCBATCH</para>
        /// This is both the public number of the process and the internal database KeyID.
        /// </summary>
        [Column("PROCBATCH")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCAPPROVETIME</para>
        /// Time process was approved.
        /// </summary>
        [Column("PROCAPPROVETIME", TypeName = "datetime")]
        public DateTime? ApproveTime { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCAPPROVEUSERKEYID</para>
        /// User who approved the process.
        /// </summary>
        [Column("PROCAPPROVEUSERKEYID")]
        public int? ApproveUserKeyId { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCCHARGE</para>
        /// Charge/cycle number from the machine. This may be unique per machine, but might also be a daily counter.
        /// </summary>
        [Column("PROCCHARGE")]
        public int? Charge { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCDISAPPROVEUSERKEYID</para>
        /// User who disapproved the process.
        /// </summary>
        [Column("PROCDISAPPROVEUSERKEYID")]
        public int? DisapproveUserKeyId { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCENDTIME</para>
        /// Time process was ended. Received from the machine.
        /// </summary>
        [Column("PROCENDTIME", TypeName = "datetime")]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCENVHUMIDITY</para>
        /// Measured environment humidity when process started.
        /// </summary>
        [Column("PROCENVHUMIDITY")]
        public int? Envhumidity { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCENVPRESSURE</para>
        /// Measured environment pressure when process started.
        /// </summary>
        [Column("PROCENVPRESSURE")]
        public int? Envpressure { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCENVTEMP</para>
        /// Measured environment temperature when process started.
        /// </summary>
        [Column("PROCENVTEMP")]
        public int? Envtemp { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCERROR</para>
        /// Error generated by T-DOC. Possible values are:
        ///
        /// 0=No error
        /// 100=Discontinued logging (missing data during logging)
        ///
        /// plus the standard error set on the machine type.
        /// </summary>
        [Column("PROCERROR")]
        public int? Error { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCEXTERNALBATCHNO</para>
        /// Can be used to associate the process/batch with a process that was actually performed at an external non-T-DOC site.
        /// </summary>
        [Column("PROCEXTERNALBATCHNO")]
        [MaxLength(25)]
        public string ExternalBatchNo { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCINITIATETIME</para>
        /// Time process was initiated (by scanning).
        /// </summary>
        [Column("PROCINITIATETIME", TypeName = "datetime")]
        public DateTime? InitiateTime { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCINITIATORUSERKEYID</para>
        /// User who initiated the process.
        /// </summary>
        [Column("PROCINITIATORUSERKEYID")]
        public int? InitiatorUserKeyId { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCLOADNUMBER</para>
        /// </summary>
        [Column("PROCLOADNUMBER")]
        [MaxLength(20)]
        public string LoadNumber { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCMACHKEYID</para>
        /// Ref. to machine where the process was run.
        /// </summary>
        [Column("PROCMACHKEYID")]
        public int? MachKeyId { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCNATIVEERROR</para>
        /// Error number received from machine. Values are machine dependent, but 0 is always &quot;No error&quot;.
        /// </summary>
        [Column("PROCNATIVEERROR")]
        public int? NativeError { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCNATIVEERRORTEXT</para>
        /// Error text received from machine. Machine dependent.
        /// </summary>
        [Column("PROCNATIVEERRORTEXT")]
        [MaxLength(80)]
        public string NativeErrortext { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCPROGKEYID</para>
        /// Actual program received from machine.
        /// </summary>
        [Column("PROCPROGKEYID")]
        public int? ProgKeyId { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCSCANREFPREKEYID</para>
        /// Scanned/selected program recipe.
        ///
        /// Replacing ProcScanProgKeyID + ProcScanProgType
        /// </summary>
        [Column("PROCSCANREFPREKEYID")]
        public int? ScanRefPreKeyId { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCSCANREFPROGKEYID</para>
        /// Scanned/selected program.
        ///
        /// Replacing ProcScanProgKeyID + ProcScanProgType
        /// </summary>
        [Column("PROCSCANREFPROGKEYID")]
        public int? ScanRefProgKeyId { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCSECONDAPPROVECOMMENT</para>
        /// Used for second user approval
        /// The comment entered when second approval was performed
        /// Translation = &quot;Comment&quot;
        /// </summary>
        [Column("PROCSECONDAPPROVECOMMENT")]
        [MaxLength(300)]
        public string SecondApproveComment { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCSECONDAPPROVEUSERKEYID</para>
        /// Used for second user approval
        /// Who did the second user approval
        /// Translation = &quot;Second approval&quot;
        /// </summary>
        [Column("PROCSECONDAPPROVEUSERKEYID")]
        public int? SecondApproveUserKeyId { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCSTARTTIME</para>
        /// Time process was started. Received from the machine.
        /// </summary>
        [Column("PROCSTARTTIME", TypeName = "datetime")]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCSTARTTIME2</para>
        /// Start time received from the secondary/child machine in a Hybrid logging setup.
        /// </summary>
        [Column("PROCSTARTTIME2", TypeName = "datetime")]
        public DateTime? StartTime2 { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCSTATUS</para>
        /// Current status of process. Possible values are:
        ///
        ///   TProcessStatus = (Done, Running, Initiated);
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Done      = 0
        ///   Running   = 1
        ///   Initiated = 2
        ///   Ending    = 3
        /// ********************************************************************************
        /// </summary>
        [Column("PROCSTATUS")]
        public ProcessStatus? Status { get; set; }

        /// <summary>
        /// <para>TPROCESS.PROCTYPE</para>
        /// The type of the process. Predefined constans defined in code:
        ///
        ///   mtSterilizer = 0;
        ///   mtWasher = 1;
        ///   mtPreDis = 2; // Pre-Disinfector
        ///   mtEndoWasher = 3; // Endoscope washer
        /// </summary>
        [Column("PROCTYPE")]
        public int? Type { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ApproveUserKeyId -> UserModel.KeyId (TPROCESS.PROCAPPROVEUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ApproveUserKeyId))]
        public UserModel ApproveUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: DisapproveUserKeyId -> UserModel.KeyId (TPROCESS.PROCDISAPPROVEUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(DisapproveUserKeyId))]
        public UserModel DisapproveUser { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: Error -> TextModel.Number (TPROCESS.PROCERROR -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(Error))]
        public TextModel ErrorText { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: InitiatorUserKeyId -> UserModel.KeyId (TPROCESS.PROCINITIATORUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(InitiatorUserKeyId))]
        public UserModel InitiatorUser { get; set; }

        /// <summary>
        /// Reference to a MachineModel instance.
        /// <para />
        /// Foreign key: MachKeyId -> MachineModel.KeyId (TPROCESS.PROCMACHKEYID -> TMACHINE.MACHKEYID)
        /// </summary>
        [ForeignKey(nameof(MachKeyId))]
        public MachineModel Mach { get; set; }

        /// <summary>
        /// Reference to a ProgramModel instance.
        /// <para />
        /// Foreign key: ProgKeyId -> ProgramModel.KeyId (TPROCESS.PROCPROGKEYID -> TPROGRAM.PROGKEYID)
        /// </summary>
        [ForeignKey(nameof(ProgKeyId))]
        public ProgramModel Prog { get; set; }

        /// <summary>
        /// Reference to a ProgramModel instance.
        /// <para />
        /// Foreign key: ScanRefProgKeyId -> ProgramModel.KeyId (TPROCESS.PROCSCANREFPROGKEYID -> TPROGRAM.PROGKEYID)
        /// </summary>
        [ForeignKey(nameof(ScanRefProgKeyId))]
        public ProgramModel ScanRefProg { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: SecondApproveUserKeyId -> UserModel.KeyId (TPROCESS.PROCSECONDAPPROVEUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(SecondApproveUserKeyId))]
        public UserModel SecondApproveUser { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of BatchModel instances.
        /// <para />
        /// Foreign key: BatchModel.Batch -> KeyId (TBATCH.BATBATCH -> TPROCESS.PROCBATCH)
        /// </summary>
        [InverseProperty("BatchProcess")]
        public List<BatchModel> BatchBatchList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitModel instances.
        /// <para />
        /// Foreign key: UnitModel.Batch -> KeyId (TUNIT.UNITBATCH -> TPROCESS.PROCBATCH)
        /// </summary>
        [InverseProperty("BatchProcess")]
        public List<UnitModel> BatchUnitList { get; set; }

        /// <summary>
        /// Reference to a collection of IndicatorModel instances.
        /// <para />
        /// Foreign key: IndicatorModel.ProcBatch -> KeyId (TINDICATOR.INDICPROCBATCH -> TPROCESS.PROCBATCH)
        /// </summary>
        [InverseProperty("ProcBatchProcess")]
        public List<IndicatorModel> ProcBatchIndicatorList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitLocationModel instances.
        /// <para />
        /// Foreign key: UnitLocationModel.RefProcBatch -> KeyId (TUNITLCA.ULCAREFPROCBATCH -> TPROCESS.PROCBATCH)
        /// </summary>
        [InverseProperty("RefProcBatchProcess")]
        public List<UnitLocationModel> RefProcBatchUnitLocationList { get; set; }

        /// <summary>
        /// Reference to a collection of EventModel instances.
        /// <para />
        /// Foreign key: EventModel.RefKeyId -> KeyId (TEVENT.EVNTREFKEYID -> TPROCESS.PROCBATCH)
        /// </summary>
        [InverseProperty("RefProcess")]
        public List<EventModel> RefProcessEventList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TPRODUCT table.
    /// </summary>
    [Table("TPRODUCT")]
    public class ProductModel
    {
        /// <summary>
        /// <para>TPRODUCT.PRODKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("PRODKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PROD_CREATED</para>
        /// </summary>
        [Column("PROD_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PROD_CREATEDKEYID</para>
        /// </summary>
        [Column("PROD_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PROD_MODIFIED</para>
        /// </summary>
        [Column("PROD_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PROD_MODIFIEDKEYID</para>
        /// </summary>
        [Column("PROD_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODALTNUMBER</para>
        /// An alternative number for the product.
        ///
        /// The number is not used by T-DOC as standard but is sometimes used when interfacing to other systems.
        /// </summary>
        [Column("PRODALTNUMBER")]
        [MaxLength(20)]
        public string AltNumber { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODAVGONSITESTORETIME</para>
        /// Average On-site storage time. This is the average time products are stored at the customer before they are used. The value is used in calculations where the operation the product is to be used for is unknown.
        /// </summary>
        [Column("PRODAVGONSITESTORETIME")]
        public int? AvgOnSiteStoreTime { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODAVGOPDURATION</para>
        /// Average Operation Duration. This is the average duration of a &quot;generic&quot; operation. The value is used where the operation the product is to be used for is unknown or where the duration of a known operation is unknown.
        /// </summary>
        [Column("PRODAVGOPDURATION")]
        public int? AvgOpDuration { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODBARCODE</para>
        /// The primary external barcode for the product. When set a record must also be created in TBARCODE.
        ///
        /// Additional external barcodes may be defined in TBARCODE.
        /// </summary>
        [Column("PRODBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODBILLINGNUM</para>
        /// A number associated with the product for billing purposes. Often used to group products into billing categories.
        ///
        /// The number is not used by T-DOC as standard but is sometimes used when interfacing to other systems.
        /// </summary>
        [Column("PRODBILLINGNUM")]
        [MaxLength(25)]
        public string BillingNum { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODCNTPSKEYID</para>
        /// </summary>
        [Column("PRODCNTPSKEYID")]
        public int? CntpsKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODCOLOR</para>
        /// </summary>
        [Column("PRODCOLOR")]
        public short? Color { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODCONTAMINATION</para>
        /// NOT YET USED.
        ///
        /// The contamination probability of the product.
        ///
        /// If implemented then consider UDF TDFN_GETITEMCONTAMPROBABILITY and table TCONTAMPROB.
        /// </summary>
        [Column("PRODCONTAMINATION")]
        public int? Contamination { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODCUSITEKEYID</para>
        /// </summary>
        [Column("PRODCUSITEKEYID")]
        public int? CuSiteKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODCUSTKEYID</para>
        /// A reference to the standard customer using the product.
        ///
        /// Should be set for products that are to be pre-dispatched.
        /// </summary>
        [Column("PRODCUSTKEYID")]
        public int? CustKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODDIFFICULTY</para>
        /// A number indicating how complicated it is to pack this product.
        /// A user will be prevented from packing units based on the product, if the user option &#39;max difficulty&#39; is larger than 0, but lower than this number.
        /// </summary>
        [Column("PRODDIFFICULTY")]
        public int? Difficulty { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODDIFFICULTYMODE</para>
        /// Product complexity/difficulty mode.
        ///
        /// Possible values (TProductDifficultyMode):
        /// - UseItemValue (0) - the &#39;Complexity&#39; field is populated with the complexity value from the associated item.
        /// - Fixed (1) - the user can enter random values in the &#39;Complexity&#39; field or select a value from the drop-down.
        ///
        /// Default = UseItemValue.
        /// </summary>
        [Column("PRODDIFFICULTYMODE")]
        [Required]
        public ProductDifficultyMode DifficultyMode { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODDISPATCHRESTRICT</para>
        /// </summary>
        [Column("PRODDISPATCHRESTRICT")]
        [Required]
        public ProdDispatchRestriction DispatchRestrict { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODENDODRYINGMETHOD</para>
        /// KeyID of the endoscope drying method that should be used for this product (only used when product is an endoscope).
        /// </summary>
        [Column("PRODENDODRYINGMETHOD")]
        public int? Endodryingmethod { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODENDOWASHPRGRKEYID</para>
        /// KeyID of the program group containing the endoscope washer programs that can be used for this product. Only used when the product is an endoscope (set on the item group)
        /// </summary>
        [Column("PRODENDOWASHPRGRKEYID")]
        public int? EndoWashPrGrKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODEXTERNALTYPE</para>
        /// The field is intended for setting a &quot;type&quot; for the product that is relevant to external systems that are integrated with T-DOC. For example in the T-DOC/Logica Orbit integration the field is used to select between a number of types that determine how the product is treated when imported into Orbit.
        ///
        /// The field is only visible if the following conditions are met:
        /// - The Standard Article Export job is included in the License.
        /// - External Product types have been defined via the &quot;Edit&quot; menu in the &quot;External Systems&quot; window.
        ///
        /// The actual list of external item types is stored in the TSETTINGS table.
        /// </summary>
        [Column("PRODEXTERNALTYPE")]
        public int? ExternalType { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODEXTLOANERID</para>
        /// </summary>
        [Column("PRODEXTLOANERID")]
        [MaxLength(200)]
        public string ExtLoanerId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODFACKEYID</para>
        /// If the product is Factory Bound this field holds the primary factory of the product. A NULL value indicates that the product is not factory bound.
        /// See also the TFACPROD table.
        /// </summary>
        [Column("PRODFACKEYID")]
        public int? FacKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODFACTORYSTERILIZED</para>
        /// </summary>
        [Column("PRODFACTORYSTERILIZED")]
        [Required]
        public bool FactorySterilized { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODFIXEDPRICE</para>
        /// If specified overrules the standard T-DOC price calculations.
        ///
        /// WARNING: Setting the value to 0 (zero) will cause the product to be &quot;free of charge&quot;. To enable standard T-DOC price calculations set the value to NULL.
        /// </summary>
        [Column("PRODFIXEDPRICE", TypeName = "Money")]
        public decimal? FixedPrice { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODFTCOKEYID</para>
        /// KeyID of the fast track code assigned to this serial number (if any).
        /// </summary>
        [Column("PRODFTCOKEYID")]
        public int? FTCoKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODFTPLKEYID</para>
        /// KeyID of the fast track plan assigned to this serial number (if any).
        /// </summary>
        [Column("PRODFTPLKEYID")]
        public int? FTPlKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODFTTMPKEYID</para>
        /// KeyID of the fast track template assigned to this serial number (if any).
        /// </summary>
        [Column("PRODFTTMPKEYID")]
        public int? FTTmpKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODGTIN</para>
        /// The GTIN (GS1/EAN Global Trade Item Number) that has been allocated by T-DOC for the product.
        ///
        /// The field is populated by T-DOC when required and cannot be edited by the user.
        ///
        /// The value is always 14 digits in the following format:
        ///
        /// Packaging type + Company Prefix + Item reference + Check digit
        ///
        /// Packaging type = Always 0 in T-DOC
        /// Company Prefix = A 7-9 digit number allocated by the GS1/EAN organisation
        /// Item reference = A 3-5 digit number allocated to the product by T-DOC
        /// Check digit = A calculated check digit.
        /// </summary>
        [Column("PRODGTIN")]
        [MaxLength(14)]
        public string GTIN { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODHANDLINGTIME</para>
        /// The combined amount of time it takes to handle the product in the CSSD (i.e. Packing, Batching, Dispatching etc.).
        /// The time is specified in seconds in the database.
        /// </summary>
        [Column("PRODHANDLINGTIME")]
        public int? HandlingTime { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODHATKEYID</para>
        /// Reference to Handling type (Group of Handling steps), to be used for endoscopes
        /// </summary>
        [Column("PRODHATKEYID")]
        public int? HaTKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODINARTKEYID</para>
        /// Refers to a group with identical products.
        /// </summary>
        [Column("PRODINARTKEYID")]
        public int? InArtKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODITEMKEYID</para>
        /// A reference to the item the product is based on.
        /// </summary>
        [Column("PRODITEMKEYID")]
        [Required]
        public int ItemKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODLMPROKEYID</para>
        /// </summary>
        [Column("PRODLMPROKEYID")]
        public int? LMProKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODLOANER</para>
        /// If True the product is covering one or more types of loaner products. At the time of packing T-DOC will require the user to specify the actual name of the product.
        /// </summary>
        [Column("PRODLOANER")]
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public bool? Loaner { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODLOANERTYPE</para>
        /// </summary>
        [Column("PRODLOANERTYPE")]
        [Required]
        public ProductLoanerType LoanerType { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODPACKKEYID</para>
        /// A reference to the packing material used when packing the product.
        /// </summary>
        [Column("PRODPACKKEYID")]
        [Required]
        public int PackKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODPACKONSCREEN</para>
        /// If True the &quot;Pack on screen&quot; window is displayed when the product is packed.
        ///
        /// If the &quot;Pack on screen&quot; module is not in the license the field is disregarded.
        /// </summary>
        [Column("PRODPACKONSCREEN")]
        [Required]
        public bool PackOnScreen { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODPREDIS</para>
        /// True if product should be pre disinfected.
        ///
        /// Not implemented.
        /// </summary>
        [Column("PRODPREDIS")]
        [Required]
        public bool Predis { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODPRICINGTYPE</para>
        /// Pricing type can have the following values:
        /// - Default = &quot;Use product price groups&quot; at system level is respected
        /// - Individual price = The product uses standard calculated prices
        /// - Price groups = Price groups are used according to  &quot;Use product price groups&quot;
        /// </summary>
        [Column("PRODPRICINGTYPE")]
        public int? PricingType { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODPRIGRKEYID</para>
        /// KeyID of this products price group
        /// </summary>
        [Column("PRODPRIGRKEYID")]
        public int? PriGrKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODPRINTLABEL</para>
        /// If True a label is printed when the product is packed.
        /// </summary>
        [Column("PRODPRINTLABEL")]
        [Required]
        public bool PrintLabel { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODPRINTLIST</para>
        /// If True a pack list is printed when the product is packed.
        /// </summary>
        [Column("PRODPRINTLIST")]
        [Required]
        public bool PrintList { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODPRODUCT</para>
        /// The number/identifier of the product.
        /// </summary>
        [Column("PRODPRODUCT")]
        [Required, MaxLength(20)]
        public string Product { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODREMARK</para>
        /// Holds additional descriptions and remarks about the product.
        /// </summary>
        [Column("PRODREMARK")]
        public string Remark { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODREQSTOCKCOUNT</para>
        /// The number of units based on this product that it is required/desired to have on sterile stock (Unit status = On Stock).
        ///
        /// The value id filled by the user.
        /// </summary>
        [Column("PRODREQSTOCKCOUNT")]
        public int? ReqStockCount { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODRESERVATIONMODE</para>
        /// Used by the Order booking engine to determine if and how the product should be booked.
        ///
        ///   TProdReservationMode = (NotRequired, Enabled);
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   NotRequired = 0
        ///   Enabled     = 1
        /// ********************************************************************************
        /// </summary>
        [Column("PRODRESERVATIONMODE")]
        [Required]
        public ProdReservationMode ReservationMode { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODSERIALMASK</para>
        /// The mask unsed for automatic numbering of serial numbers based on the product. The general mask is defined in TNUMMASK but can be overridden for individual products.
        /// </summary>
        [Column("PRODSERIALMASK")]
        [MaxLength(20)]
        public string Serialmask { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODSTATUS</para>
        /// Indicates the status of the product. Valid values are:
        ///
        ///   stNormal = 10
        ///   stDead   = 90
        /// </summary>
        [Column("PRODSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODSTERIPRGRKEYID</para>
        /// A reference to the sterilizer program group containing the programs that can be used to sterilize the product.
        /// </summary>
        [Column("PRODSTERIPRGRKEYID")]
        public int? SteriPrgrKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODSTERIVOLUME</para>
        /// </summary>
        [Column("PRODSTERIVOLUME")]
        public double? SteriVolume { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODSTOCKPLACEMENT</para>
        /// The standard stock placement for the product. It should be decided on a system basis if the stock placement should apply to customer or CSSD stocks.
        ///
        /// Customers using the T-DOC Stock module do typically not use this field as more detailed stock placements can then be specified on the individual stocks.
        /// </summary>
        [Column("PRODSTOCKPLACEMENT")]
        [MaxLength(60)]
        public string StockPlacement { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODSTORAGETYPE</para>
        /// TProductStorageType = (Factory, Transit);****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Factory = 0
        ///   Transit = 1
        /// ********************************************************************************
        /// </summary>
        [Column("PRODSTORAGETYPE")]
        public ProductStorageType? StorageType { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODTOTALCOUNT</para>
        /// The total count of available products of this type at the site.
        /// </summary>
        [Column("PRODTOTALCOUNT")]
        [Required]
        public int TotalCount { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODTRACEABILITY</para>
        /// The type of traceability T-DOC should enforce for the product. Valid values are:
        ///
        ///   trcFULL   =0      // Process added and expected returned
        ///   trcTOCUST =1      // Process added but not expected returned
        ///   trcPROD   =2      // No Process and not expected returned
        ///   trcTRPROD =3      // No Process but expected returned
        /// </summary>
        [Column("PRODTRACEABILITY")]
        [Required]
        public int Traceability { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODTRACETYPE</para>
        /// Used to determine if the product is traced by serial number or only by product number.
        ///
        /// TProductTraceType = (Product, ProductSerial, Both)
        /// - Product (0): No serial numbers. Traced by unit number and &quot;Total count&quot; only.
        /// - ProductSerial (1): The Product is fully traced by serial number. There must be the exact same number of serial numbers created as specified in &quot;Total count&quot;.
        /// - Both (2): The product can be traced by either product number or serial number. For backwards compatibility only. Will allow a mix. Will not be allowed on new systems and should be avoided on existing by fixing all products where it is &quot;in use&quot; (i.e. where at least one serial number exists, but the total number of serial numbers does not match the &quot;Total count&quot;).
        ///
        /// Product (0) is the default value.
        /// </summary>
        [Column("PRODTRACETYPE")]
        [Required]
        public ProductTraceType TraceType { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODTRGRPKEYID</para>
        /// </summary>
        [Column("PRODTRGRPKEYID")]
        public int? TRGrpKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODTYPE</para>
        /// The general type of the product. Valid values are:
        ///
        /// 0 = tray/set
        /// 1 = single pack
        /// 2 = endoscopes
        /// </summary>
        [Column("PRODTYPE")]
        [Required]
        public ProductType Type { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF01</para>
        /// </summary>
        [Column("PRODUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF02</para>
        /// </summary>
        [Column("PRODUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF03</para>
        /// </summary>
        [Column("PRODUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF04</para>
        /// </summary>
        [Column("PRODUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF05</para>
        /// </summary>
        [Column("PRODUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF06</para>
        /// </summary>
        [Column("PRODUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF07</para>
        /// </summary>
        [Column("PRODUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF08</para>
        /// </summary>
        [Column("PRODUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF09</para>
        /// </summary>
        [Column("PRODUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF10</para>
        /// </summary>
        [Column("PRODUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF11</para>
        /// </summary>
        [Column("PRODUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF12</para>
        /// </summary>
        [Column("PRODUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF13</para>
        /// </summary>
        [Column("PRODUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF14</para>
        /// </summary>
        [Column("PRODUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF15</para>
        /// </summary>
        [Column("PRODUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF16</para>
        /// </summary>
        [Column("PRODUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF17</para>
        /// </summary>
        [Column("PRODUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF18</para>
        /// </summary>
        [Column("PRODUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF19</para>
        /// </summary>
        [Column("PRODUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODUF20</para>
        /// </summary>
        [Column("PRODUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODWASHERVOLUME</para>
        /// </summary>
        [Column("PRODWASHERVOLUME")]
        public double? WasherVolume { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODWASHPRGRKEYID</para>
        /// A reference to the washer/disinfector program group containing the programs that can be used to wash/disinfect the product.
        /// </summary>
        [Column("PRODWASHPRGRKEYID")]
        public int? WashPrgrKeyId { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODWEIGHT</para>
        /// Sum(NonDisposable, Disposable)
        /// </summary>
        [Column("PRODWEIGHT")]
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public int? Weight { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODWEIGHTDELTACALCMODE</para>
        /// &quot;Default&quot;: Values from the weight plan are used.
        /// &quot;Fixed&quot;: Values set on product are used at ALL locations.
        /// </summary>
        [Column("PRODWEIGHTDELTACALCMODE")]
        public int? WeightDeltaCalcMode { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODWEIGHTDELTAUNIT</para>
        /// Can be &quot;%&quot; or &quot;grams&quot;
        /// </summary>
        [Column("PRODWEIGHTDELTAUNIT")]
        public int? Weightdeltaunit { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODWEIGHTDELTAVALUE</para>
        /// Allowed deviation from the given weight in percentage or grams depending on ProdWeightDeltaUnit.
        /// </summary>
        [Column("PRODWEIGHTDELTAVALUE")]
        public int? WeightDeltaValue { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODWEIGHTDISPOSABLE</para>
        /// Depends on ProdWeightMode
        ///
        /// Mode = Sum:
        /// Sum of disposable single items
        /// Mode = Fixed:
        /// Entered weight
        /// </summary>
        [Column("PRODWEIGHTDISPOSABLE")]
        public int? WeightDisposable { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODWEIGHTMODE</para>
        /// Can be &quot;Sum&quot; or &quot;Fixed&quot;
        /// &quot;Sum&quot;: Weight is taken from Item values.
        /// &quot;Fixed&quot;: Weight is entered directly
        /// </summary>
        [Column("PRODWEIGHTMODE")]
        public int? WeightMode { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODWEIGHTNONDISPOSABLE</para>
        /// Depends on ProdWeightMode
        ///
        /// Mode = Sum:
        /// Sum of non-disposable single items
        /// Mode = Fixed:
        /// Entered weight
        /// </summary>
        [Column("PRODWEIGHTNONDISPOSABLE")]
        public int? WeightNonDisposable { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODWEIGHTUSAGEENABLED</para>
        /// If false then no production step will require you to register the weight, but you can still chose to do so using control codes.
        /// If true then the weight plan will determine when registration/validation is required.
        /// </summary>
        [Column("PRODWEIGHTUSAGEENABLED")]
        [Required]
        public bool WeightUsageEnabled { get; set; }

        /// <summary>
        /// <para>TPRODUCT.PRODWPLANKEYID</para>
        /// Reference to the weight plan that applies to this product. If NULL then the default plan for the factory will be used.
        /// </summary>
        [Column("PRODWPLANKEYID")]
        public int? WPlanKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TPRODUCT.PROD_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: CustKeyId -> CustomerModel.KeyId (TPRODUCT.PRODCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(CustKeyId))]
        public CustomerModel Cust { get; set; }

        /// <summary>
        /// Reference to a ProgramGroupModel instance.
        /// <para />
        /// Foreign key: EndoWashPrGrKeyId -> ProgramGroupModel.KeyId (TPRODUCT.PRODENDOWASHPRGRKEYID -> TPROGGRP.PRGRKEYID)
        /// </summary>
        [ForeignKey(nameof(EndoWashPrGrKeyId))]
        public ProgramGroupModel EndoWashPrGr { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TPRODUCT.PRODFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a FastTrackCodeModel instance.
        /// <para />
        /// Foreign key: FTCoKeyId -> FastTrackCodeModel.KeyId (TPRODUCT.PRODFTCOKEYID -> TFASTTRACKCODE.FTCOKEYID)
        /// </summary>
        [ForeignKey(nameof(FTCoKeyId))]
        public FastTrackCodeModel FTCo { get; set; }

        /// <summary>
        /// Reference to a FastTrackPlanModel instance.
        /// <para />
        /// Foreign key: FTPlKeyId -> FastTrackPlanModel.KeyId (TPRODUCT.PRODFTPLKEYID -> TFASTTRACKPLAN.FTPLKEYID)
        /// </summary>
        [ForeignKey(nameof(FTPlKeyId))]
        public FastTrackPlanModel FTPl { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: ItemKeyId -> ItemModel.KeyId (TPRODUCT.PRODITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(ItemKeyId))]
        public ItemModel Item { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TPRODUCT.PROD_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a PackingModel instance.
        /// <para />
        /// Foreign key: PackKeyId -> PackingModel.KeyId (TPRODUCT.PRODPACKKEYID -> TPACKING.PACKKEYID)
        /// </summary>
        [ForeignKey(nameof(PackKeyId))]
        public PackingModel Pack { get; set; }

        /// <summary>
        /// Reference to a ProgramGroupModel instance.
        /// <para />
        /// Foreign key: SteriPrgrKeyId -> ProgramGroupModel.KeyId (TPRODUCT.PRODSTERIPRGRKEYID -> TPROGGRP.PRGRKEYID)
        /// </summary>
        [ForeignKey(nameof(SteriPrgrKeyId))]
        public ProgramGroupModel SteriPrgr { get; set; }

        /// <summary>
        /// Reference to a ProgramGroupModel instance.
        /// <para />
        /// Foreign key: WashPrgrKeyId -> ProgramGroupModel.KeyId (TPRODUCT.PRODWASHPRGRKEYID -> TPROGGRP.PRGRKEYID)
        /// </summary>
        [ForeignKey(nameof(WashPrgrKeyId))]
        public ProgramGroupModel WashPrgr { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of ExtDocRefLinkModel instances.
        /// <para />
        /// Foreign key: ExtDocRefLinkModel.ProdKeyId -> KeyId (TEXTDOCREFLINK.EDRLPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [InverseProperty("Prod")]
        public List<ExtDocRefLinkModel> ProdExtDocRefLinkList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderLineAlternativeModel instances.
        /// <para />
        /// Foreign key: OrderLineAlternativeModel.ProdKeyId -> KeyId (TORDLNALTERNATIVE.OLNALTPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [InverseProperty("Prod")]
        public List<OrderLineAlternativeModel> ProdOrderLineAlternativeList { get; set; }

        /// <summary>
        /// Reference to a collection of ProductReservationModel instances.
        /// <para />
        /// Foreign key: ProductReservationModel.ProdKeyId -> KeyId (TPRODRESERVATION.PRESVPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [InverseProperty("Prod")]
        public List<ProductReservationModel> ProdProductReservationList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitModel instances.
        /// <para />
        /// Foreign key: UnitModel.ProdKeyId -> KeyId (TUNIT.UNITPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [InverseProperty("Prod")]
        public List<UnitModel> ProdUnitList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderLineModel instances.
        /// <para />
        /// Foreign key: OrderLineModel.RefProdKeyId -> KeyId (TORDLN.OLNREFPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [InverseProperty("RefProd")]
        public List<OrderLineModel> RefProdOrderLineList { get; set; }

        /// <summary>
        /// Reference to a collection of PictureRefModel instances.
        /// <para />
        /// Foreign key: PictureRefModel.RefProdKeyId -> KeyId (TPICTREF.PICTREFPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [InverseProperty("RefProd")]
        public List<PictureRefModel> RefProdPictureRefList { get; set; }

        /// <summary>
        /// Reference to a collection of SerialModel instances.
        /// <para />
        /// Foreign key: SerialModel.RefProdKeyId -> KeyId (TSERIAL.SERIREFPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [InverseProperty("RefProd")]
        public List<SerialModel> RefProdSerialList { get; set; }

        /// <summary>
        /// Reference to a collection of EventModel instances.
        /// <para />
        /// Foreign key: EventModel.RefKeyId -> KeyId (TEVENT.EVNTREFKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [InverseProperty("RefProduct")]
        public List<EventModel> RefProductEventList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TPRODRESERVATION table.
    /// Holds product reservations that using for booking of products.
    /// </summary>
    [Table("TPRODRESERVATION")]
    public class ProductReservationModel
    {
        /// <summary>
        /// <para>TPRODRESERVATION.PRESVAUTOINC</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("PRESVAUTOINC")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVCREATED</para>
        /// Holds time when product reservation was created.
        /// </summary>
        [Column("PRESVCREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVEXPDELTIME</para>
        /// Expected delivery time - time when product will be delivered to customer.
        /// </summary>
        [Column("PRESVEXPDELTIME", TypeName = "datetime")]
        public DateTime? ExpDelTime { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVEXPRETURNTIME</para>
        /// Expected return time - time when product will be returned to factory (for example: after operation and transportation to factory).
        /// </summary>
        [Column("PRESVEXPRETURNTIME", TypeName = "datetime")]
        public DateTime? ExpReturnTime { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVFASTESTONSTOCKAFTERUSE</para>
        /// </summary>
        [Column("PRESVFASTESTONSTOCKAFTERUSE", TypeName = "datetime")]
        public DateTime? FastestOnStockAfterUse { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVISUNITACTUAL</para>
        /// Possible values:
        /// - &#39;F&#39; - it means number of unit #X will be changed because this number uses for reservation which is before this reservation;
        /// - &#39;T&#39; - #X is real number of unit which will be used for this reservation.
        /// </summary>
        [Column("PRESVISUNITACTUAL")]
        public bool? IsUnitActual { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVLATESTRETURNBEFOREUSE</para>
        /// </summary>
        [Column("PRESVLATESTRETURNBEFOREUSE", TypeName = "datetime")]
        public DateTime? LatestReturnBeforeUse { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVOLNLINE</para>
        /// The number of article line in the order.
        /// </summary>
        [Column("PRESVOLNLINE")]
        [Required]
        public int OlnLine { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVORDKEYID</para>
        /// Ref to the order data (TOrder).
        /// </summary>
        [Column("PRESVORDKEYID")]
        [Required]
        public int OrdKeyId { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVPRODKEYID</para>
        /// Typically a reference to the original Product as specified on the order line the reservation is for.
        /// However, it might be different if the reservation is for an identical or alternative product.
        ///
        /// But PRESVPRODKEYID will always be the same as PRESVUNITUNIT.UNITPRODKEYID.
        /// </summary>
        [Column("PRESVPRODKEYID")]
        [Required]
        public int ProdKeyId { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVREQDELTIME</para>
        /// Requested delivery time - time when customer expects to arrive reserved product.
        ///
        /// It can be one of the next times:
        /// - Scheduled/actual start time of the operation (TOpData);
        /// - Order requested delivery time (TOrder).
        /// </summary>
        [Column("PRESVREQDELTIME", TypeName = "datetime")]
        public DateTime? ReqDelTime { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVSERIKEYID</para>
        /// Ref to the serial data (TSerial).
        ///
        /// Not mandatory field, because product can be traced by product number (NULL value) or serial number (Ref to TSerial).
        /// </summary>
        [Column("PRESVSERIKEYID")]
        public int? SeriKeyId { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVSTATE</para>
        /// Possible values:
        /// - Undetermined(0) - there are no any reservation for product;
        /// - rstOK(1) - reservation can be delivered in time for customer;
        /// - rstWarning(2) - reservation can be delivered in time for customer but there are some exceptions (for example: product already picked but requested delivery time is less than Now);
        /// - Error(3) - reservation cannot be delivered in time for customer.****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Undetermined                   = 0
        ///   OKOriginal                     = 1
        ///   OKIdentical                    = 2
        ///   OKAlternative                  = 3
        ///   OKIdenticalForAlternative      = 4
        ///   WarningOriginal                = 5
        ///   WarningIdentical               = 6
        ///   WarningAlternative             = 7
        ///   WarningIdenticalForAlternative = 8
        ///   Error                          = 9
        /// ********************************************************************************
        /// </summary>
        [Column("PRESVSTATE")]
        [Required]
        public ReservationState State { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVSTATEFIRSTOK</para>
        /// Time of creating reservation.
        ///
        /// Using for prioritizing of distribution of free products.
        /// For instance, when there is situation that in factory does not have enought amount of product then reservations has status Error. But in some moment on factory turn up new free products. In this case job distributes new free products to reservations which have the oldest value of field StateFirstOk.
        /// </summary>
        [Column("PRESVSTATEFIRSTOK", TypeName = "datetime")]
        public DateTime? StateFirstOk { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVSTATUS</para>
        /// Possible values:
        /// - rvsActive(0) - reservation is active now and take to account for checking booking;
        /// - rvsCompleted(1) - reservation completed successfuly (was delivered in time) and don&#39;t take to account for checking booking;
        /// - rvsFailed(2) - reservation completed as failed (couldn&#39;t be delivered in time) and is not taken to account for checking booking;
        /// - rvsCancelled(3) - reservation completed as canceled and is not taken to account for checking booking.
        /// </summary>
        [Column("PRESVSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVTYPE</para>
        /// Possible types of reservation:
        /// - Normal(0) - reservation contains information about reserved product that exists in system;
        /// - NotOrdered(1) - product cannot be reserved (for example: total count is less than user want to order). This type is set when PRESVSTATE is rstError.
        /// - PickedFromLineSpec(2) - Same as normal, but unit in PRESVUNITUNIT has already been picked for the line it is reserved for. The unit actually picked (i.e. the one in PRESVUNITUNIT) might not be the one that was origianally reserved, but all is OK.****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Normal             = 0
        ///   NotOrdered         = 1
        ///   PickedFromLineSpec = 2
        /// ********************************************************************************
        /// </summary>
        [Column("PRESVTYPE")]
        [Required]
        public ProductReservationType Type { get; set; }

        /// <summary>
        /// <para>TPRODRESERVATION.PRESVUNITUNIT</para>
        /// The public number of the unit (TUnit).
        ///
        /// Not mandatory field, because product can&#39;t always has a unit.
        /// </summary>
        [Column("PRESVUNITUNIT")]
        public int? UnitUnit { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a OrderModel instance.
        /// <para />
        /// Foreign key: OrdKeyId -> OrderModel.KeyId (TPRODRESERVATION.PRESVORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [ForeignKey(nameof(OrdKeyId))]
        public OrderModel Ord { get; set; }

        /// <summary>
        /// Reference to a ProductModel instance.
        /// <para />
        /// Foreign key: ProdKeyId -> ProductModel.KeyId (TPRODRESERVATION.PRESVPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [ForeignKey(nameof(ProdKeyId))]
        public ProductModel Prod { get; set; }

        /// <summary>
        /// Reference to a SerialModel instance.
        /// <para />
        /// Foreign key: SeriKeyId -> SerialModel.KeyId (TPRODRESERVATION.PRESVSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [ForeignKey(nameof(SeriKeyId))]
        public SerialModel Seri { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TPROFILE table.
    /// *****************************************************************************
    /// WHEN CHANGING FIELDS REMEMBER TO UPDATE uInitTDOCDB.pas CheckDefaultUserProfiles!
    /// *****************************************************************************
    /// </summary>
    [Table("TPROFILE")]
    public class ProfileModel
    {
        /// <summary>
        /// <para>TPROFILE.PROFKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("PROFKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPROFILE.PROF_CREATED</para>
        /// </summary>
        [Column("PROF_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TPROFILE.PROF_CREATEDKEYID</para>
        /// </summary>
        [Column("PROF_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TPROFILE.PROF_MODIFIED</para>
        /// </summary>
        [Column("PROF_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TPROFILE.PROF_MODIFIEDKEYID</para>
        /// </summary>
        [Column("PROF_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TPROFILE.PROFANCESTORKEYID</para>
        /// If the profile is based on another profile this field holds the KeyID of that profile.
        /// </summary>
        [Column("PROFANCESTORKEYID")]
        public int? AncestorKeyId { get; set; }

        /// <summary>
        /// <para>TPROFILE.PROFNAME</para>
        /// The name of the profile.
        ///
        /// ProfType=ptUserGroup
        ///   The actual name of the usergroup
        ///
        /// ProfType=ptUser
        ///   The UserKeyID of the user in text format.
        /// </summary>
        [Column("PROFNAME")]
        [Required, MaxLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TPROFILE.PROFPROFILE</para>
        /// Binary storage of the profile.
        /// </summary>
        [Column("PROFPROFILE")]
        public byte[] Profile { get; set; }

        /// <summary>
        /// <para>TPROFILE.PROFTYPE</para>
        /// A value of type TProfileType  (ptXXX from TDConst)
        ///
        /// Current valid values are:
        ///   ptUserGroup
        ///   ptUser
        /// </summary>
        [Column("PROFTYPE")]
        [Required]
        public int Type { get; set; }

        /// <summary>
        /// <para>TPROFILE.PROFUPDATEREQUIRED</para>
        /// This columns indicates if a profile is &quot;dirty&quot;.
        ///
        /// When a parent profile is updated, all child profiles are marked dirty (PROFUPDATEREQUIRED = T).
        ///
        /// When a user logs in, the program can see if its profile needs to be updated by looking at this Column.
        ///
        /// If it needs to be updated, it must &quot;go up&quot; and update all the way up where update is required.
        /// </summary>
        [Column("PROFUPDATEREQUIRED")]
        [Required]
        public bool UpdateRequired { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a ProfileModel instance.
        /// <para />
        /// Foreign key: AncestorKeyId -> ProfileModel.KeyId (TPROFILE.PROFANCESTORKEYID -> TPROFILE.PROFKEYID)
        /// </summary>
        [ForeignKey(nameof(AncestorKeyId))]
        public ProfileModel Ancestor { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TPROFILE.PROF_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TPROFILE.PROF_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TPROGRAM table.
    /// Holds the programs that exsist for all types of machines.
    ///
    /// Programs MUST be linked to a machine model. The same program can NOT belong to more than one machine model.
    ///
    /// Programs can belong to a program group.
    /// </summary>
    [Table("TPROGRAM")]
    public class ProgramModel
    {
        /// <summary>
        /// <para>TPROGRAM.PROGKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("PROGKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROG_CREATED</para>
        /// </summary>
        [Column("PROG_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROG_CREATEDKEYID</para>
        /// </summary>
        [Column("PROG_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROG_MODIFIED</para>
        /// </summary>
        [Column("PROG_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROG_MODIFIEDKEYID</para>
        /// </summary>
        [Column("PROG_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGAPPROVAL</para>
        /// Valid values
        ///
        ///   TApprovalType
        ///     No        : No approval is required at all.
        ///     Yes       : The batch must be approved.
        ///     Visual    : The batch must be approved. Graph is shown on screen.
        ///     Unit      : The batch must be aproved and all units in it scanned.
        ///     UnitVisual: do but graph is displayed
        ///
        /// Unit and UnitVisual are only valid for sterilizer programs.
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   No         = 0
        ///   Yes        = 1
        ///   Visual     = 2
        ///   Unit       = 3
        ///   UnitVisual = 4
        /// ********************************************************************************
        /// </summary>
        [Column("PROGAPPROVAL")]
        public ApprovalType? Approval { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGBARCODE</para>
        /// </summary>
        [Column("PROGBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGCHECKINITIATED</para>
        /// The field controls if a user can initiate a batch with a scanner for this program. Possible values are:
        /// 0 = Allowed
        /// 1 = Required****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Allowed  = 0
        ///   Required = 1
        /// ********************************************************************************
        /// </summary>
        [Column("PROGCHECKINITIATED")]
        public ProgramCheckInitiated? CheckInitiated { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGCONSUMCOST</para>
        /// Comsumption cost.
        ///
        /// Not implemented.
        /// </summary>
        [Column("PROGCONSUMCOST", TypeName = "Money")]
        public decimal? ConsumCost { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGDEPRECCOST</para>
        /// Depreciation cost.
        ///
        /// Not implemented.
        /// </summary>
        [Column("PROGDEPRECCOST", TypeName = "Money")]
        public decimal? DeprecCost { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGDESCRIPTION</para>
        /// Free text.
        /// </summary>
        [Column("PROGDESCRIPTION")]
        public string Description { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGDURATION</para>
        /// The average duration of the program in seconds.
        /// </summary>
        [Column("PROGDURATION")]
        [Required]
        public int Duration { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGEXTLOGREQUIRED</para>
        /// Is an external log file required to be stored with the processes running this program?
        ///
        /// Not implemented.
        /// </summary>
        [Column("PROGEXTLOGREQUIRED")]
        [Required]
        public bool ExtLogRequired { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGFILTERDELTAP</para>
        /// Filter delta pressure. If filter time(s) set, pressuure changes larger than this value will still be listed as an extreme.
        /// </summary>
        [Column("PROGFILTERDELTAP")]
        public int? FilterDeltaP { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGFILTERDELTAT</para>
        /// Filter delta temperature. If filter time(s) set, temperature changes larger than this value will still be listed as an extreme.
        /// </summary>
        [Column("PROGFILTERDELTAT")]
        public int? FilterDeltaT { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGFILTERTIME1</para>
        /// The interval (in seconds) used when displaying log data during the treatment phase. Only used for display - data is still logged every second.
        /// </summary>
        [Column("PROGFILTERTIME1")]
        public int? FilterTime1 { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGFILTERTIME2</para>
        /// The interval (in seconds) used when displaying log data outside the treatment phase. Only used for display - data is still logged every second.
        /// </summary>
        [Column("PROGFILTERTIME2")]
        public int? FilterTime2 { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGINTERNALPARAMS</para>
        /// Used to hold program/machine specific parameters that are used internally by T-DOC.
        /// NEVER CHANGE THE CONTENTS OF THIS FIELD UNLESS DIRECTED TO BY GETINGE.
        /// </summary>
        [Column("PROGINTERNALPARAMS")]
        public string InternalParams { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGLOGREF</para>
        /// Reference graph (internal log file format). Used for approval.
        /// </summary>
        [Column("PROGLOGREF")]
        public string LogRef { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGMAXTEMP</para>
        /// Maximum temperature during treatment phase.
        ///
        /// Part of program validation (see ProgValidate).
        ///
        /// Not implemented.
        /// </summary>
        [Column("PROGMAXTEMP")]
        public int? MaxTemp { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGMCTYPKEYID</para>
        /// Link to the machine model.
        /// </summary>
        [Column("PROGMCTYPKEYID")]
        [Required]
        public int McTypKeyId { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGNAME</para>
        /// Name of the program.
        /// </summary>
        [Column("PROGNAME")]
        [MaxLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGPASSWORD</para>
        /// If defined, this password must be entered/scanned when selecting a program.
        /// </summary>
        [Column("PROGPASSWORD")]
        [MaxLength(10)]
        public string Password { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGPREHIPRES</para>
        /// Maximum pressure during pretreatment.
        ///
        /// Part of program validation (see ProgValidate).
        ///
        /// Currently only used for display on the process graph.
        /// </summary>
        [Column("PROGPREHIPRES")]
        public int? PreHiPres { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGPREHITEMP</para>
        /// Maximum temperature during pretreatment.
        ///
        /// Part of program validation (see ProgValidate).
        ///
        /// Not implemented.
        /// </summary>
        [Column("PROGPREHITEMP")]
        public int? PreHiTemp { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGPRELOWPRES</para>
        /// Minimum pressure during pretreatment.
        ///
        /// Part of program validation (see ProgValidate).
        ///
        /// Currently only used for display on the process graph.
        /// </summary>
        [Column("PROGPRELOWPRES")]
        public int? PreLowPres { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGPRELOWTEMP</para>
        /// Minimum temperature during pretreatment.
        ///
        /// Part of program validation (see ProgValidate).
        ///
        /// Not implemented.
        /// </summary>
        [Column("PROGPRELOWTEMP")]
        public int? PreLowTemp { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGPREPULSES</para>
        /// Number of pulses during pretreatment.
        ///
        /// Part of program validation (see ProgValidate).
        ///
        /// Not implemented.
        /// </summary>
        [Column("PROGPREPULSES")]
        public int? PrePulses { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGPRICE</para>
        /// Total cost of running this program.
        /// </summary>
        [Column("PROGPRICE", TypeName = "Money")]
        public decimal? Price { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGPROGRAM</para>
        /// Short name/ID of the program
        /// </summary>
        [Column("PROGPROGRAM")]
        [Required, MaxLength(30)]
        public string Program { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGQSETKEYID</para>
        /// KeyID of the question set holding questions that must be replied to when a process that used this program is approved.
        /// </summary>
        [Column("PROGQSETKEYID")]
        public int? QSetKeyId { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGREPORTNAME</para>
        /// Only used for machines with G1 controller
        /// </summary>
        [Column("PROGREPORTNAME")]
        [MaxLength(1000)]
        public string ReportName { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGSCANNUM</para>
        /// The number that identifies this program on the sterilizer.
        ///
        /// This number is unique within the selected machine model.
        /// </summary>
        [Column("PROGSCANNUM")]
        [Required]
        public int ScanNum { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGSECONDUSERAPPROVAL</para>
        /// Used for second user approval (hence the SUA in field name)
        /// Set to True of the should be second user approval when approving/disapproving process
        /// Translation = &quot;Second approval required&quot;
        /// </summary>
        [Column("PROGSECONDUSERAPPROVAL")]
        [Required]
        public bool SecondUserApproval { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGSTERILEPRES</para>
        /// Minimum pressure during pretreatment.
        ///
        /// Part of program validation (see ProgValidate).
        ///
        /// Not implemented.
        /// </summary>
        [Column("PROGSTERILEPRES")]
        public int? SterilePres { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGSTERILESECONDS</para>
        /// The exposure time in seconds.
        /// </summary>
        [Column("PROGSTERILESECONDS")]
        public int? SterileSeconds { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGSTERILETEMP</para>
        /// The exposure temperature.
        /// </summary>
        [Column("PROGSTERILETEMP")]
        public int? SterileTemp { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGTYPE</para>
        /// Indicates the type of the program. Valid values depends on the machine type:
        ///
        /// Sterilizer:
        ///   0=Normal
        ///   1=Bowie dick test
        ///   2=Leakage test
        ///   3=Cleaning run
        ///   99=Other
        ///
        /// Washer:
        ///   0=Normal
        ///   3=Cleaning run
        ///   4=Descaling
        ///   99=Other
        ///
        /// Endoscope washer:
        ///   0=Normal
        ///   3=Cleaning run
        ///   4=Descaling
        ///   5=Short
        ///   99=Other
        ///
        /// Not fully implemented.
        /// </summary>
        [Column("PROGTYPE")]
        [Required]
        public int Type { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGUTILITYCOST</para>
        /// Utility cost.
        ///
        /// Not implemented.
        /// </summary>
        [Column("PROGUTILITYCOST", TypeName = "Money")]
        public decimal? UtilityCost { get; set; }

        /// <summary>
        /// <para>TPROGRAM.PROGVALIDATE</para>
        /// Indicates if program validation (automatic approval of a process according to the specified parameters) is active.
        ///
        /// Not implemented.
        /// </summary>
        [Column("PROGVALIDATE")]
        [Required]
        public bool Validate { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TPROGRAM.PROG_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a MachineTypeModel instance.
        /// <para />
        /// Foreign key: McTypKeyId -> MachineTypeModel.KeyId (TPROGRAM.PROGMCTYPKEYID -> TMACHINT.MCTYPKEYID)
        /// </summary>
        [ForeignKey(nameof(McTypKeyId))]
        public MachineTypeModel McTyp { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TPROGRAM.PROG_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of MachineModel instances.
        /// <para />
        /// Foreign key: MachineModel.DefProgKeyId -> KeyId (TMACHINE.MACHDEFPROGKEYID -> TPROGRAM.PROGKEYID)
        /// </summary>
        [InverseProperty("DefProg")]
        public List<MachineModel> DefProgMachineList { get; set; }

        /// <summary>
        /// Reference to a collection of MachineTypeModel instances.
        /// <para />
        /// Foreign key: MachineTypeModel.DefProgKeyId -> KeyId (TMACHINT.MCTYPDEFPROGKEYID -> TPROGRAM.PROGKEYID)
        /// </summary>
        [InverseProperty("DefProg")]
        public List<MachineTypeModel> DefProgMachineTypeList { get; set; }

        /// <summary>
        /// Reference to a collection of ExtDocRefLinkModel instances.
        /// <para />
        /// Foreign key: ExtDocRefLinkModel.ProgKeyId -> KeyId (TEXTDOCREFLINK.EDRLPROGKEYID -> TPROGRAM.PROGKEYID)
        /// </summary>
        [InverseProperty("Prog")]
        public List<ExtDocRefLinkModel> ProgExtDocRefLinkList { get; set; }

        /// <summary>
        /// Reference to a collection of SerialModel instances.
        /// <para />
        /// Foreign key: SerialModel.RefProgKeyId -> KeyId (TSERIAL.SERIREFPROGKEYID -> TPROGRAM.PROGKEYID)
        /// </summary>
        [InverseProperty("RefProg")]
        public List<SerialModel> RefProgSerialList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TPROGGRP table.
    /// Program groups are used to group programs with similar functionality. On all products you can then select a proper group containing the programs that are valid for the given product.
    /// </summary>
    [Table("TPROGGRP")]
    public class ProgramGroupModel
    {
        /// <summary>
        /// <para>TPROGGRP.PRGRKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("PRGRKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TPROGGRP.PRGRCOLOR</para>
        /// </summary>
        [Column("PRGRCOLOR")]
        public short? Color { get; set; }

        /// <summary>
        /// <para>TPROGGRP.PRGRNAME</para>
        /// The name of the program group
        /// </summary>
        [Column("PRGRNAME")]
        [Required, MaxLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TPROGGRP.PRGRREMARK</para>
        /// Free text
        /// </summary>
        [Column("PRGRREMARK")]
        public string Remark { get; set; }

        /// <summary>
        /// <para>TPROGGRP.PRGRTYPE</para>
        /// The type of programs that can be in the program group.
        ///
        /// Predefined constans defined in code:
        ///
        ///   mtSterilizer = 0;
        ///   mtWasher = 1;
        ///   mtEndoWasher = 3; // Endoscope washer
        ///
        /// (Same as for McTypType)
        /// </summary>
        [Column("PRGRTYPE")]
        [Required]
        public int Type { get; set; }

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of ProgramGroupsModel instances.
        /// <para />
        /// Foreign key: ProgramGroupsModel.PrgrKeyId -> KeyId (TPRGGRPS.PGGPPRGRKEYID -> TPROGGRP.PRGRKEYID)
        /// </summary>
        [InverseProperty("Prgr")]
        public List<ProgramGroupsModel> PrgrProgramGroupsList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TPRGGRPS table.
    /// This is the link table between TPROGRAM and TPROGGRP. It also establishes the priority of the programs using PRGPPOSITION.
    /// </summary>
    [Table("TPRGGRPS")]
    public class ProgramGroupsModel
    {
        /// <summary>
        /// <para>TPRGGRPS.PGGPPOSITION</para>
        /// Establishes to priority of the programs within the group. The one with the lowest number is the &quot;best&quot; program for the product.
        ///
        /// The product price uses the price of the first program in XPGGPPRGRPOSITION index.
        /// </summary>
        [Column("PGGPPOSITION")]
        [Required]
        public int Position { get; set; }

        /// <summary>
        /// <para>TPRGGRPS.PGGPPREKEYID</para>
        /// Ref. to a program recipe, if machine model uses recipes.
        /// </summary>
        [Column("PGGPPREKEYID")]
        public int? PreKeyId { get; set; }

        /// <summary>
        /// <para>TPRGGRPS.PGGPPRGRKEYID</para>
        /// Ref. to the &quot;owner&quot; (the program group this record belongs to).
        /// </summary>
        [Column("PGGPPRGRKEYID")]
        [Required]
        public int PrgrKeyId { get; set; }

        /// <summary>
        /// <para>TPRGGRPS.PGGPPROGKEYID</para>
        /// Ref. to the program.
        /// </summary>
        [Column("PGGPPROGKEYID")]
        [Required]
        public int ProgKeyId { get; set; }

        /// <summary>
        /// <para>TPRGGRPS.PGGPSEQUENCE</para>
        /// This field is used to control if several programs in a group are required and if so in what order they are required.
        ///
        /// Example:
        /// The group contains the programs listed below. The units must first be either handwashed or put in the ultrasonic and subsequently washed in the standard washer.
        ///
        /// Program name    Sequence
        /// Handwash P1        1
        /// Handwash P2        1
        /// Ultrasonic P1      1
        /// Washer P1          2
        /// Washer P3          2
        /// Washer P9          2
        /// </summary>
        [Column("PGGPSEQUENCE")]
        public int? Sequence { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a ProgramGroupModel instance.
        /// <para />
        /// Foreign key: PrgrKeyId -> ProgramGroupModel.KeyId (TPRGGRPS.PGGPPRGRKEYID -> TPROGGRP.PRGRKEYID)
        /// </summary>
        [ForeignKey(nameof(PrgrKeyId))]
        public ProgramGroupModel Prgr { get; set; }

        /// <summary>
        /// Reference to a ProgramModel instance.
        /// <para />
        /// Foreign key: ProgKeyId -> ProgramModel.KeyId (TPRGGRPS.PGGPPROGKEYID -> TPROGRAM.PROGKEYID)
        /// </summary>
        [ForeignKey(nameof(ProgKeyId))]
        public ProgramModel Prog { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TROOM table.
    /// This table holds the operating rooms/theaters.
    /// </summary>
    [Table("TROOM")]
    public class RoomModel
    {
        /// <summary>
        /// <para>TROOM.ROOMKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("ROOMKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMARRIVEDLGRPKEYID</para>
        /// Location group reference.
        /// </summary>
        [Column("ROOMARRIVEDLGRPKEYID")]
        public int? ArrivedLGrpKeyId { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMAVAILABLELGRPKEYID</para>
        /// Location group reference.
        /// </summary>
        [Column("ROOMAVAILABLELGRPKEYID")]
        public int? AvailableLGrpKeyId { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMBARCODE</para>
        /// The primary external barcode for the room. When set a record must also be created in TBARCODE.
        ///
        /// Additional external barcodes may be defined in TBARCODE.
        /// </summary>
        [Column("ROOMBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMBLOCKORDERCREATION</para>
        /// If True then block creation of operation-based orders from preference lists, if the operation takes place in this room.
        /// </summary>
        [Column("ROOMBLOCKORDERCREATION")]
        public bool? BlockOrderCreation { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMCALKEYID</para>
        /// A reference to the calendar. Define calendar of work hours for the room.
        ///
        /// Do not use yet.
        /// </summary>
        [Column("ROOMCALKEYID")]
        public int? CalKeyId { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMDELGLN</para>
        /// </summary>
        [Column("ROOMDELGLN")]
        [MaxLength(50)]
        public string DelGln { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMDESC</para>
        /// A longer, descriptive text.
        /// </summary>
        [Column("ROOMDESC")]
        public string Desc { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMGLN</para>
        /// </summary>
        [Column("ROOMGLN")]
        [MaxLength(50)]
        public string Gln { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMID</para>
        /// The ID/short name of the room.
        /// </summary>
        [Column("ROOMID")]
        [Required, MaxLength(40)]
        public string Id { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMNAME</para>
        /// The name of the room.
        /// </summary>
        [Column("ROOMNAME")]
        [MaxLength(60)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMSTATUS</para>
        /// Indicates the status of the room. Valid values are:
        ///
        ///   stNormal = 10
        ///   stDead   = 90
        /// </summary>
        [Column("ROOMSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMSTGRKEYID</para>
        /// </summary>
        [Column("ROOMSTGRKEYID")]
        public int? StGrKeyId { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMSTOKKEYID</para>
        /// </summary>
        [Column("ROOMSTOKKEYID")]
        public int? StokKeyId { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF01</para>
        /// </summary>
        [Column("ROOMUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF02</para>
        /// </summary>
        [Column("ROOMUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF03</para>
        /// </summary>
        [Column("ROOMUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF04</para>
        /// </summary>
        [Column("ROOMUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF05</para>
        /// </summary>
        [Column("ROOMUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF06</para>
        /// </summary>
        [Column("ROOMUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF07</para>
        /// </summary>
        [Column("ROOMUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF08</para>
        /// </summary>
        [Column("ROOMUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF09</para>
        /// </summary>
        [Column("ROOMUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF10</para>
        /// </summary>
        [Column("ROOMUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF11</para>
        /// </summary>
        [Column("ROOMUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF12</para>
        /// </summary>
        [Column("ROOMUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF13</para>
        /// </summary>
        [Column("ROOMUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF14</para>
        /// </summary>
        [Column("ROOMUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF15</para>
        /// </summary>
        [Column("ROOMUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF16</para>
        /// </summary>
        [Column("ROOMUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF17</para>
        /// </summary>
        [Column("ROOMUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF18</para>
        /// </summary>
        [Column("ROOMUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF19</para>
        /// </summary>
        [Column("ROOMUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TROOM.ROOMUF20</para>
        /// </summary>
        [Column("ROOMUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: StokKeyId -> StocksModel.KeyId (TROOM.ROOMSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(StokKeyId))]
        public StocksModel Stok { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of OperationDataModel instances.
        /// <para />
        /// Foreign key: OperationDataModel.RoomKeyId -> KeyId (TOPDATA.OPDROOMKEYID -> TROOM.ROOMKEYID)
        /// </summary>
        [InverseProperty("Room")]
        public List<OperationDataModel> RoomOperationDataList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TSERIAL table.
    /// </summary>
    [Table("TSERIAL")]
    public class SerialModel
    {
        /// <summary>
        /// <para>TSERIAL.SERIKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("SERIKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERI_CREATED</para>
        /// </summary>
        [Column("SERI_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERI_CREATEDKEYID</para>
        /// </summary>
        [Column("SERI_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERI_MODIFIED</para>
        /// </summary>
        [Column("SERI_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERI_MODIFIEDKEYID</para>
        /// </summary>
        [Column("SERI_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIBARCODE</para>
        /// The barcode number used to represent the serial number in SeriSerialNo.
        ///
        /// This number is unique within the WHOLE system.
        ///
        /// If the barcode is a non-TDOC barcode and/or in a different barcode system than Interleave2Of5 then special settings has be made in the TDOC.INI file !!!
        /// </summary>
        [Column("SERIBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIDISPATCHRESTRICT</para>
        /// </summary>
        [Column("SERIDISPATCHRESTRICT")]
        public int? DispatchRestrict { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIEXTLOANERID</para>
        /// </summary>
        [Column("SERIEXTLOANERID")]
        [MaxLength(100)]
        public string ExtLoanerId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIEXTNAME</para>
        /// </summary>
        [Column("SERIEXTNAME")]
        [MaxLength(200)]
        public string ExtName { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIFTCOKEYID</para>
        /// KeyID of the fast track code assigned to this serial number (if any).
        /// </summary>
        [Column("SERIFTCOKEYID")]
        public int? FTCoKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIFTPLKEYID</para>
        /// KeyID of the fast track plan assigned to this serial number (if any).
        /// </summary>
        [Column("SERIFTPLKEYID")]
        public int? FTPlKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIFTTMPKEYID</para>
        /// KeyID of the fast track template assigned to this serial number (if any).
        /// </summary>
        [Column("SERIFTTMPKEYID")]
        public int? FTTmpKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIHATKEYID</para>
        /// Reference to Handling type (Group of Handling steps), to be used for endoscopes
        /// </summary>
        [Column("SERIHATKEYID")]
        public int? HatKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERILMPROKEYID</para>
        /// </summary>
        [Column("SERILMPROKEYID")]
        public int? LMProKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERILOCAKEYID</para>
        /// The location where the serial number was last scanned
        /// </summary>
        [Column("SERILOCAKEYID")]
        public int? LocaKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIMANUFACTSERIALNUMBER</para>
        /// The serial number issued by the manufacturer.
        ///
        /// Only visible if FACEQUIPMENTUSAGE=true
        /// </summary>
        [Column("SERIMANUFACTSERIALNUMBER")]
        [MaxLength(40)]
        public string Manufactserialnumber { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERINAME</para>
        /// </summary>
        [Column("SERINAME")]
        [MaxLength(200)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIOWNERCUSITEKEYID</para>
        /// </summary>
        [Column("SERIOWNERCUSITEKEYID")]
        public int? OwnerCuSiteKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIOWNERCUSTKEYID</para>
        /// Replacing SeriOwnerKeyID + SeriOwnerType.
        ///
        /// This field holds a potential Owner of the instrument. SeriOwnerType determines in which table to find the owner.
        ///
        /// There can only be a owner if SeriRefItemKeyID has a value (SeriType is taItem).
        /// </summary>
        [Column("SERIOWNERCUSTKEYID")]
        public int? OwnerCustKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIOWNERFACKEYID</para>
        /// Replacing SeriOwnerKeyID + SeriOwnerType.
        /// </summary>
        [Column("SERIOWNERFACKEYID")]
        public int? OwnerFacKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIOWNERSUPPKEYID</para>
        /// Replacing SeriOwnerKeyID + SeriOwnerType.
        /// </summary>
        [Column("SERIOWNERSUPPKEYID")]
        public int? OwnerSuppKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIPACKKEYID</para>
        /// Only used when the serial number is for a product. Used to specify a different packing material for this particular serial number, than the material specified on the product.
        /// </summary>
        [Column("SERIPACKKEYID")]
        public int? PackKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIPURCHASEDATE</para>
        /// Only visible if FACEQUIPMENTUSAGE=true
        /// </summary>
        [Column("SERIPURCHASEDATE", TypeName = "datetime")]
        public DateTime? PurchaseDate { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIPURCHASEORDNO</para>
        /// Only visible if FACEQUIPMENTUSAGE=true
        /// </summary>
        [Column("SERIPURCHASEORDNO")]
        [MaxLength(40)]
        public string PurchaseOrdNo { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIPURCHASEPRICE</para>
        /// Only visible if FACEQUIPMENTUSAGE=true
        /// </summary>
        [Column("SERIPURCHASEPRICE", TypeName = "Money")]
        public decimal? PurchasePrice { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIPURCHASETIME</para>
        /// The date this particular item was purchased.
        ///
        /// Only used when SeriRefItemKeyID&lt;&gt;null (SeriType=taItem) or when FACEQUIPMENTUSAGE=true
        ///
        /// Not used by the system. Information only.
        /// </summary>
        [Column("SERIPURCHASETIME", TypeName = "datetime")]
        public DateTime? PurchaseTime { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIREFITEMKEYID</para>
        /// Replacing SeriFatherKeyID + SeriType.
        ///
        /// This field has a value if the serial number belongs to an item.
        /// </summary>
        [Column("SERIREFITEMKEYID")]
        public int? RefItemKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIREFPREKEYID</para>
        /// Replacing SeriFatherKeyID + SeriType
        ///
        /// This field has a value if the serial number belongs to a program recipe.
        /// </summary>
        [Column("SERIREFPREKEYID")]
        public int? RefPReKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIREFPRODKEYID</para>
        /// Replacing SeriFatherKeyID + SeriType
        ///
        /// This field has a value if the serial number belongs to a product.
        /// </summary>
        [Column("SERIREFPRODKEYID")]
        public int? RefProdKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIREFPROGKEYID</para>
        /// Replacing SeriFatherKeyID + SeriType
        ///
        /// This field has a value if the serial number belongs to a program.
        /// </summary>
        [Column("SERIREFPROGKEYID")]
        public int? RefProgKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIREMARK</para>
        /// A remark for the serial number
        /// </summary>
        [Column("SERIREMARK")]
        public string Remark { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERISERIALNO</para>
        /// The actual serial number on the Item/Product.
        ///
        /// The number has to be unique for the Item/Product.
        /// </summary>
        [Column("SERISERIALNO")]
        [Required, MaxLength(40)]
        public string SerialNo { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERISTATUS</para>
        /// The status of the serial number. Valid values are:
        ///
        ///   stNormal = 10
        ///   stDead   = 90
        /// </summary>
        [Column("SERISTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERISTOCKPLACEMENT</para>
        /// </summary>
        [Column("SERISTOCKPLACEMENT")]
        [MaxLength(40)]
        public string Stockplacement { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERISTOKKEYID</para>
        /// The stock where the serial number is currently &quot;in stock&quot;. ie. the stock that is &quot;responsible&quot; for the serial number.
        /// </summary>
        [Column("SERISTOKKEYID")]
        public int? StokKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERISUPPKEYID</para>
        /// The supplier this particular item was purchased from.
        ///
        /// Only used when SeriRefItemKeyID&lt;&gt;null (SeriType=taItem) or when FACEQUIPMENTUSAGE=true
        /// </summary>
        [Column("SERISUPPKEYID")]
        public int? SuppKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERITRGRPKEYID</para>
        /// </summary>
        [Column("SERITRGRPKEYID")]
        public int? TRGrpKeyId { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF01</para>
        /// </summary>
        [Column("SERIUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF02</para>
        /// </summary>
        [Column("SERIUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF03</para>
        /// </summary>
        [Column("SERIUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF04</para>
        /// </summary>
        [Column("SERIUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF05</para>
        /// </summary>
        [Column("SERIUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF06</para>
        /// </summary>
        [Column("SERIUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF07</para>
        /// </summary>
        [Column("SERIUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF08</para>
        /// </summary>
        [Column("SERIUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF09</para>
        /// </summary>
        [Column("SERIUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF10</para>
        /// </summary>
        [Column("SERIUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF11</para>
        /// </summary>
        [Column("SERIUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF12</para>
        /// </summary>
        [Column("SERIUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF13</para>
        /// </summary>
        [Column("SERIUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF14</para>
        /// </summary>
        [Column("SERIUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF15</para>
        /// </summary>
        [Column("SERIUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF16</para>
        /// </summary>
        [Column("SERIUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF17</para>
        /// </summary>
        [Column("SERIUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF18</para>
        /// </summary>
        [Column("SERIUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF19</para>
        /// </summary>
        [Column("SERIUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUF20</para>
        /// </summary>
        [Column("SERIUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUNITUNIT</para>
        /// Replacing SeriRefNo.
        ///
        /// for SeriRefProdKeyID&lt;&gt;null (SERITYPE=taProduct)  -&gt; Current Unit number
        /// </summary>
        [Column("SERIUNITUNIT")]
        public int? UnitUnit { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIUSAGECOUNT</para>
        /// The number of times the serial number has been used.
        ///
        /// Currently only valid when SeriRefPredKeyID&lt;&gt;null (SeriType=taProduct).
        /// </summary>
        [Column("SERIUSAGECOUNT")]
        public int? UsageCount { get; set; }

        /// <summary>
        /// <para>TSERIAL.SERIWEIGHT</para>
        /// </summary>
        [Column("SERIWEIGHT")]
        public int? Weight { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TSERIAL.SERI_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a FastTrackCodeModel instance.
        /// <para />
        /// Foreign key: FTCoKeyId -> FastTrackCodeModel.KeyId (TSERIAL.SERIFTCOKEYID -> TFASTTRACKCODE.FTCOKEYID)
        /// </summary>
        [ForeignKey(nameof(FTCoKeyId))]
        public FastTrackCodeModel FTCo { get; set; }

        /// <summary>
        /// Reference to a FastTrackPlanModel instance.
        /// <para />
        /// Foreign key: FTPlKeyId -> FastTrackPlanModel.KeyId (TSERIAL.SERIFTPLKEYID -> TFASTTRACKPLAN.FTPLKEYID)
        /// </summary>
        [ForeignKey(nameof(FTPlKeyId))]
        public FastTrackPlanModel FTPl { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TSERIAL.SERILOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TSERIAL.SERI_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: OwnerCustKeyId -> CustomerModel.KeyId (TSERIAL.SERIOWNERCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(OwnerCustKeyId))]
        public CustomerModel OwnerCust { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: OwnerFacKeyId -> FactoryModel.KeyId (TSERIAL.SERIOWNERFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(OwnerFacKeyId))]
        public FactoryModel OwnerFac { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: OwnerSuppKeyId -> SupplierModel.KeyId (TSERIAL.SERIOWNERSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(OwnerSuppKeyId))]
        public SupplierModel OwnerSupp { get; set; }

        /// <summary>
        /// Reference to a PackingModel instance.
        /// <para />
        /// Foreign key: PackKeyId -> PackingModel.KeyId (TSERIAL.SERIPACKKEYID -> TPACKING.PACKKEYID)
        /// </summary>
        [ForeignKey(nameof(PackKeyId))]
        public PackingModel Pack { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: RefItemKeyId -> ItemModel.KeyId (TSERIAL.SERIREFITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(RefItemKeyId))]
        public ItemModel RefItem { get; set; }

        /// <summary>
        /// Reference to a ProductModel instance.
        /// <para />
        /// Foreign key: RefProdKeyId -> ProductModel.KeyId (TSERIAL.SERIREFPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [ForeignKey(nameof(RefProdKeyId))]
        public ProductModel RefProd { get; set; }

        /// <summary>
        /// Reference to a ProgramModel instance.
        /// <para />
        /// Foreign key: RefProgKeyId -> ProgramModel.KeyId (TSERIAL.SERIREFPROGKEYID -> TPROGRAM.PROGKEYID)
        /// </summary>
        [ForeignKey(nameof(RefProgKeyId))]
        public ProgramModel RefProg { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: StokKeyId -> StocksModel.KeyId (TSERIAL.SERISTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(StokKeyId))]
        public StocksModel Stok { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: SuppKeyId -> SupplierModel.KeyId (TSERIAL.SERISUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppKeyId))]
        public SupplierModel Supp { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: UnitUnit -> UnitModel.KeyId (TSERIAL.SERIUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(UnitUnit))]
        public UnitModel UnitUnitUnit { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of EventModel instances.
        /// <para />
        /// Foreign key: EventModel.RefKeyId -> KeyId (TEVENT.EVNTREFKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [InverseProperty("RefSerial")]
        public List<EventModel> RefSerialEventList { get; set; }

        /// <summary>
        /// Reference to a collection of PatientConsModel instances.
        /// <para />
        /// Foreign key: PatientConsModel.RefSeriKeyId -> KeyId (TPATCONS.PATCOREFSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [InverseProperty("RefSeri")]
        public List<PatientConsModel> RefSeriPatientConsList { get; set; }

        /// <summary>
        /// Reference to a collection of PictureRefModel instances.
        /// <para />
        /// Foreign key: PictureRefModel.RefseriKeyId -> KeyId (TPICTREF.PICTREFSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [InverseProperty("Refseri")]
        public List<PictureRefModel> RefseriPictureRefList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitListModel instances.
        /// <para />
        /// Foreign key: UnitListModel.RefSeriKeyId -> KeyId (TUNITLST.ULSTREFSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [InverseProperty("RefSeri")]
        public List<UnitListModel> RefSeriUnitListList { get; set; }

        /// <summary>
        /// Reference to a collection of ExtDocRefLinkModel instances.
        /// <para />
        /// Foreign key: ExtDocRefLinkModel.SeriKeyId -> KeyId (TEXTDOCREFLINK.EDRLSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [InverseProperty("Seri")]
        public List<ExtDocRefLinkModel> SeriExtDocRefLinkList { get; set; }

        /// <summary>
        /// Reference to a collection of ProductReservationModel instances.
        /// <para />
        /// Foreign key: ProductReservationModel.SeriKeyId -> KeyId (TPRODRESERVATION.PRESVSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [InverseProperty("Seri")]
        public List<ProductReservationModel> SeriProductReservationList { get; set; }

        /// <summary>
        /// Reference to a collection of TagContentModel instances.
        /// <para />
        /// Foreign key: TagContentModel.SeriKeyId -> KeyId (TTAGCONTENT.TAGCSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [InverseProperty("Seri")]
        public List<TagContentModel> SeriTagContentList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TSTANDARDCOMMENT table.
    /// This table stores all defined standard comments.
    ///
    /// The comment with STDCOMKEYID=1 is special in that it represents comments added to a unit without actually selection a standard comment. In other words records in TSTANDARDCOMMENTLINK that point to this special standard comment are really custom/free text comments.
    /// </summary>
    [Table("TSTANDARDCOMMENT")]
    public class StandardCommentModel
    {
        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOMKEYID</para>
        /// KeyID (Primary key).
        /// KEYID = 1 is reserved for free text comments.
        /// </summary>
        [Column("STDCOMKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOM_CREATED</para>
        /// </summary>
        [Column("STDCOM_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOM_CREATEDKEYID</para>
        /// </summary>
        [Column("STDCOM_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOM_MODIFIED</para>
        /// </summary>
        [Column("STDCOM_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOM_MODIFIEDKEYID</para>
        /// </summary>
        [Column("STDCOM_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOMCOMMENTOPTION</para>
        /// Determines if the user is allowed to add additional text to the standard comment text itself.
        ///
        /// Possible values (TStdCommentFreeTextOption):
        /// 0.	Not allowed
        /// 1.	Allowed
        /// 2.	Required
        /// </summary>
        [Column("STDCOMCOMMENTOPTION")]
        [Required]
        public StdCommentFreeTextOption CommentOption { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOMFACKEYID</para>
        /// If the standard comment is factory bound then this field holds the primary factory of the standard comment. NULL value indicates that the standard comment is not factory bound.
        /// </summary>
        [Column("STDCOMFACKEYID")]
        public int? FacKeyId { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOMID</para>
        /// The &quot;number&quot;/ID of the comment.
        /// </summary>
        [Column("STDCOMID")]
        [Required, MaxLength(20)]
        public string Id { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOMLOCPROCESSES</para>
        /// 64 bit field indicating location processes where the standard comment will be available.
        /// Each bit represents a location process type where the comment can be used.
        /// The ordinal bit positions map to the same process types as those stored in the TLOCATIO.LOCAPROCESS field.
        ///
        /// Mapping: 0 and FFFFFFFF = all
        /// First enum value corresponds to bit 0 and ptLast to bit ptLast.
        /// </summary>
        [Column("STDCOMLOCPROCESSES")]
        [Required]
        public long LocProcesses { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOMNAME</para>
        /// The actual standard comment.
        /// </summary>
        [Column("STDCOMNAME")]
        [Required, MaxLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOMREMARK</para>
        /// A remark for the comment.
        /// </summary>
        [Column("STDCOMREMARK")]
        public string Remark { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOMSHOWINPRODUCTION</para>
        /// Determines is the comment will be shown in production or not.
        /// Comments that are not shown in production can be used to record incident type comments to a unit.
        ///
        /// Valid values are:
        /// 0 = No
        /// 1 = Yes
        /// </summary>
        [Column("STDCOMSHOWINPRODUCTION")]
        [Required]
        public StdCommentShowInProdOption ShowInProduction { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENT.STDCOMSTATUS</para>
        /// The status of the standard comment. Valid values are:
        ///
        ///   stNormal = 10
        ///   stDead   = 90
        /// </summary>
        [Column("STDCOMSTATUS")]
        [Required]
        public int Status { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TSTANDARDCOMMENT.STDCOM_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TSTANDARDCOMMENT.STDCOMFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TSTANDARDCOMMENT.STDCOM_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TSTANDARDCOMMENTLINK table.
    /// Links standard and custom comments to unit.
    /// </summary>
    [Table("TSTANDARDCOMMENTLINK")]
    public class StandardCommentLinkModel
    {
        /// <summary>
        /// <para>TSTANDARDCOMMENTLINK.SCLNKAUTOINC</para>
        /// The &quot;fake&quot; KeyID of the record. The field is an SQL IDENTITY field and not a T-DOC type KeyID.
        /// The field is still marked as a T-DOC KeyID field as the report engine needs this in order to print &quot;comment&quot; labels properly.
        /// </summary>
        [Column("SCLNKAUTOINC")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENTLINK.SCLNKACKTIME</para>
        /// The time when the comment was acknowledged (i.e. a user clicked &quot;do not show again&quot;).
        /// </summary>
        [Column("SCLNKACKTIME", TypeName = "datetime")]
        public DateTime? AckTime { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENTLINK.SCLNKACKUSERKEYID</para>
        /// Link to user who acknowledged the comment (i.e. user who clicked &quot;do not show again&quot;).
        /// </summary>
        [Column("SCLNKACKUSERKEYID")]
        public int? AckUserKeyId { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENTLINK.SCLNKCOMBINEDTEXT</para>
        /// This is a computed field.
        ///
        /// It combines the SCLNKSTDTEXT and SCLNKTEXT fields. If SCLNKSTDTEXT is not an empty string a line break is inserted between the two fields.
        ///
        /// NOTE: This field is primarilly needed in order to print labels using the native ZPL driver as this does not support advanced SQL features.
        /// </summary>
        [Column("SCLNKCOMBINEDTEXT")]
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public string CombinedText { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENTLINK.SCLNKLOCAKEYID</para>
        /// Link to the location where the comment was added.
        /// </summary>
        [Column("SCLNKLOCAKEYID")]
        [Required]
        public int LocaKeyId { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENTLINK.SCLNKSTDCOMKEYID</para>
        /// Link to the standard comment.
        /// </summary>
        [Column("SCLNKSTDCOMKEYID")]
        [Required]
        public int StdComKeyId { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENTLINK.SCLNKSTDTEXT</para>
        /// This column holds the text of the linked standard comment as it was at the time the record was created.
        /// So the content of STDCOMNAME for the standard comment linked in SCLNKSTDCOMKEYID is copied to this column.
        ///
        /// NOTE: If SCLNKSTDCOMKEYID = 1 then this column will be NULL as STDCOMKEYID 1 means that the comment is really not a standard comment but a custom one.
        /// </summary>
        [Column("SCLNKSTDTEXT")]
        [MaxLength(100)]
        public string StdText { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENTLINK.SCLNKTEXT</para>
        /// Additional text that can be entered by user when the standard comment is assigned to the Unit.
        /// </summary>
        [Column("SCLNKTEXT")]
        public string Text { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENTLINK.SCLNKTIMEADDED</para>
        /// The time the comment was added.
        /// </summary>
        [Column("SCLNKTIMEADDED", TypeName = "datetime")]
        [Required]
        public DateTime TimeAdded { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENTLINK.SCLNKUNITUNIT</para>
        /// A link to the Unit the comment pertains to.
        /// </summary>
        [Column("SCLNKUNITUNIT")]
        [Required]
        public int UnitUnit { get; set; }

        /// <summary>
        /// <para>TSTANDARDCOMMENTLINK.SCLNKUSERKEYID</para>
        /// Link to the user that added the comment.
        /// </summary>
        [Column("SCLNKUSERKEYID")]
        public int? UserKeyId { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: AckUserKeyId -> UserModel.KeyId (TSTANDARDCOMMENTLINK.SCLNKACKUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(AckUserKeyId))]
        public UserModel AckUser { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TSTANDARDCOMMENTLINK.SCLNKLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a StandardCommentModel instance.
        /// <para />
        /// Foreign key: StdComKeyId -> StandardCommentModel.KeyId (TSTANDARDCOMMENTLINK.SCLNKSTDCOMKEYID -> TSTANDARDCOMMENT.STDCOMKEYID)
        /// </summary>
        [ForeignKey(nameof(StdComKeyId))]
        public StandardCommentModel StdCom { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: UnitUnit -> UnitModel.KeyId (TSTANDARDCOMMENTLINK.SCLNKUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(UnitUnit))]
        public UnitModel UnitUnitUnit { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: UserKeyId -> UserModel.KeyId (TSTANDARDCOMMENTLINK.SCLNKUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(UserKeyId))]
        public UserModel User { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TSTOCKS table.
    /// This table holds ALL stocks used by the system. The stock type is determined by StokType.
    ///
    /// Stocks for External Suppliers (StokOwnerType=taSupplier) are NOT supported !
    /// </summary>
    [Table("TSTOCKS")]
    public class StocksModel
    {
        /// <summary>
        /// <para>TSTOCKS.STOKKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("STOKKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKALLOWITEMS</para>
        /// </summary>
        [Column("STOKALLOWITEMS")]
        [Required]
        public bool AllowItems { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKALLOWNEGCOUNT</para>
        /// </summary>
        [Column("STOKALLOWNEGCOUNT")]
        [Required]
        public bool AllowNegCount { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKALLOWPRODUCTS</para>
        /// </summary>
        [Column("STOKALLOWPRODUCTS")]
        [Required]
        public bool AllowProducts { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKAUTOMATIONMODE</para>
        /// </summary>
        [Column("STOKAUTOMATIONMODE")]
        public int? AutomationMode { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKAUTOREORDER</para>
        /// If true automatic orders are sent to approval whenever the reordering level is reached for any given item/product.
        /// </summary>
        [Column("STOKAUTOREORDER")]
        [Required]
        public bool AutoReorder { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKBARCODE</para>
        /// </summary>
        [Column("STOKBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKBOINMODE</para>
        /// This field determines how a potential backorder for an ingoing order is handled.
        ///
        /// The setting has no effect in the following cases:
        ///   1. There is no difference between whats ordered and delivered.
        ///   2. When set on a stock that belongs to an external supplier
        ///      (it does not make sense to have such a stock but it&#39;s possible)
        ///
        /// TStockBackOrderMode:
        ///   Never       = Backorders are never created
        ///   Always      = Backorders are always created. Difference is automatically
        ///                    calculated for lines not filled in.
        ///   Ask         = In Filer the user is asked if a backorder is wanted at all.
        ///                    If it is wanted and some lines are filled in manually the user
        ///                    is also asked if the rest should be filled in automatically.
        ///                    NOTE: In scanner the same as Never.
        ///   WhenSet     = Backorders are created if some lines are manually filled but only
        ///                    for those lines.
        ///   WhenSetAuto = Same as WhenSet but if only some lines are set the rest
        ///                    are calculated automatically.
        /// Default is Ask. ???????
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Never       = 0
        ///   Always      = 1
        ///   Ask         = 2
        ///   WhenSet     = 3
        ///   WhenSetAuto = 4
        /// ********************************************************************************
        /// </summary>
        [Column("STOKBOINMODE")]
        public StockBackOrderMode? BOInMode { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKBOOUTMODE</para>
        /// This field determines how a potential backorder for an outgoing order is handled when
        /// the outgoing order is received back at the originator.
        ///
        /// The setting has no effect in the following cases:
        ///   1. There is no difference between whats ordered and delivered.
        ///   2. When set on a stock that belongs to an external supplier
        ///      (it does not make sense to have such a stock but it&#39;s possible)
        ///   3. When the supplying stock belongs to an internal T-DOC supplier.
        ///      In this case the STOKBOINMODE of that stock takes precedence.
        ///
        /// TStockBackOrderMode:
        ///   Never       = Backorders are never created
        ///   Always      = Backorders are always created. Difference is automatically
        ///                    calculated for lines not filled in.
        ///   Ask         = In Filer the user is asked if a backorder is wanted at all.
        ///                    If it is wanted and some lines are filled in manually the user
        ///                    is also asked if the rest should be filled in automatically.
        ///                    If none are filled manually and the user wants a backorder
        ///                    all lines are filled automatically.
        ///                    NOTE: In scanner the same as Never.
        ///   WhenSet     = Backorders are created if some lines are manually filled but only
        ///                    for those lines.
        ///   WhenSetAuto = Same as WhenSet but if only some lines are set the rest
        ///                    are calculated automatically.
        /// Default is Ask. ???????
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Never       = 0
        ///   Always      = 1
        ///   Ask         = 2
        ///   WhenSet     = 3
        ///   WhenSetAuto = 4
        /// ********************************************************************************
        /// </summary>
        [Column("STOKBOOUTMODE")]
        public StockBackOrderMode? BOOutMode { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKDEFIDENTLINEUSAGE</para>
        /// Determines if identical usage for the stock is allowed.
        /// Default value: isuDefault.
        /// Enumeration values (TIdentStockUsage): isuDefault, isuEnabled, isuDisabled.
        /// </summary>
        [Column("STOKDEFIDENTLINEUSAGE")]
        [Required]
        public int DefIdentLineUsage { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKDESCR</para>
        /// A user defined description of the stock
        /// </summary>
        [Column("STOKDESCR")]
        public string Descr { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKDROPITEMSUPPONSUGG</para>
        /// </summary>
        [Column("STOKDROPITEMSUPPONSUGG")]
        [Required]
        public bool DropItemSuppOnSugg { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKEMGCTKEYID</para>
        /// A reference to the Emergency Case Cart type (TEMGCASECARTTYPE) the stock is representing.
        ///
        /// Only used if STOKTYPE = stkMobile.
        /// </summary>
        [Column("STOKEMGCTKEYID")]
        public int? EmgCTKeyId { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKFACKEYID</para>
        /// A link to TFactory indicating the default supplier of all Products to this stock. (In this case Products very specifically means records in TStock with StoRefType=taProduct)
        /// </summary>
        [Column("STOKFACKEYID")]
        [Required]
        public int FacKeyId { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKISTRACESTOCK</para>
        /// </summary>
        [Column("STOKISTRACESTOCK")]
        [Required]
        public bool IsTracestock { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKISTRANSITSTOCK</para>
        /// </summary>
        [Column("STOKISTRANSITSTOCK")]
        [Required]
        public bool IsTransitStock { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKLOCAKEYID</para>
        /// stkFactory,stkCust,stkSupplier:
        ///   not used
        ///
        /// stkMobile:
        ///   StokLocaKeyID holds the mobile stocks last known position.
        ///   If StokLocaKeyID=0 then the mobile stock is assumed to be at &quot;home&quot; with the owner.
        /// </summary>
        [Column("STOKLOCAKEYID")]
        public int? LocaKeyId { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKNAME</para>
        /// The name of the stock
        /// </summary>
        [Column("STOKNAME")]
        [Required, MaxLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKOPTKEYID</para>
        /// A reference to the Operation type the standard stock content is based on/synchronized with.
        /// Can only be set for mobile stocks.
        ///
        /// The field is currently experimental.
        /// </summary>
        [Column("STOKOPTKEYID")]
        public int? OpTKeyId { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKORDERINMODE</para>
        /// Determines what kind of handling is expected at the receiving stock when the dispatching stock is a Factory or internal supplier.
        ///
        /// TStokOrderInMode
        ///   Auto=The order is completed when dispatched. (default)
        ///   Receive=Goods are considered received when dispatched from Factory/Supplier
        ///   Manual=Receiving stock must manually register goods as received
        ///
        /// The value actually determines the resulting OrdOrgStatus for the order.
        /// Since all orders where OrdSupp is a Factory or internal supplier has NO option to manually change OrdOrgStatus from oosReceived to oosDone the setting Receive will act as Auto in these cases.
        /// In other words when goods are moved internally the price is fixed between stocks.
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Auto    = 0
        ///   Receive = 1
        ///   Manual  = 2
        /// ********************************************************************************
        /// </summary>
        [Column("STOKORDERINMODE")]
        public StockOrderInMode? OrderInMode { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKPLACEMENTMASK</para>
        /// </summary>
        [Column("STOKPLACEMENTMASK")]
        [MaxLength(60)]
        public string PlacementMask { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKPRNBACKORDER</para>
        /// </summary>
        [Column("STOKPRNBACKORDER")]
        public int? PrnBackOrder { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKPRNCOMPLETEDORDER</para>
        /// </summary>
        [Column("STOKPRNCOMPLETEDORDER")]
        public int? PrnCompletedOrder { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKPRNCONFIRMATION</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Never  = 0
        ///   Always = 1
        ///   Ask    = 2
        /// ********************************************************************************
        /// </summary>
        [Column("STOKPRNCONFIRMATION")]
        public StockPrnMode? PrnConfirmation { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKPRNDELIVERY</para>
        /// This field determines when delivery notes are printed automatically.
        ///
        /// TStockPrnMode:
        ///   Never  = Notes are never printed
        ///   Always = Notes are always printed
        ///   Ask    = In Filer the user is asked. In scanner the same as sbmNever.
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Never  = 0
        ///   Always = 1
        ///   Ask    = 2
        /// ********************************************************************************
        /// </summary>
        [Column("STOKPRNDELIVERY")]
        public StockPrnMode? PrnDelivery { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKPRNPICKLIST</para>
        /// </summary>
        [Column("STOKPRNPICKLIST")]
        public int? PrnPicklist { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKPRNRECEIVEDORDER</para>
        /// </summary>
        [Column("STOKPRNRECEIVEDORDER")]
        public int? PrnReceivedOrder { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKPRNSENTORDER</para>
        /// This field determines when purchase orders are printed automatically.
        ///
        /// TStockPrnMode:
        ///   Never  = Order are never printed
        ///   Always = Order are always printed
        ///   Ask    = In Filer the user is asked. In scanner the same as sbmNever.
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Never  = 0
        ///   Always = 1
        ///   Ask    = 2
        /// ********************************************************************************
        /// </summary>
        [Column("STOKPRNSENTORDER")]
        public StockPrnMode? PrnSentOrder { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKREFCUSTKEYID</para>
        /// Replacing StokOwnerKeyID + StokOwnerType.
        ///
        /// Depending on the value of StokType this field can hold one of the follwoing values:
        ///
        /// stkFactory: the actual FacKeyID
        /// stkCust: the actual CustKeyID
        /// stkSupplier: the actual SuppKeyID
        /// stkMobile: the actual CustKeyID or FacKeyID
        /// </summary>
        [Column("STOKREFCUSTKEYID")]
        public int? RefCustKeyId { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKREFFACKEYID</para>
        /// Replacing StokOwnerKeyID + StokOwnerType.
        /// </summary>
        [Column("STOKREFFACKEYID")]
        public int? RefFacKeyId { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKREFSUPPKEYID</para>
        /// Replacing StokOwnerKeyID + StokOwnerType.
        /// </summary>
        [Column("STOKREFSUPPKEYID")]
        public int? RefSuppKeyId { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKSTATUS</para>
        /// </summary>
        [Column("STOKSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKSTOCK</para>
        /// The number/shortname of the stock
        /// </summary>
        [Column("STOKSTOCK")]
        [Required, MaxLength(20)]
        public string Stock { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKSUPPREFFACKEYID</para>
        /// Replacing StokSuppKeyID + StokSuppType.
        ///
        /// A link to TSupplie/TFactory indicating the default supplier of all Items to this stock. (In this case Items very specifically means records in TStock with StoRefType=taItem)
        ///
        /// If 0 or Null ALL records in TStkStat must have a valid supplier in StStaSuppKeyID
        /// </summary>
        [Column("STOKSUPPREFFACKEYID")]
        public int? SuppRefFacKeyId { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKSUPPREFSUPPKEYID</para>
        /// Replacing StokSuppKeyID + StokSuppType.
        /// </summary>
        [Column("STOKSUPPREFSUPPKEYID")]
        public int? SuppRefSuppKeyId { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKTYPE</para>
        /// This field determines what kind/type of stock the stock is. The following values are valid:
        ///
        /// stkFactory, stkCust, stkSupplier, stkMobile
        /// </summary>
        [Column("STOKTYPE")]
        [Required]
        public int Type { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF01</para>
        /// </summary>
        [Column("STOKUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF02</para>
        /// </summary>
        [Column("STOKUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF03</para>
        /// </summary>
        [Column("STOKUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF04</para>
        /// </summary>
        [Column("STOKUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF05</para>
        /// </summary>
        [Column("STOKUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF06</para>
        /// </summary>
        [Column("STOKUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF07</para>
        /// </summary>
        [Column("STOKUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF08</para>
        /// </summary>
        [Column("STOKUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF09</para>
        /// </summary>
        [Column("STOKUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF10</para>
        /// </summary>
        [Column("STOKUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF11</para>
        /// </summary>
        [Column("STOKUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF12</para>
        /// </summary>
        [Column("STOKUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF13</para>
        /// </summary>
        [Column("STOKUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF14</para>
        /// </summary>
        [Column("STOKUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF15</para>
        /// </summary>
        [Column("STOKUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF16</para>
        /// </summary>
        [Column("STOKUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF17</para>
        /// </summary>
        [Column("STOKUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF18</para>
        /// </summary>
        [Column("STOKUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF19</para>
        /// </summary>
        [Column("STOKUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TSTOCKS.STOKUF20</para>
        /// </summary>
        [Column("STOKUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TSTOCKS.STOKFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TSTOCKS.STOKLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a OperationTypeModel instance.
        /// <para />
        /// Foreign key: OpTKeyId -> OperationTypeModel.KeyId (TSTOCKS.STOKOPTKEYID -> TOPTYPE.OPTKEYID)
        /// </summary>
        [ForeignKey(nameof(OpTKeyId))]
        public OperationTypeModel OpT { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: RefCustKeyId -> CustomerModel.KeyId (TSTOCKS.STOKREFCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(RefCustKeyId))]
        public CustomerModel RefCust { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: RefFacKeyId -> FactoryModel.KeyId (TSTOCKS.STOKREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(RefFacKeyId))]
        public FactoryModel RefFac { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: RefSuppKeyId -> SupplierModel.KeyId (TSTOCKS.STOKREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(RefSuppKeyId))]
        public SupplierModel RefSupp { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: SuppRefFacKeyId -> FactoryModel.KeyId (TSTOCKS.STOKSUPPREFFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppRefFacKeyId))]
        public FactoryModel SuppRefFac { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: SuppRefSuppKeyId -> SupplierModel.KeyId (TSTOCKS.STOKSUPPREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppRefSuppKeyId))]
        public SupplierModel SuppRefSupp { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of UnitLocationModel instances.
        /// <para />
        /// Foreign key: UnitLocationModel.RefKeyId -> KeyId (TUNITLCA.ULCAREFKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [InverseProperty("RefStocks")]
        public List<UnitLocationModel> RefStocksUnitLocationList { get; set; }

        /// <summary>
        /// Reference to a collection of TagsModel instances.
        /// <para />
        /// Foreign key: TagsModel.StokKeyId -> KeyId (TTAGS.TAGSSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [InverseProperty("Stok")]
        public List<TagsModel> StokTagsList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitModel instances.
        /// <para />
        /// Foreign key: UnitModel.StokKeyId -> KeyId (TUNIT.UNITSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [InverseProperty("Stok")]
        public List<UnitModel> StokUnitList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.SuppStokKeyId -> KeyId (TORDER.ORDSUPPSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [InverseProperty("SuppStok")]
        public List<OrderModel> SuppStokOrderList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TSUPPLIE table.
    /// Holds all suppliers, manufactures, vendors etc.
    ///
    /// An entry can be one or more of the types available as defined in the SUPPTYPE field.
    /// </summary>
    [Table("TSUPPLIE")]
    public class SupplierModel
    {
        /// <summary>
        /// <para>TSUPPLIE.SUPPKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("SUPPKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPP_CREATED</para>
        /// </summary>
        [Column("SUPP_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPP_CREATEDKEYID</para>
        /// </summary>
        [Column("SUPP_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPP_MODIFIED</para>
        /// </summary>
        [Column("SUPP_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPP_MODIFIEDKEYID</para>
        /// </summary>
        [Column("SUPP_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPACCEPTORDERS</para>
        /// </summary>
        [Column("SUPPACCEPTORDERS")]
        [Required]
        public bool Acceptorders { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPADDRESS1</para>
        /// Address of the supplier.
        /// </summary>
        [Column("SUPPADDRESS1")]
        [MaxLength(40)]
        public string Address1 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPADDRESS2</para>
        /// Address of the supplier.
        /// </summary>
        [Column("SUPPADDRESS2")]
        [MaxLength(40)]
        public string Address2 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPBARCODE</para>
        /// </summary>
        [Column("SUPPBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPCALKEYID</para>
        /// A reference to the calendar. Define calendar of work hours for the supplier. If value is NULL then calendar is taken from TFACTORY.FacDefSuppCalKeyID.
        /// </summary>
        [Column("SUPPCALKEYID")]
        public int? CalKeyId { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPCITY</para>
        /// Address of the supplier.
        /// </summary>
        [Column("SUPPCITY")]
        [MaxLength(60)]
        public string City { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPCOUNTRY</para>
        /// Address of the supplier.
        /// </summary>
        [Column("SUPPCOUNTRY")]
        [MaxLength(40)]
        public string Country { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPEMAIL</para>
        /// Email of the supplier.
        /// </summary>
        [Column("SUPPEMAIL")]
        [MaxLength(60)]
        public string Email { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPFACKEYID</para>
        /// If the supplier is Factory Bound this field holds the primary factory of the supplier. A NULL value indicates that the supplier is not factory bound.
        /// See also the TFACSUPP table.
        /// </summary>
        [Column("SUPPFACKEYID")]
        public int? FacKeyId { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPFAX</para>
        /// Fax number of the supplier.
        /// </summary>
        [Column("SUPPFAX")]
        [MaxLength(20)]
        public string Fax { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPFLAGS1</para>
        /// </summary>
        [Column("SUPPFLAGS1")]
        public int? Flags1 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPINTERNAL</para>
        /// If true the supplier is an internal (to T-DOC) supplier like Central Supply etc.
        ///
        /// Stocks for External Suppliers (StokOwnerType=taSupplier) are NOT supported !
        /// </summary>
        [Column("SUPPINTERNAL")]
        [Required]
        public bool Internal { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPNAME</para>
        /// Name of the supplier.
        /// </summary>
        [Column("SUPPNAME")]
        [Required, MaxLength(40)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPORDERDELTIME</para>
        /// The time used by the supplier to transport the goods to the Factory. Value is stored in seconds.
        /// If set to NULL then the FACDEFSUPPORDERDELTIME value is used.
        /// </summary>
        [Column("SUPPORDERDELTIME")]
        public int? OrderDelTime { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPORDERHANDLINGTIME</para>
        /// The time it takes to process and pick the order at the supplier site. Value is stored in seconds.
        /// If set to NULL then the FACDEFSUPPORDERHANDLINGTIME value is used.
        /// </summary>
        [Column("SUPPORDERHANDLINGTIME")]
        public int? OrderHandlingTime { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPORDERRAMPTIME</para>
        /// Delivery time to RAMP.
        /// Value is stored in seconds.
        /// If set to NULL then the FACDEFSUPPORDERRAMPTIME value is used.
        /// </summary>
        [Column("SUPPORDERRAMPTIME")]
        public int? OrderRampTime { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPORDERTRANSMITTIME</para>
        /// The time it takes to send a purchase order from a Factory to the Supplier. Value is stored in seconds.
        /// If set to NULL then the FACDEFSUPPORDERTRANSMITTIME value is used.
        /// </summary>
        [Column("SUPPORDERTRANSMITTIME")]
        public int? OrderTransmitTime { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPOWNCUSTNUMBER</para>
        /// Our own customer number in the suppliers system.
        /// </summary>
        [Column("SUPPOWNCUSTNUMBER")]
        [MaxLength(30)]
        public string OwnCustNumber { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPREMARK</para>
        /// Free text.
        /// </summary>
        [Column("SUPPREMARK")]
        public string Remark { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPREPAIRVENDORKEYID</para>
        /// Ref. to the preferred repair vendor (also in TSupplie) for items supplied by this supplier.
        /// </summary>
        [Column("SUPPREPAIRVENDORKEYID")]
        public int? RepairVendorKeyId { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPSTATUS</para>
        /// Maps to one of the stxxxx constants in TDConst.pas.
        ///
        ///   stNormal = 10;
        ///   stDead   = 90;
        /// </summary>
        [Column("SUPPSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPSUPPLIER</para>
        /// The suppliers number (ID) as input by the user
        /// </summary>
        [Column("SUPPSUPPLIER")]
        [Required, MaxLength(20)]
        public string Supplier { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPTELEPHONE</para>
        /// Telephone number to the supplier.
        /// </summary>
        [Column("SUPPTELEPHONE")]
        [MaxLength(20)]
        public string Telephone { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPTYPE</para>
        /// Indicate the types of functions this supplier can fullfill.
        ///
        /// The field is a bit mask that maps to the suppXXXXX values in TDConst.
        ///
        /// Currently it can be:
        /// suppSupplier=0
        /// suppManufacturer=1
        /// suppRepairVendor=2
        /// </summary>
        [Column("SUPPTYPE")]
        [Required]
        public int Type { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF01</para>
        /// These fields can be used to store any information and the user can define their &quot;public&quot; names.
        /// The user defined field names for these fields are stored in TDEFAULT with a # in front of the fieldname and DEFUSERKEYID is always 0.
        ///
        /// See &quot;Standard fields&quot; documentation.
        /// </summary>
        [Column("SUPPUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF02</para>
        /// </summary>
        [Column("SUPPUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF03</para>
        /// </summary>
        [Column("SUPPUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF04</para>
        /// </summary>
        [Column("SUPPUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF05</para>
        /// </summary>
        [Column("SUPPUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF06</para>
        /// </summary>
        [Column("SUPPUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF07</para>
        /// </summary>
        [Column("SUPPUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF08</para>
        /// </summary>
        [Column("SUPPUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF09</para>
        /// </summary>
        [Column("SUPPUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF10</para>
        /// </summary>
        [Column("SUPPUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF11</para>
        /// </summary>
        [Column("SUPPUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF12</para>
        /// </summary>
        [Column("SUPPUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF13</para>
        /// </summary>
        [Column("SUPPUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF14</para>
        /// </summary>
        [Column("SUPPUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF15</para>
        /// </summary>
        [Column("SUPPUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF16</para>
        /// </summary>
        [Column("SUPPUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF17</para>
        /// </summary>
        [Column("SUPPUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF18</para>
        /// </summary>
        [Column("SUPPUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF19</para>
        /// </summary>
        [Column("SUPPUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPUF20</para>
        /// </summary>
        [Column("SUPPUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPWEBPASSWORD</para>
        /// Information about the suppliers web site.
        /// </summary>
        [Column("SUPPWEBPASSWORD")]
        [MaxLength(40)]
        public string WebPassword { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPWEBSITE</para>
        /// Information about the suppliers web site.
        /// </summary>
        [Column("SUPPWEBSITE")]
        [MaxLength(60)]
        public string WebSite { get; set; }

        /// <summary>
        /// <para>TSUPPLIE.SUPPWEBUSER</para>
        /// Information about the suppliers web site.
        /// </summary>
        [Column("SUPPWEBUSER")]
        [MaxLength(40)]
        public string WebUser { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TSUPPLIE.SUPP_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TSUPPLIE.SUPPFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TSUPPLIE.SUPP_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: RepairVendorKeyId -> SupplierModel.KeyId (TSUPPLIE.SUPPREPAIRVENDORKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(RepairVendorKeyId))]
        public SupplierModel RepairVendor { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.OrgInvRefSuppKeyId -> KeyId (TORDER.ORDORGINVREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [InverseProperty("OrgInvRefSupp")]
        public List<OrderModel> OrgInvRefSuppOrderList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.OrgRefSuppKeyId -> KeyId (TORDER.ORDORGREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [InverseProperty("OrgRefSupp")]
        public List<OrderModel> OrgRefSuppOrderList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderTemplateModel instances.
        /// <para />
        /// Foreign key: OrderTemplateModel.OrgRefSuppKeyId -> KeyId (TORDERTP.ORDTPORGREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [InverseProperty("OrgRefSupp")]
        public List<OrderTemplateModel> OrgRefSuppOrderTemplateList { get; set; }

        /// <summary>
        /// Reference to a collection of StocksModel instances.
        /// <para />
        /// Foreign key: StocksModel.RefSuppKeyId -> KeyId (TSTOCKS.STOKREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [InverseProperty("RefSupp")]
        public List<StocksModel> RefSuppStocksList { get; set; }

        /// <summary>
        /// Reference to a collection of ExtDocRefLinkModel instances.
        /// <para />
        /// Foreign key: ExtDocRefLinkModel.SuppKeyId -> KeyId (TEXTDOCREFLINK.EDRLSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [InverseProperty("Supp")]
        public List<ExtDocRefLinkModel> SuppExtDocRefLinkList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.SuppRefSuppKeyId -> KeyId (TORDER.ORDSUPPREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [InverseProperty("SuppRefSupp")]
        public List<OrderModel> SuppRefSuppOrderList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderTemplateModel instances.
        /// <para />
        /// Foreign key: OrderTemplateModel.SuppRefSuppKeyId -> KeyId (TORDERTP.ORDTPSUPPREFSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [InverseProperty("SuppRefSupp")]
        public List<OrderTemplateModel> SuppRefSuppOrderTemplateList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TSYSTEM table.
    /// This table holds systemwide settings. Only one record should exist in this table.
    ///
    /// *****************************************************************************
    /// WHEN CHANGING FIELDS REMEMBER TO UPDATE uInitTDOCDB.pas CheckSystemTable !
    /// *****************************************************************************
    /// </summary>
    [Table("TSYSTEM")]
    public class SystemModel
    {
        /// <summary>
        /// <para>TSYSTEM.SYSALLOWGEPASSWORD</para>
        /// Determines if login to the system is allowed using the SYS user and the support password issued by Getinge on a monthly basis.
        /// </summary>
        [Column("SYSALLOWGEPASSWORD")]
        [Required]
        public bool AllowGEPassword { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSAUDITFLAGS</para>
        /// </summary>
        [Column("SYSAUDITFLAGS")]
        public int? AuditFlags { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSAUTOATTACHLOCA</para>
        /// </summary>
        [Column("SYSAUTOATTACHLOCA")]
        public int? AutoAttachLoca { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSAUTOATTACHLOCADATE</para>
        /// </summary>
        [Column("SYSAUTOATTACHLOCADATE", TypeName = "datetime")]
        public DateTime? AutoAttachLocaDate { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSBARCODECUSTOWNER</para>
        /// Bit field specifying what types of external barcodes that van be specific for customers.
        /// Currently only bit 0 is used.
        /// Bit 0 = Patients
        /// </summary>
        [Column("SYSBARCODECUSTOWNER")]
        public int? BarcodeCustOwner { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSBARCODEDROPNUMMASK</para>
        /// </summary>
        [Column("SYSBARCODEDROPNUMMASK")]
        public int? BarcodeDropNumMask { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSBARCODEUSAGE</para>
        /// Controls on what screens/windows in Admin the Barcode field for entering external barcodes is displayed.
        /// Each bit represents a datatype based on the enum TBarcodeBit. Starting with bit 0 the following datatypes are valid:
        /// buUsers, buSerials, buItems, buPatients, buExtProds, buExtProdSers, buCustomers, buSuppliers, buLocations, buStocks, buDoctors, buIndicatorTypes, buRooms, buMachines, buPrograms, buLoadQueues.
        /// </summary>
        [Column("SYSBARCODEUSAGE")]
        public int? Barcodeusage { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSBATCHUSERVERIFICATION</para>
        /// If True, the user is required to enter his/hers password when approving/disapproving a process, or a new process is created.
        /// </summary>
        [Column("SYSBATCHUSERVERIFICATION")]
        [Required]
        public bool BatchUserVerification { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSCENTURYBREAK</para>
        /// If set, 2-digit years will be treated as 19xx if above and 20xx if below the value.
        /// </summary>
        [Column("SYSCENTURYBREAK")]
        public int? CenturyBreak { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSCHARGEUSAGE</para>
        /// </summary>
        [Column("SYSCHARGEUSAGE")]
        [Required]
        public bool Chargeusage { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSCNTPSKEYID</para>
        /// </summary>
        [Column("SYSCNTPSKEYID")]
        public int? CntpsKeyId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFASS1DOCTKEYID</para>
        /// Link to TDOCTOR.
        ///
        /// The default assisting doctor(s) for operation data where the assisting doctor(s) are unknown.
        ///
        /// Only used for operations that require assisting doctors.
        /// </summary>
        [Column("SYSDEFASS1DOCTKEYID")]
        public int? DefAss1DoctKeyId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFASS2DOCTKEYID</para>
        /// Link to TDOCTOR.
        ///
        /// The default assisting doctor(s) for operation data where the assisting doctor(s) are unknown.
        ///
        /// Only used for operations that require assisting doctors.
        /// </summary>
        [Column("SYSDEFASS2DOCTKEYID")]
        public int? DefAss2DoctKeyId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFASS3DOCTKEYID</para>
        /// Link to TDOCTOR.
        ///
        /// The default assisting doctor(s) for operation data where the assisting doctor(s) are unknown.
        ///
        /// Only used for operations that require assisting doctors.
        /// </summary>
        [Column("SYSDEFASS3DOCTKEYID")]
        public int? DefAss3DoctKeyId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFASS4DOCTKEYID</para>
        /// Link to TDOCTOR.
        ///
        /// The default assisting doctor(s) for operation data where the assisting doctor(s) are unknown.
        ///
        /// Only used for operations that require assisting doctors.
        /// </summary>
        [Column("SYSDEFASS4DOCTKEYID")]
        public int? DefAss4DoctKeyId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFASS5DOCTKEYID</para>
        /// Link to TDOCTOR.
        ///
        /// The default assisting doctor(s) for operation data where the assisting doctor(s) are unknown.
        ///
        /// Only used for operations that require assisting doctors.
        /// </summary>
        [Column("SYSDEFASS5DOCTKEYID")]
        public int? DefAss5DoctKeyId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFAULTREPLYEMAIL</para>
        /// </summary>
        [Column("SYSDEFAULTREPLYEMAIL")]
        [MaxLength(100)]
        public string Defaultreplyemail { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFCUSITEKEYID</para>
        /// If set then T-DOC will use this site (and any preference lists assigned to it) for operations where the site is unknown.
        /// </summary>
        [Column("SYSDEFCUSITEKEYID")]
        public int? DefCuSiteKeyId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFDOCTKEYID</para>
        /// Link to TDOCTOR.
        ///
        /// The default primary doctor for operation data where the doctor is unknown.
        /// </summary>
        [Column("SYSDEFDOCTKEYID")]
        public int? DefDoctKeyId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFIALUSTOCKS</para>
        /// TIdentArticleLineUsage
        /// This enumeration type is used to indicate if it is possible to specify identical articles at the line level for orders, order templates, composite items lists, preference lists and stocks.
        /// TIdentArticleLineUsage = (ialuDefault, Enabled, Disabled)
        ///
        /// ialuDefault:
        ///   Use the value specified at System level. If the value is found at System level use Enabled.
        ///
        /// Enabled:
        ///   Identical article substitution is enabled for the line.
        ///
        /// Disabled:
        ///   Identical article substitution is disabled for the line.
        ///
        /// Default:
        ///   ialuDefault (except at System level where the default is Enabled)
        /// </summary>
        [Column("SYSDEFIALUSTOCKS")]
        [Required]
        public IdentArticleLineUsage Defialustocks { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFITEMDIFFICULTYMODE</para>
        /// System-level default difficulty/complexity mode for composite items.
        /// </summary>
        [Column("SYSDEFITEMDIFFICULTYMODE")]
        [Required]
        public ItemDifficultyMode DefItemDifficultyMode { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFITEMDISCARDLEVEL</para>
        /// Used to specify the default discard level of a single item.
        ///
        /// The value is used to check if user discard level is enough to discard an item.
        /// Being set in Items screen and job import.
        ///
        /// Default = 50;
        /// </summary>
        [Column("SYSDEFITEMDISCARDLEVEL")]
        public int? DefItemDiscardLevel { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFPATAGE</para>
        /// Used to specify the default patient age the system should use when the actual patient age is unknown.
        ///
        /// The value is primarily used to generate previews of merged preference lists.
        ///
        /// However if TPatientAgeUsage is set to patauNeeded then the value will also be used when creating actual orders for operations where the patient age is unknown.
        ///
        /// Default = 40 years
        /// </summary>
        [Column("SYSDEFPATAGE")]
        public int? DefPatAge { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFPATGENDER</para>
        /// Used to specify the default patient gender.
        ///
        /// The value is primarily used to generate previews of merged preference lists.
        ///
        /// However if TPatientGenderUsage is set to patguNeeded then the value will also be used when creating actual orders for operations where the patient age is unknown.
        ///
        /// Default = Unknown/None
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None   = 0
        ///   Male   = 1
        ///   Female = 2
        /// ********************************************************************************
        /// </summary>
        [Column("SYSDEFPATGENDER")]
        public SexType? DefPatGender { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDEFROOMKEYID</para>
        /// If set then T-DOC will use this room (and any preference lists assigned to it) for operations where the room is unknown.
        /// </summary>
        [Column("SYSDEFROOMKEYID")]
        public int? DefRoomKeyId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDELPKEYID</para>
        /// A reference to the Delivery plan (for Transit products) used on system level.
        /// Will be overridden if a Delivery plan is set on Factory, Customer site or Customer.
        ///
        /// See table TDeliveryPlan
        /// </summary>
        [Column("SYSDELPKEYID")]
        public int? DelPKeyId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSDOCTORUSAGE</para>
        /// TDoctorUsage (NotSet, Needed, Required)
        ///
        /// NotSet = Operation data can be created without knowing anything about doctors. The default doctors are not used.
        ///
        /// Needed = The primary and any assisting doctors must be known. Can use SYSDEFDOCTKEYID and SYSDEFASS1DOCTKEYID – SYSDEFASS5DOCTKEYID if set.
        ///
        /// Required = Must be set in OPDDOCTKEYID and TOPSTAFFLINK.
        ///
        /// Default = NotSet
        /// </summary>
        [Column("SYSDOCTORUSAGE")]
        public DoctorUsage? DoctorUsage { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSEMAILSENDERADDR</para>
        /// Holds email address which are used during forwarding of the messages thru email if owner of message does not have email address or if message is generated by system as result of some action with data (cancel order for instance).
        /// </summary>
        [Column("SYSEMAILSENDERADDR")]
        [MaxLength(255)]
        public string EmailSenderAddr { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSEMAILSENDERNAME</para>
        /// Holds name of owner of email address from field SysEmailSenderAddr
        /// </summary>
        [Column("SYSEMAILSENDERNAME")]
        [MaxLength(255)]
        public string EmailSenderName { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSENABLEIDENTARTINCOMP</para>
        /// Abbreviation for SYSTEM_ENABLE_IDENTICAL_ARTICLES_FOR_COMPOSITE_ITEMS
        /// States if identical Items is to be used for composite items
        /// </summary>
        [Column("SYSENABLEIDENTARTINCOMP")]
        [Required]
        public bool EnableIdentArtInComp { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSENABLEIDENTARTINORDERS</para>
        /// Abbreviation for
        /// SYSTEM_ENABLE_IDENTICAL_ARTICLES_IN_ORDERS
        /// When set to false all functionality regarding identical articles is disabled  in order templates and ad hoc orders (I.e. orders not created from preference lists).
        /// </summary>
        [Column("SYSENABLEIDENTARTINORDERS")]
        [Required]
        public bool EnableIdentArtInOrders { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSENABLEIDENTARTINPREFLISTS</para>
        /// Abbreviation for SYSTEM_ENABLE_IDENTICAL_ARTICLES_IN_PREFLISTS
        /// States if identical Items is to be used in preference lists
        /// </summary>
        [Column("SYSENABLEIDENTARTINPREFLISTS")]
        [Required]
        public bool EnableIdentArtInPrefLists { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSENABLESUBSTITUTION</para>
        /// Determines if Substitution is globally enabled. Default is True.
        /// </summary>
        [Column("SYSENABLESUBSTITUTION")]
        [Required]
        public bool EnableSubstitution { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSFACRESTRICTMODE</para>
        /// When a factory restriction is violated T-DOC will react according to the current &quot;Factory restriction mode&quot;. This mode can be set at the system or factory level and has the following possible values:
        ///
        ///   { Default : Use higher level setting (not valid at system level where it is
        ///                   translated to On
        ///     On      : All factory restrictions are in effect
        ///     Warning : Violating a factory restriction only results in a warning
        ///     Off     : No factory restrictions are in effect }
        ///   TFactoryRestrictionMode = (Default, On, Warning, Off);
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Default = 0
        ///   On      = 1
        ///   Warning = 2
        ///   Off     = 3
        /// ********************************************************************************
        /// </summary>
        [Column("SYSFACRESTRICTMODE")]
        public FactoryRestrictionMode? Facrestrictmode { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSFIRSTDAYOFWEEK</para>
        /// Holds first day of week. This option is used for calendar functionality.
        ///
        /// 0 - System (it takes from Windows settings),
        /// 1 - Mon, 2 - Tue, 3 - Wed, 4 - Thu, 5 - Fri, 6 - Sat, 7 - Sun
        /// </summary>
        [Column("SYSFIRSTDAYOFWEEK")]
        public int? FirstDayOfWeek { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSFIRSTWEEKOFYEAR</para>
        /// Holds first week of year. This option is used for calendar functionality.
        ///
        /// 0 - System (it takes from Windows settings)
        /// 1 - Starts on Jan 1
        /// 2 - First 4-day week
        /// 3 - First full week
        /// </summary>
        [Column("SYSFIRSTWEEKOFYEAR")]
        public int? FirstWeekOfYear { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSFIXEDPRICES</para>
        /// </summary>
        [Column("SYSFIXEDPRICES")]
        [Required]
        public bool Fixedprices { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSFLAGS1</para>
        /// </summary>
        [Column("SYSFLAGS1")]
        public int? Flags1 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSFLAGS2</para>
        /// </summary>
        [Column("SYSFLAGS2")]
        public int? Flags2 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSGS1COMPANYPREFIX</para>
        /// The Hospital/organisation identifier as allocated by EAN-UCC/GS1. Used when generating barcodes in EAN-UCC format.
        /// Also known as the Company Prefix.
        ///
        /// As product GTINs are printed as EAN13, a company prefix only allow a limited number of different GTINs. If more products exist, multiple company prefixes are stored as a semicolon-separated list.
        /// </summary>
        [Column("SYSGS1COMPANYPREFIX")]
        [MaxLength(100)]
        public string GS1CompanyPrefix { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSGS1GTINPRODUCTASSIGN</para>
        /// </summary>
        [Column("SYSGS1GTINPRODUCTASSIGN")]
        public int? GS1GTINProductAssign { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSGS1GTINPRODUCTDEFAULT</para>
        /// </summary>
        [Column("SYSGS1GTINPRODUCTDEFAULT")]
        public int? GS1GTINProductDefault { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSGS1GTINPRODUCTMODE</para>
        /// </summary>
        [Column("SYSGS1GTINPRODUCTMODE")]
        public int? GS1GTINProductMode { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSHOURCOSTS</para>
        /// </summary>
        [Column("SYSHOURCOSTS", TypeName = "Money")]
        [Required]
        public decimal Hourcosts { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSLOCALE</para>
        /// Default settings for temperature, pressure, length, volume, weight and area.
        /// Saved as a string of 6 chars, where each character represents the corresponding setting. The following chars are used:
        ///
        /// Temperature: C(elsius), F(ahrenheit)
        /// Pressure:    B(ar), A(tmosphere), P(SI), K(iloPascal)
        /// Length:      C(entimeter), I(nch)
        /// Volume:      L(iter), (Cubic)F(oot)
        /// Weight:      G(ram), O(unze)
        /// Area:        (Square)C(entimeter), (Square)I(nch)
        ///
        /// Default = CBCLGC
        /// </summary>
        [Column("SYSLOCALE")]
        [MaxLength(100)]
        public string Locale { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSMACHINEMODE</para>
        /// </summary>
        [Column("SYSMACHINEMODE")]
        public int? Machinemode { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSMAXFAILEDLOGINS</para>
        /// Maximum number of failed logins before a user account is blocked. See also TUser.
        /// </summary>
        [Column("SYSMAXFAILEDLOGINS")]
        public int? MaxFailedLogins { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSMAXPASSWORDAGE</para>
        /// The maximum number of days between password change. See also TUser.
        /// </summary>
        [Column("SYSMAXPASSWORDAGE")]
        public int? Maxpasswordage { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSMAXRECORDSAUTODISPLAY</para>
        /// Controls how many records are initially loaded into the &quot;Recent&quot; pane of windows that have this pane.
        /// The first time a user opens a window T-DOC will load all records in the table into the recent display, except if the number of records in the table exceed SysMaxRecordsAutoDisplay. If that is the case only SysMaxRecordsAutoDisplay is displayed.
        /// </summary>
        [Column("SYSMAXRECORDSAUTODISPLAY")]
        [Required]
        public int Maxrecordsautodisplay { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSMESSENDERID</para>
        /// A reference to the TUSER. Holds Id of user. This user is owner of all message which are generated by system due to change of some data (for instance create new order).
        /// </summary>
        [Column("SYSMESSENDERID")]
        public int? MesSenderId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSMONEYROUNDING</para>
        /// </summary>
        [Column("SYSMONEYROUNDING")]
        [Required]
        public double Moneyrounding { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPASSWORDAGEWARN</para>
        /// The number of days before a password expires T-DOC will start to warn about it.
        /// </summary>
        [Column("SYSPASSWORDAGEWARN")]
        public int? PasswordAgeWarn { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPASSWORDHISTORY</para>
        /// The number of passwords that cannot be reused. See also TUser.
        /// </summary>
        [Column("SYSPASSWORDHISTORY")]
        public int? PasswordHistory { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPASSWORDLENGTH</para>
        /// The minimum length passwords must have.
        ///
        /// Only effective next time passwords are changed. Current passwords are not checked.
        /// </summary>
        [Column("SYSPASSWORDLENGTH")]
        public int? PasswordLength { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPASSWORDRULES</para>
        /// Various rules for passwords. The following bits are defined:
        ///
        ///   0 = pwrNumeric // Only numbers allowed.
        ///   1 = pwrCaseSensitive // Passwords are case sensitive. Implicit set when pwrStrong
        ///   2 = pwrStrong // Password must consist of 3 of: UPPERCASE, lowercase, numbers and other. 0 and (1 and 2) are mutually exclusive
        ///   3 = pwrForceChange // User must change password at next login, if sysadm has changed his/hers PW
        /// </summary>
        [Column("SYSPASSWORDRULES")]
        public int? PasswordRules { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPASSWORDVERIFY</para>
        /// Enumeration. Specifies how passwords/security is controlled.
        /// Can be one of the following values:
        ///
        /// pvTDOC: passwords is controlled by TDOC (default)
        /// pvNTDomain: passwords is controlled by a NT domain. The name if this domain is
        ///   specified in the field SysVerifyDomain.
        /// </summary>
        [Column("SYSPASSWORDVERIFY")]
        public int? PasswordVerify { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPASSWORDVERIFYONLY</para>
        /// Password verify only in active directory login mode; moving active directory user to other AD group or the user disabling in AD group is ignored during user login into T-DOC
        /// </summary>
        [Column("SYSPASSWORDVERIFYONLY")]
        [Required]
        public bool PasswordVerifyOnly { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPATAGEUSAGE</para>
        /// Determines how Patient Age attribute is used when creating Operation Data.
        ///
        /// Enum TPatientAgeUsage (NotSet, Needed, Required)
        ///
        /// NotSet = Respect setting at higher level.
        /// Needed = Must be known. Can use SYSDEFPATAGE if set.
        /// patauRequried = Must be set in OPDPATAGE.
        ///
        /// Default = Needed
        /// </summary>
        [Column("SYSPATAGEUSAGE")]
        public PatientAgeUsage? PatAgeUsage { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPATGENDERUSAGE</para>
        /// Determines how Patient Gender attribute is used when creating Operation Data.
        ///
        /// TPatientGenderUsage (NotSet, Needed, Required)
        ///
        /// NotSet = Respect setting at higher level.
        /// Needed = Must be known. Can use SYSDEFPATGENDER if set.
        /// patguRequried = Must be set in OPDPATGENDER.
        ///
        /// Default = NotSet
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   NotSet   = 0
        ///   Needed   = 1
        ///   Required = 2
        /// ********************************************************************************
        /// </summary>
        [Column("SYSPATGENDERUSAGE")]
        public PatientGenderUsage? PatGenderUsage { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPIPAFTERSCANNERLOGOUT</para>
        /// If True, hide patient information after scanner log out
        /// </summary>
        [Column("SYSPIPAFTERSCANNERLOGOUT")]
        [Required]
        public bool PipAfterScannerLogOut { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPIPALLOWSEARCH</para>
        /// If True, allow seeing patient information in Units and Orders search
        /// </summary>
        [Column("SYSPIPALLOWSEARCH")]
        [Required]
        public bool PipAllowSearch { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPIPLOGRETENTION</para>
        /// </summary>
        [Column("SYSPIPLOGRETENTION")]
        public int? PipLogRetention { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPIPMAXSEARCHHITS</para>
        /// </summary>
        [Column("SYSPIPMAXSEARCHHITS")]
        public int? PipMaxSearchHits { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPREFLISTORDERMODE</para>
        /// </summary>
        [Column("SYSPREFLISTORDERMODE")]
        public PrefListOrderCreateMode? PrefListOrderMode { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPRODSTOCKITEMMOVING</para>
        /// </summary>
        [Column("SYSPRODSTOCKITEMMOVING")]
        [Required]
        public bool Prodstockitemmoving { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPRODSTOCKMODE</para>
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Simple   = 0
        ///   Basic    = 1
        ///   Advanced = 2
        /// ********************************************************************************
        /// </summary>
        [Column("SYSPRODSTOCKMODE")]
        [Required]
        public ProductStockControlMode ProdStockMode { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPRODUCTDEFPRIGRKEYID</para>
        /// KeyID of the default price group.
        /// </summary>
        [Column("SYSPRODUCTDEFPRIGRKEYID")]
        public int? ProductDefPriGrKeyId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSPRODUCTPRICEMODE</para>
        /// Possible values for &quot;Use product price groups&quot;/price mode:
        /// - Not used = Fields not visible and not used
        /// - Possible = Fields visible and used if set
        /// - Possible with default = Fields visible and used if set. If not set use the default group for all.
        /// - Forced = Fields visible. All new products must have a group set. Existing products will use the default until they are edited for next time where the group must be set.
        /// For all other values than &quot;Not used&quot; the default group must be set.
        /// </summary>
        [Column("SYSPRODUCTPRICEMODE")]
        public int? ProductPriceMode { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSREADONLY</para>
        /// </summary>
        [Column("SYSREADONLY")]
        [Required]
        public bool Readonly { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSRESRVHIGHFREQUENCYCHECK</para>
        /// Low   High
        /// 0     0      = Agressive checking for all orders
        /// 10    0      = Agressive checking for all with req. del. time &lt;= 10. No check whewn req. del. time &gt; 10
        /// 0     10     = Error. Not allowed in UI. (Low must be equal or higher than High)
        /// 15    10     = Agressive checking when req. del. time &lt;= 10. Daily checking for 11-15 and no checks after 15.
        /// </summary>
        [Column("SYSRESRVHIGHFREQUENCYCHECK")]
        [Required]
        public int ResrvHighFrequencyCheck { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSRESRVLOWFREQUENCYCHECK</para>
        /// Low   High
        /// 0     0      = Agressive checking for all orders
        /// 10    0      = Agressive checking for all with req. del. time &lt;= 10. No check whewn req. del. time &gt; 10
        /// 0     10     = Error. Not allowed in UI. (Low must be equal or higher than High)
        /// 15    10     = Agressive checking when req. del. time &lt;= 10. Daily checking for 11-15 and no checks after 15.
        /// </summary>
        [Column("SYSRESRVLOWFREQUENCYCHECK")]
        [Required]
        public int ResrvLowFrequencyCheck { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSRESTARTPASSWORD</para>
        /// </summary>
        [Column("SYSRESTARTPASSWORD")]
        [MaxLength(20)]
        public string RestartPassword { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSSEARCHACTIVATIONDELAY</para>
        /// This field keeps timer &quot;Interval&quot; that initiates a search request from search screens to the job (default value = 300 msec).
        /// So we add possibility to play with it. For some customer will be good to change default value of &quot;Interval&quot; property from 300 to 700.
        /// </summary>
        [Column("SYSSEARCHACTIVATIONDELAY")]
        [Required]
        public int SearchActivationDelay { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSSECCOMPOSITE</para>
        /// It true, a secondary/alternative item can be given for items in a composite item.
        /// </summary>
        [Column("SYSSECCOMPOSITE")]
        [Required]
        public bool Seccomposite { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSSMSBODYSTRUCTURE</para>
        /// Holds body of message which is used for sending of SMS. Structure is provided by company which distributes SMS (SMS mobile messaging gateway provider). It is used when SMTP API is used for connecting to mobile provider.
        ///
        /// For instance
        ///   api_id:{ID}
        ///   user:{USERNAME}
        ///   password:{PASSWORD}
        ///   to:{SENDTO}
        ///   text:{MESSAGE}
        /// </summary>
        [Column("SYSSMSBODYSTRUCTURE")]
        public string SMSBodyStructure { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSSMSMOBILEPREFIX</para>
        /// Holds code of country which is used for sending SMS. T-DOC allows to enter phone number of user without country code. When code of country is not present in phone number then system uses country code from this field.
        /// For instance code of Denmark is +45.
        /// </summary>
        [Column("SYSSMSMOBILEPREFIX")]
        [MaxLength(100)]
        public string SMSMobilePrefix { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSSMSPASSWORD</para>
        /// Holds password of SMS service.
        /// </summary>
        [Column("SYSSMSPASSWORD")]
        [MaxLength(255)]
        public string SMSPassword { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSSMSTOEMAIL</para>
        /// Holds email address of SMS mobile messaging gateway provider. Text of SMS is sent to this address in special format (see SysSMSBodyStructure).
        /// </summary>
        [Column("SYSSMSTOEMAIL")]
        [MaxLength(255)]
        public string SMSToEmail { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSSMSTYPE</para>
        /// Holds type of API interface for sending SMS which are supported by SMS mobile messaging gateway provider.
        /// 0 - HTTP API
        /// 1 - SMTP API
        /// </summary>
        [Column("SYSSMSTYPE")]
        public int? SMSType { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSSMSURLSTRUCTURE</para>
        /// Holds body of URL which is used for sending of SMS. Structure of URL is provided by company which distributes SMS (SMS mobile messaging gateway provider). It is used when HTTP API is used for connecting to mobile provider.
        ///
        /// For instance
        ///   http://api.clickatell.com/http/sendmsg?api_id={ID}&amp;user={USERNAME}&amp;password={PASSWORD}&amp;to={SENDTO}&amp;text={MESSAGE}
        /// </summary>
        [Column("SYSSMSURLSTRUCTURE")]
        public string SMSUrlStructure { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSSMSUSERNAME</para>
        /// Holds login name for connecting to SMS mobile messaging gateway provider.
        /// </summary>
        [Column("SYSSMSUSERNAME")]
        [MaxLength(255)]
        public string SMSUserName { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSSMTPSERVER</para>
        /// Holds name of SMTP server for sending of messages to SMS mobile messaging gateway provider.
        /// </summary>
        [Column("SYSSMTPSERVER")]
        [MaxLength(60)]
        public string Smtpserver { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSSTATEMAIL</para>
        /// </summary>
        [Column("SYSSTATEMAIL")]
        [MaxLength(200)]
        public string Statemail { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSSUBVERSION</para>
        /// Minor databaseversion. Eg. 17 if version is 8.17.
        /// </summary>
        [Column("SYSSUBVERSION")]
        public int? SubVersion { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSTRGRPKEYID</para>
        /// </summary>
        [Column("SYSTRGRPKEYID")]
        public int? TRGrpKeyId { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF01</para>
        /// These fields can be used to store any information and the user can define their &quot;public&quot; names.
        /// The user defined field names for these fields are stored in TDEFAULT with a # in front of the fieldname and DEFUSERKEYID is always 0.
        ///
        /// See &quot;Standard fields&quot; documentation.
        /// </summary>
        [Column("SYSUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF02</para>
        /// </summary>
        [Column("SYSUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF03</para>
        /// </summary>
        [Column("SYSUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF04</para>
        /// </summary>
        [Column("SYSUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF05</para>
        /// </summary>
        [Column("SYSUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF06</para>
        /// </summary>
        [Column("SYSUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF07</para>
        /// </summary>
        [Column("SYSUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF08</para>
        /// </summary>
        [Column("SYSUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF09</para>
        /// </summary>
        [Column("SYSUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF10</para>
        /// </summary>
        [Column("SYSUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF11</para>
        /// </summary>
        [Column("SYSUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF12</para>
        /// </summary>
        [Column("SYSUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF13</para>
        /// </summary>
        [Column("SYSUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF14</para>
        /// </summary>
        [Column("SYSUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF15</para>
        /// </summary>
        [Column("SYSUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF16</para>
        /// </summary>
        [Column("SYSUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF17</para>
        /// </summary>
        [Column("SYSUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF18</para>
        /// </summary>
        [Column("SYSUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF19</para>
        /// </summary>
        [Column("SYSUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUF20</para>
        /// </summary>
        [Column("SYSUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUISTARTMODE</para>
        /// Determines how the Scanner Client will look when started and when a new user logs in.
        ///
        /// Possible values:
        ///   0=Default(Same as 1)
        ///   1=UI Layer Mode
        ///   2=Grid mode
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Default = 0
        ///   Layers  = 1
        ///   Grid    = 2
        /// ********************************************************************************
        /// </summary>
        [Column("SYSUISTARTMODE")]
        public ScanUIStartMode? UIStartMode { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUPDORDONPREFLSTCHANGE</para>
        /// Is an abbreviation for: System_Update_Orders_On_Preference_List_Change
        /// Default True. When set to true, changes in preference lists will be reflected on orders where picking has not been started. (OrdSubStatus &lt; ossPicked or higher).
        /// This field is used by the Operation Ordering Job to determine if it should update orders at all. If the value is true orders are updated, otherwise it just sets the PREFORDERSNEEDUPDATE to False where it is true.
        /// </summary>
        [Column("SYSUPDORDONPREFLSTCHANGE")]
        [Required]
        public bool UpdOrdOnPrefLstChange { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUSECRITICALCOUNT</para>
        /// When set to True, a column for specifying a critical count will appear in the list of items in the composite items dialog. Critical count is the minimum that must be present of a particular item, even though a higher number is standard.
        /// </summary>
        [Column("SYSUSECRITICALCOUNT")]
        [Required]
        public bool Usecriticalcount { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSUSEEXTENDEDWEIGHTINFO</para>
        /// Off (default): Only the &quot;Item weight&quot; fields are visible. Weight is not used in production.
        /// Display: All weight fields not related to production are displayed. Weight is not used in production.
        /// On: All fields are displayed and weights are used in production.
        /// In all cases all &quot;cascading&quot; data updates etc. are still performed.
        ///
        /// (Changed from On/Off by LS:   &#197;rsagen er at jeg tror en del gerne vil have v&#230;gtene ind i systemet og vise dem p&#229; rapporter, lister osv. men ikke &#248;nsker at veje hver enkelt bakke osv. Medmindre den er sat til &quot;On&quot; er der s&#229; ingen p&#229;virkning af performance i Scanner.exe.)
        /// </summary>
        [Column("SYSUSEEXTENDEDWEIGHTINFO")]
        public int? UseExtendedWeightInfo { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSVERIFYDOMAIN</para>
        /// Domain to verify passwords against. See also SysPasswordVerify.
        /// </summary>
        [Column("SYSVERIFYDOMAIN")]
        [MaxLength(64)]
        public string VerifyDomain { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSVERSION</para>
        /// Major databaseversion. Eg. 8 if version is 8.17.
        /// </summary>
        [Column("SYSVERSION")]
        public int? Version { get; set; }

        /// <summary>
        /// <para>TSYSTEM.SYSWASHTAGSPLITMODE</para>
        /// Can be either smSimple or smAdvanced.
        /// smSimple means that the field ItemSplitCount is used to indicate the number of split/wash tags that a composite item must be split to.
        /// smAdvanced also requires the user to select which items in a composite item that must be put in which split/wash tags.
        /// </summary>
        [Column("SYSWASHTAGSPLITMODE")]
        public int? Washtagsplitmode { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a DoctorModel instance.
        /// <para />
        /// Foreign key: DefAss1DoctKeyId -> DoctorModel.KeyId (TSYSTEM.SYSDEFASS1DOCTKEYID -> TDOCTOR.DOCTKEYID)
        /// </summary>
        [ForeignKey(nameof(DefAss1DoctKeyId))]
        public DoctorModel DefAss1Doct { get; set; }

        /// <summary>
        /// Reference to a DoctorModel instance.
        /// <para />
        /// Foreign key: DefAss2DoctKeyId -> DoctorModel.KeyId (TSYSTEM.SYSDEFASS2DOCTKEYID -> TDOCTOR.DOCTKEYID)
        /// </summary>
        [ForeignKey(nameof(DefAss2DoctKeyId))]
        public DoctorModel DefAss2Doct { get; set; }

        /// <summary>
        /// Reference to a DoctorModel instance.
        /// <para />
        /// Foreign key: DefAss3DoctKeyId -> DoctorModel.KeyId (TSYSTEM.SYSDEFASS3DOCTKEYID -> TDOCTOR.DOCTKEYID)
        /// </summary>
        [ForeignKey(nameof(DefAss3DoctKeyId))]
        public DoctorModel DefAss3Doct { get; set; }

        /// <summary>
        /// Reference to a DoctorModel instance.
        /// <para />
        /// Foreign key: DefAss4DoctKeyId -> DoctorModel.KeyId (TSYSTEM.SYSDEFASS4DOCTKEYID -> TDOCTOR.DOCTKEYID)
        /// </summary>
        [ForeignKey(nameof(DefAss4DoctKeyId))]
        public DoctorModel DefAss4Doct { get; set; }

        /// <summary>
        /// Reference to a DoctorModel instance.
        /// <para />
        /// Foreign key: DefAss5DoctKeyId -> DoctorModel.KeyId (TSYSTEM.SYSDEFASS5DOCTKEYID -> TDOCTOR.DOCTKEYID)
        /// </summary>
        [ForeignKey(nameof(DefAss5DoctKeyId))]
        public DoctorModel DefAss5Doct { get; set; }

        /// <summary>
        /// Reference to a DoctorModel instance.
        /// <para />
        /// Foreign key: DefDoctKeyId -> DoctorModel.KeyId (TSYSTEM.SYSDEFDOCTKEYID -> TDOCTOR.DOCTKEYID)
        /// </summary>
        [ForeignKey(nameof(DefDoctKeyId))]
        public DoctorModel DefDoct { get; set; }

        /// <summary>
        /// Reference to a RoomModel instance.
        /// <para />
        /// Foreign key: DefRoomKeyId -> RoomModel.KeyId (TSYSTEM.SYSDEFROOMKEYID -> TROOM.ROOMKEYID)
        /// </summary>
        [ForeignKey(nameof(DefRoomKeyId))]
        public RoomModel DefRoom { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: MesSenderId -> UserModel.KeyId (TSYSTEM.SYSMESSENDERID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(MesSenderId))]
        public UserModel MesSenderIdUser { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TTAGCONTENT table.
    /// The table holds the current content of a tag.
    ///
    /// If neither TAGCUNITUNIT, TAGCCHILDTAGSKEYID or TAGCINDICINDICATOR are filled then the record represents a reservation of the tag. This is used when starting an automatic tag.
    /// The DB Maintenance job will periodically take care of deleting any orphaned reservations.
    ///
    /// Historical tag content is stored in TTAGCONHIST.
    /// </summary>
    [Table("TTAGCONTENT")]
    public class TagContentModel
    {
        /// <summary>
        /// <para>TTAGCONTENT.TAGCAUTOINC</para>
        /// Used as the primary key for the table in order to get a clustered index.
        ///
        /// IMPORTANT: Not a T-DOC KeyID field but created as IDENTITY(-2147483648, 1)
        /// </summary>
        [Column("TAGCAUTOINC")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Required]
        public int AutoInc { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCCHILDTAGSKEYID</para>
        /// A reference to TTAGS.
        ///
        /// The child tag that is in the tag.
        ///
        /// TAGCUNITUNIT, TAGCCHILDTAGSKEYID and TAGCINDICINDICATOR are grouped and only one or none of them can be set.
        /// </summary>
        [Column("TAGCCHILDTAGSKEYID")]
        public int? ChildTagsKeyId { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCCHPLKEYID</para>
        /// Set when prebatching endoscopes provided that a chamber placement (TCHPLACEMENT) has been scanned.
        /// The information is transferred to TBATCH once the NewBatch control code is scanned.
        /// </summary>
        [Column("TAGCCHPLKEYID")]
        public int? ChPlKeyId { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCINDICINDICATOR</para>
        /// A reference to TINDICATOR.
        ///
        /// The indicator that is in the tag.
        ///
        /// TAGCUNITUNIT, TAGCCHILDTAGSKEYID and TAGCINDICINDICATOR are grouped and only one or none of them can be set.
        /// </summary>
        [Column("TAGCINDICINDICATOR")]
        public int? IndicIndicator { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCITEMCOUNT</para>
        /// The field holds the count of items
        /// </summary>
        [Column("TAGCITEMCOUNT")]
        [Required]
        public int ItemCount { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCITEMKEYID</para>
        /// The field holds reference to the Item Key ID in the TITEM table
        /// </summary>
        [Column("TAGCITEMKEYID")]
        public int? ItemKeyId { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCLOCAKEYID</para>
        /// The location where the record was created.
        /// </summary>
        [Column("TAGCLOCAKEYID")]
        [Required]
        public int LocaKeyId { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCLOTINKEYID</para>
        /// If this field is not NULL, it holds the reference to the shared item LOT in the TLOTINFO table
        /// </summary>
        [Column("TAGCLOTINKEYID")]
        public int? LotInKeyId { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCOLNKEY</para>
        /// </summary>
        [Column("TAGCOLNKEY")]
        public int? OLnKey { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCSERIKEYID</para>
        /// If this field is not NULL, it holds the reference to the item serial number in the TSERIAL table
        /// </summary>
        [Column("TAGCSERIKEYID")]
        public int? SeriKeyId { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCSPLITUNIT</para>
        /// A reference to TUNIT.
        ///
        /// Set to same value for all tags that are used to split the unit.
        ///
        /// This field is used to quickly determine if a unit is split.
        /// </summary>
        [Column("TAGCSPLITUNIT")]
        public int? SplitUnit { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCTAGSKEYID</para>
        /// A reference to TTAGS.
        ///
        /// The tag the record belongs to.
        /// </summary>
        [Column("TAGCTAGSKEYID")]
        [Required]
        public int TagsKeyId { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCTIME</para>
        /// The time the record was created. And thus the time the unit/tag/indicator was put into a tag.
        /// </summary>
        [Column("TAGCTIME", TypeName = "datetime")]
        [Required]
        public DateTime Time { get; set; }

        /// <summary>
        /// <para>TTAGCONTENT.TAGCUNITUNIT</para>
        /// A reference to TUNIT.
        ///
        /// The unit that is in the tag.
        ///
        /// TAGCUNITUNIT, TAGCCHILDTAGSKEYID and TAGCINDICINDICATOR are grouped and only one or none of them can be set.
        /// </summary>
        [Column("TAGCUNITUNIT")]
        public int? UnitUnit { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a TagsModel instance.
        /// <para />
        /// Foreign key: ChildTagsKeyId -> TagsModel.KeyId (TTAGCONTENT.TAGCCHILDTAGSKEYID -> TTAGS.TAGSKEYID)
        /// </summary>
        [ForeignKey(nameof(ChildTagsKeyId))]
        public TagsModel ChildTags { get; set; }

        /// <summary>
        /// Reference to a IndicatorModel instance.
        /// <para />
        /// Foreign key: IndicIndicator -> IndicatorModel.KeyId (TTAGCONTENT.TAGCINDICINDICATOR -> TINDICATOR.INDICINDICATOR)
        /// </summary>
        [ForeignKey(nameof(IndicIndicator))]
        public IndicatorModel IndicIndicatorIndicator { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: ItemKeyId -> ItemModel.KeyId (TTAGCONTENT.TAGCITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(ItemKeyId))]
        public ItemModel Item { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TTAGCONTENT.TAGCLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a LotInfoModel instance.
        /// <para />
        /// Foreign key: LotInKeyId -> LotInfoModel.KeyId (TTAGCONTENT.TAGCLOTINKEYID -> TLOTINFO.LOTINKEYID)
        /// </summary>
        [ForeignKey(nameof(LotInKeyId))]
        public LotInfoModel LotIn { get; set; }

        /// <summary>
        /// Reference to a OrderLineModel instance.
        /// <para />
        /// Foreign key: OLnKey -> OrderLineModel.KeyId (TTAGCONTENT.TAGCOLNKEY -> TORDLN.OLNKEY)
        /// </summary>
        [ForeignKey(nameof(OLnKey))]
        public OrderLineModel OLnKeyOrderLine { get; set; }

        /// <summary>
        /// Reference to a SerialModel instance.
        /// <para />
        /// Foreign key: SeriKeyId -> SerialModel.KeyId (TTAGCONTENT.TAGCSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [ForeignKey(nameof(SeriKeyId))]
        public SerialModel Seri { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: SplitUnit -> UnitModel.KeyId (TTAGCONTENT.TAGCSPLITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(SplitUnit))]
        public UnitModel SplitUnitUnit { get; set; }

        /// <summary>
        /// Reference to a TagsModel instance.
        /// <para />
        /// Foreign key: TagsKeyId -> TagsModel.KeyId (TTAGCONTENT.TAGCTAGSKEYID -> TTAGS.TAGSKEYID)
        /// </summary>
        [ForeignKey(nameof(TagsKeyId))]
        public TagsModel Tags { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: UnitUnit -> UnitModel.KeyId (TTAGCONTENT.TAGCUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(UnitUnit))]
        public UnitModel UnitUnitUnit { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TTAGS table.
    /// The table holds the base data for each tag created/used in the system.
    /// </summary>
    [Table("TTAGS")]
    public class TagsModel
    {
        /// <summary>
        /// <para>TTAGS.TAGSKEYID</para>
        /// NOT a standard KeyID.
        /// This KeyID is almost entirely maintained in code.
        /// All numbers below 200000 are treated special.
        ///
        /// TODO Add description from SDS.
        ///
        ///
        /// Comments from uTagutils.pas:
        ///     Legacy tag numbers. These are both used as TAGSKEYID in TTAGS and as the
        ///     TAGSNO in TTAGS (minus the prefix).
        ///     Type               Fixed numbers  Auto numbers
        ///     cBasketTag    = 1  1001 – 1999    10001 – 19999
        ///     cLoadTag      = 2  2001 – 2999    20001 – 29999
        ///     cPrepTag      = 3  3001 – 3999    Not used
        ///     cBundleTag    = 4  4001 – 4999    40001 – 49999
        ///     cWashTag      = 5  5001 – 5999    50001 – 59999
        ///     cWashLoadTag  = 6  6001 – 6999    60001 – 69999
        ///     cTransportTag = 7  7001 – 7999    70001 – 79999
        ///     cSplitTag     = 8  8001 – 8999    Not used
        ///     cCaseCartTag  = 9  9001 – 9999    90001 – 99999  (was not in V8)
        /// </summary>
        [Column("TAGSKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGS_CREATED</para>
        /// Standard field
        /// </summary>
        [Column("TAGS_CREATED", TypeName = "datetime")]
        [Required]
        public DateTime Created { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGS_CREATEDKEYID</para>
        /// Standard field
        /// </summary>
        [Column("TAGS_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGSAUTO</para>
        /// Boolean that indicates if the tag is a fixed or automatic tag.
        /// F = Fixed tag, T = Automatic tag.
        /// </summary>
        [Column("TAGSAUTO")]
        [Required]
        public bool Auto { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGSBARCODE</para>
        /// The primary external barcode for the tag. When set a record must also be created in TBARCODE.
        /// </summary>
        [Column("TAGSBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGSLOCAKEYID</para>
        /// The last known location of the tag.
        /// </summary>
        [Column("TAGSLOCAKEYID")]
        public int? LocaKeyId { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGSLOCATIME</para>
        /// The time the tag was at the last known location.
        /// </summary>
        [Column("TAGSLOCATIME", TypeName = "datetime")]
        public DateTime? LocaTime { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGSNAME</para>
        /// An optional custom name for the tag.
        ///
        /// NOT IMPLEMENTED
        /// </summary>
        [Column("TAGSNAME")]
        [MaxLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGSNO</para>
        /// The &quot;user friendly&quot; tag number.
        /// </summary>
        [Column("TAGSNO")]
        [Required]
        public int No { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGSPROCBATCH</para>
        /// A reference to TPROCESS.
        ///
        /// If set this is the batch the tag is currently associated with.
        ///
        /// Currently only used for Wash tags.
        /// </summary>
        [Column("TAGSPROCBATCH")]
        public int? ProcBatch { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGSSTATUS</para>
        /// Standard values.
        ///
        /// Normal (10) = The tag can be used.
        /// To be omitted (50) = The tag can be used, but nothing new can be put into the tag. The tags location can still be registered and it can be washed.
        /// Omitted (90)= The tag cannot be used. The tag must be empty to get this status.
        /// </summary>
        [Column("TAGSSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGSSTOKKEYID</para>
        /// The field holds reference to the Stock Key ID
        /// </summary>
        [Column("TAGSSTOKKEYID")]
        public int? StokKeyId { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGSTAGTKEYID</para>
        /// The field holds reference to the tag type Key ID
        /// </summary>
        [Column("TAGSTAGTKEYID")]
        [Required]
        public int TagTKeyId { get; set; }

        /// <summary>
        /// <para>TTAGS.TAGSTYPE</para>
        /// The type of the tag.
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Basket              = 0
        ///   SteriLoad           = 1
        ///   PrepTag             = 2
        ///   Bundle              = 3
        ///   Wash                = 4
        ///   WashLoad            = 5
        ///   Transport           = 6
        ///   Split               = 7
        ///   CaseCart            = 8
        ///   TransportBox        = 9
        ///   InstrumentContainer = 10
        /// ********************************************************************************
        /// </summary>
        [Column("TAGSTYPE")]
        [Required]
        public TagType Type { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TTAGS.TAGS_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TTAGS.TAGSLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a ProcessModel instance.
        /// <para />
        /// Foreign key: ProcBatch -> ProcessModel.KeyId (TTAGS.TAGSPROCBATCH -> TPROCESS.PROCBATCH)
        /// </summary>
        [ForeignKey(nameof(ProcBatch))]
        public ProcessModel ProcBatchProcess { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: StokKeyId -> StocksModel.KeyId (TTAGS.TAGSSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(StokKeyId))]
        public StocksModel Stok { get; set; }

        /// <summary>
        /// Reference to a TagTypeModel instance.
        /// <para />
        /// Foreign key: TagTKeyId -> TagTypeModel.KeyId (TTAGS.TAGSTAGTKEYID -> TTAGTYPE.TAGTKEYID)
        /// </summary>
        [ForeignKey(nameof(TagTKeyId))]
        public TagTypeModel TagT { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of TagContentModel instances.
        /// <para />
        /// Foreign key: TagContentModel.ChildTagsKeyId -> KeyId (TTAGCONTENT.TAGCCHILDTAGSKEYID -> TTAGS.TAGSKEYID)
        /// </summary>
        [InverseProperty("ChildTags")]
        public List<TagContentModel> ChildTagsTagContentList { get; set; }

        /// <summary>
        /// Reference to a collection of OrderModel instances.
        /// <para />
        /// Foreign key: OrderModel.Tag -> KeyId (TORDER.ORDTAG -> TTAGS.TAGSKEYID)
        /// </summary>
        [InverseProperty("TagTags")]
        public List<OrderModel> TagOrderList { get; set; }

        /// <summary>
        /// Reference to a collection of TagContentModel instances.
        /// <para />
        /// Foreign key: TagContentModel.TagsKeyId -> KeyId (TTAGCONTENT.TAGCTAGSKEYID -> TTAGS.TAGSKEYID)
        /// </summary>
        [InverseProperty("Tags")]
        public List<TagContentModel> TagsTagContentList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TTAGTYPE table.
    /// This table holds all tag types that may be used in T-DOC
    /// </summary>
    [Table("TTAGTYPE")]
    public class TagTypeModel
    {
        /// <summary>
        /// <para>TTAGTYPE.TAGTKEYID</para>
        /// The internal database KeyID. This is a T-DOC KeyID.
        /// </summary>
        [Column("TAGTKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGT_CREATED</para>
        /// </summary>
        [Column("TAGT_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGT_CREATEDKEYID</para>
        /// </summary>
        [Column("TAGT_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGT_MODIFIED</para>
        /// </summary>
        [Column("TAGT_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGT_MODIFIEDKEYID</para>
        /// </summary>
        [Column("TAGT_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTDESCR</para>
        /// A Description shown as remark tab in TDAdmin
        /// </summary>
        [Column("TAGTDESCR")]
        public string Descr { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTHEIGHT</para>
        /// Holds the height of the tag type.
        /// </summary>
        [Column("TAGTHEIGHT")]
        public int? Height { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTHEIGHTCAPACITY</para>
        /// Holds the height capacity of a tag type
        /// </summary>
        [Column("TAGTHEIGHTCAPACITY")]
        public int? HeightCapacity { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTHOLDSITEMS</para>
        /// If True the tag type can be used to hold items.
        /// </summary>
        [Column("TAGTHOLDSITEMS")]
        public bool? HoldsItems { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTINTTGKEYID</para>
        /// The field holds reference to the TIDENTICALTAGTYPEGROUP table.
        /// Determines identical group for the tag type.
        /// </summary>
        [Column("TAGTINTTGKEYID")]
        public int? InTTGKeyId { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTNAME</para>
        /// The name of the tag type.
        /// </summary>
        [Column("TAGTNAME")]
        [MaxLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTSUPPKEYID</para>
        /// The field holds reference to the repair vendor Supplier Key ID
        /// </summary>
        [Column("TAGTSUPPKEYID")]
        public int? SuppKeyId { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTSYSTYPE</para>
        /// If this value is true the tag type is a system default type and must NOT be deleted.
        /// </summary>
        [Column("TAGTSYSTYPE")]
        [Required]
        public bool SysType { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTTYPE</para>
        /// Holds the value corresponding to the TTagType enum.
        ///
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Basket              = 0
        ///   SteriLoad           = 1
        ///   PrepTag             = 2
        ///   Bundle              = 3
        ///   Wash                = 4
        ///   WashLoad            = 5
        ///   Transport           = 6
        ///   Split               = 7
        ///   CaseCart            = 8
        ///   TransportBox        = 9
        ///   InstrumentContainer = 10
        /// ********************************************************************************
        /// </summary>
        [Column("TAGTTYPE")]
        [Required]
        public TagType Type { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF01</para>
        /// </summary>
        [Column("TAGTUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF02</para>
        /// </summary>
        [Column("TAGTUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF03</para>
        /// </summary>
        [Column("TAGTUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF04</para>
        /// </summary>
        [Column("TAGTUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF05</para>
        /// </summary>
        [Column("TAGTUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF06</para>
        /// </summary>
        [Column("TAGTUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF07</para>
        /// </summary>
        [Column("TAGTUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF08</para>
        /// </summary>
        [Column("TAGTUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF09</para>
        /// </summary>
        [Column("TAGTUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF10</para>
        /// </summary>
        [Column("TAGTUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF11</para>
        /// </summary>
        [Column("TAGTUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF12</para>
        /// </summary>
        [Column("TAGTUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF13</para>
        /// </summary>
        [Column("TAGTUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF14</para>
        /// </summary>
        [Column("TAGTUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF15</para>
        /// </summary>
        [Column("TAGTUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF16</para>
        /// </summary>
        [Column("TAGTUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF17</para>
        /// </summary>
        [Column("TAGTUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF18</para>
        /// </summary>
        [Column("TAGTUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF19</para>
        /// </summary>
        [Column("TAGTUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTUF20</para>
        /// </summary>
        [Column("TAGTUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTWIDTH</para>
        /// Holds the width of the tag type.
        /// </summary>
        [Column("TAGTWIDTH")]
        public int? Width { get; set; }

        /// <summary>
        /// <para>TTAGTYPE.TAGTWIDTHCAPACITY</para>
        /// Holds the width capacity of a tag type.
        /// </summary>
        [Column("TAGTWIDTHCAPACITY")]
        public int? WidthCapacity { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TTAGTYPE.TAGT_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TTAGTYPE.TAGT_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a SupplierModel instance.
        /// <para />
        /// Foreign key: SuppKeyId -> SupplierModel.KeyId (TTAGTYPE.TAGTSUPPKEYID -> TSUPPLIE.SUPPKEYID)
        /// </summary>
        [ForeignKey(nameof(SuppKeyId))]
        public SupplierModel Supp { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of TagsModel instances.
        /// <para />
        /// Foreign key: TagsModel.TagTKeyId -> KeyId (TTAGS.TAGSTAGTKEYID -> TTAGTYPE.TAGTKEYID)
        /// </summary>
        [InverseProperty("TagT")]
        public List<TagsModel> TagTTagsList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TTEXT table.
    /// This table holds various &quot;simple&quot; data types, like error codes, control codes etc.
    ///
    /// Individual types might be moved to separate tables in the future.
    /// </summary>
    [Table("TTEXT")]
    public class TextModel
    {
        /// <summary>
        /// <para>TTEXT.TEXTKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("TEXTKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TTEXT.TEXT_CREATED</para>
        /// </summary>
        [Column("TEXT_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TTEXT.TEXT_CREATEDKEYID</para>
        /// </summary>
        [Column("TEXT_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TTEXT.TEXT_MODIFIED</para>
        /// </summary>
        [Column("TEXT_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TTEXT.TEXT_MODIFIEDKEYID</para>
        /// </summary>
        [Column("TEXT_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TTEXT.TEXTDATA</para>
        /// Depending on the TEXTTYPE this field can be used to hold various type specific data.
        ///
        /// ttPictureSeries:
        ///   Max size of pictures.
        ///
        /// ttMacro:
        ///   No longer used. Macros are located in the separate table TMACRO.
        /// </summary>
        [Column("TEXTDATA")]
        public byte[] Data { get; set; }

        /// <summary>
        /// <para>TTEXT.TEXTFLOATOPTION</para>
        /// Depending on the TEXTTYPE this field can be used to hold various type specific float values.
        ///
        /// ttReportSelGroup:
        ///   The rounded value indicates the sortorder of selection groups with the same
        ///   TEXTOPTION value. Ascending order.
        /// </summary>
        [Column("TEXTFLOATOPTION")]
        public double? FloatOption { get; set; }

        /// <summary>
        /// <para>TTEXT.TEXTMEMO</para>
        /// Used for explanations/comments.
        /// </summary>
        [Column("TEXTMEMO")]
        public string Memo { get; set; }

        /// <summary>
        /// <para>TTEXT.TEXTNUMBER</para>
        /// The number and identifier of the record. Numbers below 0 are not valid unless specifically indicated.
        ///
        /// ttError:
        ///   Numbers from 0, 1, 50 and 100 are reserved
        ///
        /// ttBarCode:
        ///   Only numbers that are actually implemented in the T-DOC code have
        ///   a meaning. Creating other numbers will not cause any damage but
        ///   they will be of no use.
        ///
        /// ttPictureSeries:
        ///   Values below 101 are reserved. Currently the following are used:
        ///     pseNone     = 0;
        ///     pseNormal   = 1;
        ///     psePrinting = 2;
        ///     pseService  = 3;
        ///
        /// ttReportSelGroup:
        ///   0 is not to be used !
        ///   Values below 10000 are reserved for standard/system report groups.
        ///   Values from 1 to 4000 (repLstEnd) and 9999 should never be present in the table
        ///   as they are used by the report manager for labels and list.
        /// </summary>
        [Column("TEXTNUMBER")]
        [Required]
        public int Number { get; set; }

        /// <summary>
        /// <para>TTEXT.TEXTOPTION</para>
        /// Depending on the TEXTTYPE this field can be used to hold various type specific options.
        ///
        /// ttError:
        ///   Each bit is used as a flag to indicate a financial option concerning the error:
        ///     errorOptionWash=1
        ///     errorOptionCustPay=2
        ///     errorOptionDisposablesUsed=4
        ///     errorOptionReturnWithoutBatch=8;
        ///
        /// ttReportSelGroup:
        ///   The value in this field indicates the TEXTNUMBER that is the &quot;parent&quot; selection group
        ///   (and hence menu) to this group. A value of 0 indicates it is a top level group (menu).
        /// </summary>
        [Column("TEXTOPTION")]
        public int? Option { get; set; }

        /// <summary>
        /// <para>TTEXT.TEXTSYSOPTION</para>
        /// Currently only used like this:
        ///
        /// A non zero value indicates it is a system entry that can not be deleted.
        /// </summary>
        [Column("TEXTSYSOPTION")]
        public int? SysOption { get; set; }

        /// <summary>
        /// <para>TTEXT.TEXTTEXT</para>
        /// The text of the type entry.
        /// </summary>
        [Column("TEXTTEXT")]
        [MaxLength(80)]
        public string Text { get; set; }

        /// <summary>
        /// <para>TTEXT.TEXTTYPE</para>
        /// The value in this field determines what kind of &quot;text&quot; the record holds.
        ///
        /// Possible values are:
        ///
        ///   ttError           = 0   : An error code
        ///   ttBarCode         = 1   : A control barcode
        ///   ttPictureSeries   = 13  : A Item or Product picture series
        ///   ttMaterial        = 20  : A item material
        ///   ttWarrenty        = 22  : A item warrenty
        ///   ttTrayPlacement   = 24  : A placement used by single items in composite items.
        ///   ttContactType     = 25  : A contact type used in TCONTACT CONTCONTTYPE
        ///   ttCompItemText    = 26  : A text used in TCOMP when COMPTYPE=citText
        ///   ttReportSelGroup  = 27  : A report selection group (and menu item)
        ///   ttMacro           = 28  : No longer used. Macros are located in the separate table TMACRO.
        ///   ttFactoryPreparation   = 30 : SteamLab/Industry only
        ///   ttProductPreTreatment  = 31 : SteamLab/Industry only
        ///   ttProductPostTreatment = 32 : SteamLab/Industry only
        /// </summary>
        [Column("TEXTTYPE")]
        [Required]
        public int Type { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TTEXT.TEXT_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TTEXT.TEXT_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TUNIT table.
    /// </summary>
    [Table("TUNIT")]
    public class UnitModel
    {
        /// <summary>
        /// <para>TUNIT.UNITUNIT</para>
        /// The public number of the unit and the internal database KeyID.
        /// </summary>
        [Column("UNITUNIT")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITBASKET</para>
        /// This field hold the last Basket tag the unit was assigned to. The unit might no be in that basket tag any longer. Check table TTAGS to see if the unit is actually in the Basket tag.
        /// </summary>
        [Column("UNITBASKET")]
        public int? Basket { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITBATCH</para>
        /// A link to the main sterilizer batch used to sterilize the unit.
        /// </summary>
        [Column("UNITBATCH")]
        public int? Batch { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITCREATED</para>
        /// Date/time when unit was created.
        /// </summary>
        [Column("UNITCREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITCUSTKEYID</para>
        /// A link to the customer the unit is going to be dispatched to or has last been dispatched to.
        ///
        /// When the unit is created the value is set to the underlying products standard customer if one has been specified. Every time the unit is actually dispatched the value is updated to reflect the customer it was dispatched to.
        /// </summary>
        [Column("UNITCUSTKEYID")]
        public int? CustKeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITDRYINGSTOKKEYID</para>
        /// A reference to the stock used as a drying cabinet for this unit. Only set if the unit is an Endoscope.
        ///
        /// LS: Is this not from the old implementation of Endo? If so it should be removed in next version.
        /// </summary>
        [Column("UNITDRYINGSTOKKEYID")]
        public int? DryingStokKeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITERROR</para>
        /// Unit error. Possible values are errors from TText, or 0 if no error.
        /// </summary>
        [Column("UNITERROR")]
        [Required]
        public int Error { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITEXPIRE</para>
        /// The calculated expiry date of the unit. The value is set at the time of packing and NOT at the time of sterilization. If the unit is not sterilized the same day it is packed this means that the date can actully be incorrect. However as the incorrect expiry date will always be before/sooner than the actual expiry date the implementation is safe.
        /// The implementation is as designed and gives the advantage that the expiry date can be printed on labels and lists at the time of packing.
        ///
        /// In systems where time based expiry is not used (i.e. event based expiry is used), this value is set to NULL.
        /// </summary>
        [Column("UNITEXPIRE", TypeName = "datetime")]
        public DateTime? Expire { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITFACKEYID</para>
        /// The factory where the unit was created.
        /// </summary>
        [Column("UNITFACKEYID")]
        [Required]
        public int FacKeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITLMPROKEYID</para>
        /// </summary>
        [Column("UNITLMPROKEYID")]
        public int? LMProKeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITLOCAKEYID</para>
        /// The last location where the unit was scanned.
        /// </summary>
        [Column("UNITLOCAKEYID")]
        public int? LocaKeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITLOCATIME</para>
        /// </summary>
        [Column("UNITLOCATIME", TypeName = "datetime")]
        public DateTime? LocaTime { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITNEXTUNIT</para>
        /// If this unit has been used as the basis for packing a new unit then this field is a reference to the new unit.
        /// </summary>
        [Column("UNITNEXTUNIT")]
        public int? NextUnit { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITOPDKEYID</para>
        /// Link to the operation (TOPDATA) the unit was used for.
        /// </summary>
        [Column("UNITOPDKEYID")]
        public int? OpDKeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITPACKUSERKEYID</para>
        /// Link to the user that packed/created the unit.
        /// </summary>
        [Column("UNITPACKUSERKEYID")]
        public int? PackUserKeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITPREVUNIT</para>
        /// If this unit was made with a previous unit as the basis then this field is a reference to the &quot;old&quot; unit.
        /// </summary>
        [Column("UNITPREVUNIT")]
        public int? PrevUnit { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITPRICE</para>
        /// The total price of the unit as invoiced to the last customer the unit was dispatched to.
        ///
        /// If UNITPRIGRKEYID is set then the value is taken from TPRICEGROUP.PRIGRPRICE at the time of dispatch. If UNITPRIGRKEYID is not set then the value is calculated as the sum of UNITPRICEUSAGE + UNITPRICESTERI + UNITPRICEWASH + UNITPRICEPACK + UNITPRICEHANDLING.
        ///
        /// Note that a unit can be dispatched several times if it is returned to stock or moved between customers. All the price fields are set every time the unit is dispatched and thus they reflect the price that customer currently set in UNITCUSTKEYID has been charged. This price might have been different for another customer depending on price settings.
        /// </summary>
        [Column("UNITPRICE", TypeName = "Money")]
        public decimal? Price { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITPRICEHANDLING</para>
        /// If the unit is invoiced with the standard price calculations this field will hold the handlinge price actually used. See UNITPRICE for more information.
        /// </summary>
        [Column("UNITPRICEHANDLING", TypeName = "Money")]
        public decimal? PriceHandling { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITPRICEPACK</para>
        /// If the unit is invoiced with the standard price calculations this field will hold the price of the packing material actually used. See UNITPRICE for more information.
        /// </summary>
        [Column("UNITPRICEPACK", TypeName = "Money")]
        public decimal? PricePack { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITPRICESTERI</para>
        /// If the unit is invoiced with the standard price calculations this field will hold the sterilization price actually used. See UNITPRICE for more information.
        /// </summary>
        [Column("UNITPRICESTERI", TypeName = "Money")]
        public decimal? PriceSteri { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITPRICEUSAGE</para>
        /// If the unit is invoiced with the standard price calculations this field will hold the usage price actually used. See UNITPRICE for more information.
        /// </summary>
        [Column("UNITPRICEUSAGE", TypeName = "Money")]
        public decimal? PriceUsage { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITPRICEWASH</para>
        /// If the unit is invoiced with the standard price calculations this field will hold the washing price actually used. See UNITPRICE for more information.
        /// </summary>
        [Column("UNITPRICEWASH", TypeName = "Money")]
        public decimal? PriceWash { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITPRIGRKEYID</para>
        /// The use of this field depends on the settings in SYSPRODUCTPRICEMODE, SYSPRODUCTDEFPRIGRKEYID, PRODPRICINGTYPE and PRODPRIGRKEYID. See these fields for more information.
        ///
        /// If required the field is set when the unit is created and is updated every time the unit is dispatched.
        /// </summary>
        [Column("UNITPRIGRKEYID")]
        public int? PriGrKeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITPRODKEYID</para>
        /// A link to the product the unit is based on.
        /// </summary>
        [Column("UNITPRODKEYID")]
        [Required]
        public int ProdKeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITREQRETURNREG</para>
        /// If True then the unit is expected to be scanned returned.
        /// If False then the unit is not expected to be scanned returned but it can be. Same as the &quot;old&quot; status Supplied.
        ///
        /// The value is only valid if (UNITSTATUS &gt;= statDISPATCHED (70)) and (UNITSTATUS &lt; statERRORREG (95)). For UNITSTATUS values outside this range the content of UNITREQRETURNREG is undefined!
        /// </summary>
        [Column("UNITREQRETURNREG")]
        [Required]
        public bool ReqReturnReg { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITROOMKEYID</para>
        /// </summary>
        [Column("UNITROOMKEYID")]
        public int? RoomKeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITSERIKEYID</para>
        /// If the unit was based on/packed from a serial number this field links to that serial number.
        /// </summary>
        [Column("UNITSERIKEYID")]
        public int? SeriKeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITSTATUS</para>
        /// Current status of the unit. Valid values are:
        ///
        ///   statNONE      = 0;
        ///   statINIT      = 1; // was 5. Changed in v12
        ///   statSTARTED   = 3; // New from v12
        ///   statRINSED    = 7; // New from v12
        ///   statWASHED    = 8; // New from v12
        ///   statPREP      = 10;
        ///   statPACKED    = 20;
        ///   statSTOCK     = 40;
        ///   statDISPATCHED= 70; // Was 60
        ///   statOPENED    = 72;
        ///   statUSED      = 74;
        ///   statRETURNED  = 80;
        ///   statERRORREG  = 95;
        ///
        /// If the status is statDISPATCHED and UNITCUSTKEYID=NULL then the unit is out for repair.
        /// </summary>
        [Column("UNITSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITSTOKKEYID</para>
        /// The stock the unit is currently at. Only used if full product stock control is enabled.
        /// </summary>
        [Column("UNITSTOKKEYID")]
        public int? StokKeyId { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITUSAGECOUNTER</para>
        /// </summary>
        [Column("UNITUSAGECOUNTER")]
        public int? UsageCounter { get; set; }

        /// <summary>
        /// <para>TUNIT.UNITWORKINGTIME</para>
        /// The total time spent in the &quot;Pack On Screen&quot; window during packing of the unit.
        ///
        /// The value is stored in seconds.
        ///
        /// The field is called &quot;Used Pack Time&quot;. The field will show the total time that was used in the Pack On Screen window in order to pack the unit. Here are the rules that apply to the field:
        ///
        /// 1. The value only includes the time spent in the actual Pack On Screen window and does NOT include time spent watching triggers and other windows that might be displayed before or after displaying the Pack On Screen window.
        /// 2. The value is displayed in the format h:mm.ss (hours, minutes and seconds). (the actual value stored in the database field UNITWORKTIME is stored in seconds).
        /// 3. The field is only visible if the customer has &quot;Pack On Screen&quot; in the license.
        /// 4. The value in the field is not valid until the unit has at least status PACKED.
        /// 5. The label in front of the field will be &quot;grayed out&quot; if the underlying Product does not have &quot;Pack On Screen&quot; checked or if the status of the unit is not yet at least PACKED. This is to visualize that any value displayed is not (yet) valid.
        /// 6. If Pack On Screen is suspended and resumed one or more times then the times will be added to give the total time spent (see important exception to this below).
        ///
        /// Calculation of Total time used when POS is suspended and resumed
        /// ----------------------------------------------------------------------------------------------------
        /// The general rule is that you can suspend and resume as many times as required and the time spent during each &quot;packing session&quot; is recorded and added to the previous times. When packing is completed the &quot;Used Pack Time&quot; field will reflect the total time spent in the POS window.
        /// The exception to this is that if no changes whatsoever is made to the list between display and suspension then the time used in that particular session will NOT be added at all. The reasons for this are technical backwards compatibility problems. In a future version we hope to be able to remove this limitation.
        ///
        /// Example 1
        /// ----------------
        /// Session 1:	Window opens
        /// 		User makes one or more changes
        /// 		Window is suspended after 1 minute
        /// Session 2:	Window opens
        /// 		User makes one or more changes
        /// 		Window is closed and unit is packed after 2 minute
        /// In example 1 &quot;Used Pack Time&quot; will show 3 minutes.
        ///
        /// Example 2
        /// ----------------
        /// Session 1:	Window opens
        /// 		User makes NO changes but just looks at the screen, goes to lunch or something
        /// 		Window is suspended after 30 minutes
        /// Session 2:	Window opens
        /// 		User makes one or more changes
        /// 		Window is closed and unit is packed after 2 minute
        /// In example 2 &quot;Used Pack Time&quot; will show 2 minutes because session 1 is disregarded
        ///
        ///
        /// DISCLAIMER/WARNING: In a later version of T-DOC we MIGHT decide to include the time spent in other windows during packing, such as the trigger window, repair window etc. and to include the time spent in non-editing POS session. Any customers relying on derived statistical data from the field are hereby warned about such a possible change. Any implications of such changes, financial or otherwise, will be of no consequence to Getinge.
        /// </summary>
        [Column("UNITWORKINGTIME")]
        public int? WorkingTime { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a TagsModel instance.
        /// <para />
        /// Foreign key: Basket -> TagsModel.KeyId (TUNIT.UNITBASKET -> TTAGS.TAGSKEYID)
        /// </summary>
        [ForeignKey(nameof(Basket))]
        public TagsModel BasketTags { get; set; }

        /// <summary>
        /// Reference to a ProcessModel instance.
        /// <para />
        /// Foreign key: Batch -> ProcessModel.KeyId (TUNIT.UNITBATCH -> TPROCESS.PROCBATCH)
        /// </summary>
        [ForeignKey(nameof(Batch))]
        public ProcessModel BatchProcess { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: CustKeyId -> CustomerModel.KeyId (TUNIT.UNITCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(CustKeyId))]
        public CustomerModel Cust { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: DryingStokKeyId -> StocksModel.KeyId (TUNIT.UNITDRYINGSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(DryingStokKeyId))]
        public StocksModel DryingStok { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: Error -> TextModel.Number (TUNIT.UNITERROR -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(Error))]
        public TextModel ErrorText { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TUNIT.UNITFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TUNIT.UNITLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: NextUnit -> UnitModel.KeyId (TUNIT.UNITNEXTUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(NextUnit))]
        public UnitModel NextUnitUnit { get; set; }

        /// <summary>
        /// Reference to a OperationDataModel instance.
        /// <para />
        /// Foreign key: OpDKeyId -> OperationDataModel.KeyId (TUNIT.UNITOPDKEYID -> TOPDATA.OPDKEYID)
        /// </summary>
        [ForeignKey(nameof(OpDKeyId))]
        public OperationDataModel OpD { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: PackUserKeyId -> UserModel.KeyId (TUNIT.UNITPACKUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(PackUserKeyId))]
        public UserModel PackUser { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: PrevUnit -> UnitModel.KeyId (TUNIT.UNITPREVUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(PrevUnit))]
        public UnitModel PrevUnitUnit { get; set; }

        /// <summary>
        /// Reference to a ProductModel instance.
        /// <para />
        /// Foreign key: ProdKeyId -> ProductModel.KeyId (TUNIT.UNITPRODKEYID -> TPRODUCT.PRODKEYID)
        /// </summary>
        [ForeignKey(nameof(ProdKeyId))]
        public ProductModel Prod { get; set; }

        /// <summary>
        /// Reference to a RoomModel instance.
        /// <para />
        /// Foreign key: RoomKeyId -> RoomModel.KeyId (TUNIT.UNITROOMKEYID -> TROOM.ROOMKEYID)
        /// </summary>
        [ForeignKey(nameof(RoomKeyId))]
        public RoomModel Room { get; set; }

        /// <summary>
        /// Reference to a SerialModel instance.
        /// <para />
        /// Foreign key: SeriKeyId -> SerialModel.KeyId (TUNIT.UNITSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [ForeignKey(nameof(SeriKeyId))]
        public SerialModel Seri { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: StokKeyId -> StocksModel.KeyId (TUNIT.UNITSTOKKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(StokKeyId))]
        public StocksModel Stok { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of UnitModel instances.
        /// <para />
        /// Foreign key: UnitModel.NextUnit -> KeyId (TUNIT.UNITNEXTUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("NextUnitUnit")]
        public List<UnitModel> NextUnitUnitList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitFastTrackModel instances.
        /// <para />
        /// Foreign key: UnitFastTrackModel.PrevUnit -> KeyId (TUNITFASTTRACK.UFTPREVUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("PrevUnitUnit")]
        public List<UnitFastTrackModel> PrevUnitUnitFastTrackList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitModel instances.
        /// <para />
        /// Foreign key: UnitModel.PrevUnit -> KeyId (TUNIT.UNITPREVUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("PrevUnitUnit")]
        public List<UnitModel> PrevUnitUnitList { get; set; }

        /// <summary>
        /// Reference to a collection of EventModel instances.
        /// <para />
        /// Foreign key: EventModel.RefKeyId -> KeyId (TEVENT.EVNTREFKEYID -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("RefUnit")]
        public List<EventModel> RefUnitEventList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitLocationModel instances.
        /// <para />
        /// Foreign key: UnitLocationModel.RefKeyId -> KeyId (TUNITLCA.ULCAREFKEYID -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("RefUnit")]
        public List<UnitLocationModel> RefUnitUnitLocationList { get; set; }

        /// <summary>
        /// Reference to a collection of PatientConsModel instances.
        /// <para />
        /// Foreign key: PatientConsModel.RefUnitUnit -> KeyId (TPATCONS.PATCOREFUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("RefUnitUnitUnit")]
        public List<PatientConsModel> RefUnitUnitPatientConsList { get; set; }

        /// <summary>
        /// Reference to a collection of PictureRefModel instances.
        /// <para />
        /// Foreign key: PictureRefModel.RefUnitUnit -> KeyId (TPICTREF.PICTREFUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("RefUnitUnitUnit")]
        public List<PictureRefModel> RefUnitUnitPictureRefList { get; set; }

        /// <summary>
        /// Reference to a collection of TagContentModel instances.
        /// <para />
        /// Foreign key: TagContentModel.SplitUnit -> KeyId (TTAGCONTENT.TAGCSPLITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("SplitUnitUnit")]
        public List<TagContentModel> SplitUnitTagContentList { get; set; }

        /// <summary>
        /// Reference to a collection of BatchModel instances.
        /// <para />
        /// Foreign key: BatchModel.Unit -> KeyId (TBATCH.BATUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("UnitUnit")]
        public List<BatchModel> UnitBatchList { get; set; }

        /// <summary>
        /// Reference to a collection of IndicatorUnitModel instances.
        /// <para />
        /// Foreign key: IndicatorUnitModel.UnitUnit -> KeyId (TINDICUNIT.INUNTUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("UnitUnitUnit")]
        public List<IndicatorUnitModel> UnitUnitIndicatorUnitList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitListModel instances.
        /// <para />
        /// Foreign key: UnitListModel.Unit -> KeyId (TUNITLST.ULSTUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("UnitUnit")]
        public List<UnitListModel> UnitUnitListList { get; set; }

        /// <summary>
        /// Reference to a collection of SerialModel instances.
        /// <para />
        /// Foreign key: SerialModel.UnitUnit -> KeyId (TSERIAL.SERIUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("UnitUnitUnit")]
        public List<SerialModel> UnitUnitSerialList { get; set; }

        /// <summary>
        /// Reference to a collection of StandardCommentLinkModel instances.
        /// <para />
        /// Foreign key: StandardCommentLinkModel.UnitUnit -> KeyId (TSTANDARDCOMMENTLINK.SCLNKUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("UnitUnitUnit")]
        public List<StandardCommentLinkModel> UnitUnitStandardCommentLinkList { get; set; }

        /// <summary>
        /// Reference to a collection of TagContentModel instances.
        /// <para />
        /// Foreign key: TagContentModel.UnitUnit -> KeyId (TTAGCONTENT.TAGCUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("UnitUnitUnit")]
        public List<TagContentModel> UnitUnitTagContentList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitFastTrackModel instances.
        /// <para />
        /// Foreign key: UnitFastTrackModel.UnitUnit -> KeyId (TUNITFASTTRACK.UFTUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("UnitUnitUnit")]
        public List<UnitFastTrackModel> UnitUnitUnitFastTrackList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitFastTrackPlanModel instances.
        /// <para />
        /// Foreign key: UnitFastTrackPlanModel.UnitUnit -> KeyId (TUNITFASTTRACKPLAN.UFTPLUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("UnitUnitUnit")]
        public List<UnitFastTrackPlanModel> UnitUnitUnitFastTrackPlanList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitLotInfoModel instances.
        /// <para />
        /// Foreign key: UnitLotInfoModel.UnitUnit -> KeyId (TUNITLOTINFO.ULOTINUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [InverseProperty("UnitUnitUnit")]
        public List<UnitLotInfoModel> UnitUnitUnitLotInfoList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TUNITFASTTRACK table.
    /// This table holds information about currently active fast tracking as well as historical data about units that have been fast tracked.
    /// The table only holds information about fast tracking done via fast track codes.
    /// Units can also be fast tracked due to a fast track plan. This type of fast tracking can be found in the table TUNITFASTTRACKPLAN.
    /// </summary>
    [Table("TUNITFASTTRACK")]
    public class UnitFastTrackModel
    {
        /// <summary>
        /// <para>TUNITFASTTRACK.UFTAUTOINC</para>
        /// Fake &#39;KeyID&#39; field of the table. The field value is automatically assigned by SQL Server using IDENTITY.
        /// </summary>
        [Column("UFTAUTOINC")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Required]
        public int AutoInc { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTCREATED</para>
        /// The date and time the fast track was created/activated.
        /// </summary>
        [Column("UFTCREATED", TypeName = "datetime")]
        [Required]
        public DateTime Created { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTCREATORCUSTKEYID</para>
        /// If a customer user created the fast track this value indicates the customer where it was done.
        /// </summary>
        [Column("UFTCREATORCUSTKEYID")]
        public int? CreatorCustKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTCREATORFACKEYID</para>
        /// Always set to the Factory where the fast track was created. This will also be the Factory that issues any potential invoice for the FT.
        /// </summary>
        [Column("UFTCREATORFACKEYID")]
        public int? CreatorFacKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTCREATORLOCAKEYID</para>
        /// The location where the fast track was created. If the fast track was created by the Job Server then the current location of the unit will be used.
        /// </summary>
        [Column("UFTCREATORLOCAKEYID")]
        [Required]
        public int CreatorLocaKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTCREATORTYPE</para>
        /// Specifies who created the fast track.
        /// Valid values are:
        /// 0 = System (directly)
        /// 1 = System via Job Server
        /// 2 = A Factory user
        /// 3 = A Customer user****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   System    = 0
        ///   JobServer = 1
        ///   FacUser   = 2
        ///   CustUser  = 3
        /// ********************************************************************************
        /// </summary>
        [Column("UFTCREATORTYPE")]
        public FastTrackCreatorType? CreatorType { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTCREATORUSERKEYID</para>
        /// A link to the user that created the fast track. Set to NULL if the system created it.
        /// </summary>
        [Column("UFTCREATORUSERKEYID")]
        public int? CreatorUserKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTENDTIME</para>
        /// The date and time when the fast track was ended
        /// </summary>
        [Column("UFTENDTIME", TypeName = "datetime")]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTENDTYPE</para>
        /// How the fast track was ended.
        /// 0, Normal          : Normal end (as specified in plan/rule/code).
        /// 1, NormalNewUnitHas: Normal end because the new unit created from this one has the same permanent FT
        /// 2, ToRepair        : Fast tracking was eneded because unit was sent to repair.
        /// 3, Expired         : The fast track has been assigned/started longer than the maximum time set in the system.
        /// 4, Cancelled       : Fast tracking was cancelled.
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Normal           = 0
        ///   NormalNewUnitHas = 1
        ///   ToRepair         = 2
        ///   Expired          = 3
        ///   Cancelled        = 4
        /// ********************************************************************************
        /// </summary>
        [Column("UFTENDTYPE")]
        public FastTrackEndType? EndType { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTENDUSERKEYID</para>
        /// KeyID of the user that ended the fast track (if not normal end). Set to null when fast track was ended by system, or normal end.
        /// </summary>
        [Column("UFTENDUSERKEYID")]
        public int? EndUserKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTFTCOKEYID</para>
        /// The assigned code, if any.
        /// </summary>
        [Column("UFTFTCOKEYID")]
        public int? FTCoKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTFTPLKEYID</para>
        /// The assigned plan, if any.
        /// </summary>
        [Column("UFTFTPLKEYID")]
        public int? FTPlKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTFTRUKEYID</para>
        /// This table holds information about currently active fast tracking.
        /// </summary>
        [Column("UFTFTRUKEYID")]
        public int? FTRuKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTINVOICECUSTKEYID</para>
        /// The customer that should be invoiced for the fast track (if any).
        ///
        /// The field can be set in the following ways:
        /// - When it is a customer that is creating the FT (e.g. via the Web Server) the field will be set to this customer and will never be changed.
        /// - If &quot;Invoice with unit&quot; is set and the FT is to be invoiced at the time of Dispatch the field will be set to the customer the unit is dispached to unless it already has a value.
        /// - If the field is null and the FT is to be invoiced to a customer then the Job Server will set the field to the customer the unit is/was dispatched to and then invoice to that customer.
        /// </summary>
        [Column("UFTINVOICECUSTKEYID")]
        public int? InvoiceCustKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTINVOICEDONE</para>
        /// A Boolean field that indicates if invoicing has been done.
        ///
        /// That invoicing is done could just mean that a record has been created in TUNITFASTTRACKINV to record the invoicing. An actual invoice might not be created until the Job Server runs the Fast Tracking invoice job.
        /// </summary>
        [Column("UFTINVOICEDONE")]
        [Required]
        public bool InvoiceDone { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTINVOICEFACKEYID</para>
        /// The factory that should be invoiced for the fast track.
        /// </summary>
        [Column("UFTINVOICEFACKEYID")]
        public int? InvoiceFacKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTINVOICEITEMKEYID</para>
        /// The item that should be used for invoicing.
        /// </summary>
        [Column("UFTINVOICEITEMKEYID")]
        public int? InvoiceItemKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTINVOICEPRICE</para>
        /// The price that should be used for invoicing.
        /// </summary>
        [Column("UFTINVOICEPRICE", TypeName = "Money")]
        public decimal? InvoicePrice { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTINVOICEWITHUNIT</para>
        /// Copied from the Fast Track Code or Plan when the Fast Track is assigned.
        /// </summary>
        [Column("UFTINVOICEWITHUNIT")]
        [Required]
        public bool Invoicewithunit { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTLASTUNITLOCAKEYID</para>
        /// Holds the last location where the unit was checked for fast tracking due to this record. Every time the unit is checked against this record the field is updated to reflect its current location.
        ///
        /// The value is used when determining if a unit needs to be checked for Fast Tracking.
        /// </summary>
        [Column("UFTLASTUNITLOCAKEYID")]
        public int? LastUnitLocaKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTLASTUNITSTATUS</para>
        /// Holds the last status where the unit was checked for fast tracking due to this record. Every time the unit is checked against this record the field is updated to reflect its current status.
        ///
        /// The value is used when determining if a unit needs to be checked for Fast Tracking.
        /// </summary>
        [Column("UFTLASTUNITSTATUS")]
        public int? LastUnitStatus { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTNEXTPLANCHECKTIME</para>
        /// Holds the date and time the unit should be checked for fast tracking next time according to the assigned plan.
        ///
        /// The value is only valid when the following conditions are met:
        /// - The record concerns a plan (i.e. UFTFTPLKEYID &lt;&gt; NULL)
        /// - UFTSTATUS = ftsStarted
        /// - The unit is actually currently fast tracked (i.e. there is a record in TUNITFASTTRACKPLAN where UFTPlEndTime = NULL)
        ///
        /// Under all other circumstances the value should be considered as undefined.
        /// </summary>
        [Column("UFTNEXTPLANCHECKTIME", TypeName = "datetime")]
        public DateTime? NextPlanCheckTime { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTPREVUNIT</para>
        /// Previous unit
        /// </summary>
        [Column("UFTPREVUNIT")]
        public int? PrevUnit { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTSTARTTIME</para>
        /// The date and time UFTSTATUS was set to started. Only valid if the record concerns a fast track code (i.e. UFTFTCOKEYID &lt;&gt; NULL).
        /// The value is used together with the value in FACFTMAXCODEDURATION to determine if the fast track should be ended as expired.
        /// </summary>
        [Column("UFTSTARTTIME", TypeName = "datetime")]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTSTATUS</para>
        /// The status of the Fast Track. An enumerated value that can have the following values:
        /// 0 (Assigned) = Fast Track is assigned but not yet started
        /// 1 (Started)  = Fast Track is started
        /// 2 (Ended)    = Fast Track is ended
        ///
        /// Special for Plans:
        /// Plans immediately have their status set to Started at the same time they are assigned. This does not actually mean that the unit is fast tracked. To examine if the unit is actually fast tracked due to the plan examine the records in TUNITFASTTRACKPLAN.
        /// The only things that can set the status to Ended for a plan are:
        /// - Cancelling the unit (This can potentially &quot;re-start&quot; a plan assigned to a previous unit)
        /// - If it can be determined that an end condition is reached from which the unit cannot again be Fast Tracked due to the plan.
        /// - If the Fast Tracking expires****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Assigned = 0
        ///   Started  = 1
        ///   Ended    = 2
        /// ********************************************************************************
        /// </summary>
        [Column("UFTSTATUS")]
        [Required]
        public FastTrackStatus Status { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACK.UFTUNITUNIT</para>
        /// The unit
        /// </summary>
        [Column("UFTUNITUNIT")]
        public int? UnitUnit { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: CreatorCustKeyId -> CustomerModel.KeyId (TUNITFASTTRACK.UFTCREATORCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatorCustKeyId))]
        public CustomerModel CreatorCust { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: CreatorFacKeyId -> FactoryModel.KeyId (TUNITFASTTRACK.UFTCREATORFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatorFacKeyId))]
        public FactoryModel CreatorFac { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: CreatorLocaKeyId -> LocationModel.KeyId (TUNITFASTTRACK.UFTCREATORLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatorLocaKeyId))]
        public LocationModel CreatorLoca { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatorUserKeyId -> UserModel.KeyId (TUNITFASTTRACK.UFTCREATORUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatorUserKeyId))]
        public UserModel CreatorUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: EndUserKeyId -> UserModel.KeyId (TUNITFASTTRACK.UFTENDUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(EndUserKeyId))]
        public UserModel EndUser { get; set; }

        /// <summary>
        /// Reference to a FastTrackCodeModel instance.
        /// <para />
        /// Foreign key: FTCoKeyId -> FastTrackCodeModel.KeyId (TUNITFASTTRACK.UFTFTCOKEYID -> TFASTTRACKCODE.FTCOKEYID)
        /// </summary>
        [ForeignKey(nameof(FTCoKeyId))]
        public FastTrackCodeModel FTCo { get; set; }

        /// <summary>
        /// Reference to a FastTrackPlanModel instance.
        /// <para />
        /// Foreign key: FTPlKeyId -> FastTrackPlanModel.KeyId (TUNITFASTTRACK.UFTFTPLKEYID -> TFASTTRACKPLAN.FTPLKEYID)
        /// </summary>
        [ForeignKey(nameof(FTPlKeyId))]
        public FastTrackPlanModel FTPl { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: InvoiceCustKeyId -> CustomerModel.KeyId (TUNITFASTTRACK.UFTINVOICECUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(InvoiceCustKeyId))]
        public CustomerModel InvoiceCust { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: InvoiceFacKeyId -> FactoryModel.KeyId (TUNITFASTTRACK.UFTINVOICEFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(InvoiceFacKeyId))]
        public FactoryModel InvoiceFac { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: InvoiceItemKeyId -> ItemModel.KeyId (TUNITFASTTRACK.UFTINVOICEITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(InvoiceItemKeyId))]
        public ItemModel InvoiceItem { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LastUnitLocaKeyId -> LocationModel.KeyId (TUNITFASTTRACK.UFTLASTUNITLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LastUnitLocaKeyId))]
        public LocationModel LastUnitLoca { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: PrevUnit -> UnitModel.KeyId (TUNITFASTTRACK.UFTPREVUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(PrevUnit))]
        public UnitModel PrevUnitUnit { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: UnitUnit -> UnitModel.KeyId (TUNITFASTTRACK.UFTUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(UnitUnit))]
        public UnitModel UnitUnitUnit { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TUNITFASTTRACKPLAN table.
    /// This table holds a record for every time a unit has been Fast Tracked due to its assigned plan.
    /// The table is almost exclusively maintained by the Job Server. Only when a Fast Track is cancelled is the table updated by Admin or Scanner.
    ///
    /// Please see TUNITFASTTRACK for information about fast tracking via fast track codes.
    /// </summary>
    [Table("TUNITFASTTRACKPLAN")]
    public class UnitFastTrackPlanModel
    {
        /// <summary>
        /// <para>TUNITFASTTRACKPLAN.UFTPLAUTOINC</para>
        /// Fake &#39;KeyID&#39; field of the table. The field value is automatically assigned by SQL Server using IDENTITY.
        /// </summary>
        [Column("UFTPLAUTOINC")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Required]
        public int AutoInc { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACKPLAN.UFTPLENDLOCAKEYID</para>
        /// A reference to the location the unit was at when the Fast Track was ended.
        /// </summary>
        [Column("UFTPLENDLOCAKEYID")]
        public int? EndLocaKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACKPLAN.UFTPLENDTIME</para>
        /// The time the Fast Track was ended. If NULL the Fast Track is currently active.
        /// </summary>
        [Column("UFTPLENDTIME", TypeName = "datetime")]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACKPLAN.UFTPLFTPLKEYID</para>
        /// A reference to the Plan causing the Fast Track.
        /// </summary>
        [Column("UFTPLFTPLKEYID")]
        [Required]
        public int FtPlKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACKPLAN.UFTPLSTARTLOCAKEYID</para>
        /// A reference to the location the unit was at when the Fast Track was started.
        /// </summary>
        [Column("UFTPLSTARTLOCAKEYID")]
        public int? StartLocaKeyId { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACKPLAN.UFTPLSTARTTIME</para>
        /// The time the Fast Track was started.
        /// </summary>
        [Column("UFTPLSTARTTIME", TypeName = "datetime")]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACKPLAN.UFTPLUFTAUTOINC</para>
        /// A reference to the record in TUNITFASTTRACK that assigned the Plan to the unit.
        /// </summary>
        [Column("UFTPLUFTAUTOINC")]
        [Required]
        public int UFTAutoInc { get; set; }

        /// <summary>
        /// <para>TUNITFASTTRACKPLAN.UFTPLUNITUNIT</para>
        /// A refenrence to the Fast Tracked unit.
        /// </summary>
        [Column("UFTPLUNITUNIT")]
        [Required]
        public int UnitUnit { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: EndLocaKeyId -> LocationModel.KeyId (TUNITFASTTRACKPLAN.UFTPLENDLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(EndLocaKeyId))]
        public LocationModel EndLoca { get; set; }

        /// <summary>
        /// Reference to a FastTrackPlanModel instance.
        /// <para />
        /// Foreign key: FtPlKeyId -> FastTrackPlanModel.KeyId (TUNITFASTTRACKPLAN.UFTPLFTPLKEYID -> TFASTTRACKPLAN.FTPLKEYID)
        /// </summary>
        [ForeignKey(nameof(FtPlKeyId))]
        public FastTrackPlanModel FtPl { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: StartLocaKeyId -> LocationModel.KeyId (TUNITFASTTRACKPLAN.UFTPLSTARTLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(StartLocaKeyId))]
        public LocationModel StartLoca { get; set; }

        /// <summary>
        /// Reference to a UnitFastTrackModel instance.
        /// <para />
        /// Foreign key: UFTAutoInc -> UnitFastTrackModel.AutoInc (TUNITFASTTRACKPLAN.UFTPLUFTAUTOINC -> TUNITFASTTRACK.UFTAUTOINC)
        /// </summary>
        [ForeignKey(nameof(UFTAutoInc))]
        public UnitFastTrackModel UFTAutoIncUnitFastTrack { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: UnitUnit -> UnitModel.KeyId (TUNITFASTTRACKPLAN.UFTPLUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(UnitUnit))]
        public UnitModel UnitUnitUnit { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TUNITLST table.
    /// Unit List (List of serialized items for the unit)
    ///
    /// This table is maintained by Pack on screen. When pack on screen closes, it will generate a list of sql statements that will be executed when the (new) unit is packed.
    ///
    /// The table indicates what is contained in the unit, serialized items, non-serialized items and packing materials.
    /// Each serial number will have its own entry in this table. Non-serialized items will be listed with their count.
    /// </summary>
    [Table("TUNITLST")]
    public class UnitListModel
    {
        /// <summary>
        /// <para>TUNITLST.ULSTKEYID</para>
        /// KeyID field. Identity
        /// </summary>
        [Column("ULSTKEYID")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTCHECKED</para>
        /// Indicates if this item was checked or not in Operation count window.
        /// </summary>
        [Column("ULSTCHECKED")]
        [Required]
        public bool Checked { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTCOUNT</para>
        /// If RefType is taItem, then this field contains the number of items, otherwise 1
        /// </summary>
        [Column("ULSTCOUNT")]
        public int? Count { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTCPDKEYID</para>
        /// Link to TCOUNTINGPOINTDATA
        /// </summary>
        [Column("ULSTCPDKEYID")]
        public int? CpdKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTCRITICALCOUNT</para>
        /// Critical count of this item. Copied from the composite items list.
        /// </summary>
        [Column("ULSTCRITICALCOUNT")]
        public int? CriticalCount { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTINTERNALPOSITION</para>
        /// For original items ULSTINTERNALPOSITION will match with COMPPOSITION during unit lifecycle. Needed for searching items counts from previous unit when packing new one and Linking with LOT Numbers.
        /// The value is set once at the moment of packing and copied for all the following counting points. It must not change in case composite item content changes during unit life cycle.
        /// For substitute items which do not have ‘position’ concept because they are not a part of the composite item, the value should be unique and must never overleap with position values for original values. So we set it starting 1000000000.
        ///
        /// IMPORTANT: it is forbidden to use values equal or greater than 1000000000 during import
        /// </summary>
        [Column("ULSTINTERNALPOSITION")]
        [Required]
        public int InternalPosition { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTLOCAKEYID</para>
        /// Link to TLOCATIO used for the registration
        /// </summary>
        [Column("ULSTLOCAKEYID")]
        public int? LocaKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTPARENTKEYID</para>
        /// When a substitution article is packed in a unit, a new UNITLST row shall be created.
        /// The Substitution item row shall refer to the original UnitLst Item Line, using this ULSTParentKeyId column.
        /// </summary>
        [Column("ULSTPARENTKEYID")]
        public int? ParentKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTPLACEMENT</para>
        /// Placement if this item. Copied from the composite items list.
        /// </summary>
        [Column("ULSTPLACEMENT")]
        public int? Placement { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTPLOKEYID</para>
        /// Link to TPOSLOCA position used
        /// </summary>
        [Column("ULSTPLOKEYID")]
        public int? PloKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTPOSITION</para>
        /// Indicates visual position of an item within content list of a unit
        /// </summary>
        [Column("ULSTPOSITION")]
        [Required]
        public int Position { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTREFALTITEMKEYID</para>
        /// KeyID of alternative item.
        /// </summary>
        [Column("ULSTREFALTITEMKEYID")]
        public int? RefAltItemKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTREFITEMKEYID</para>
        /// KeyID of item.
        /// For non-serialized items, ULstCount holds number of items
        /// </summary>
        [Column("ULSTREFITEMKEYID")]
        public int? RefItemKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTREFSERIKEYID</para>
        /// SeriKeyID, only if it is a serialized Item
        /// </summary>
        [Column("ULSTREFSERIKEYID")]
        public int? RefSeriKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTREPAIRCOUNT</para>
        /// </summary>
        [Column("ULSTREPAIRCOUNT")]
        public int? RepairCount { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTSERIALTYPE</para>
        /// Holds the serial type.
        /// TSerialType = (stItem,stPacking);
        ///
        /// Indicates if the serial number is from a &#39;normal&#39; item or from a packing material(item).
        /// </summary>
        [Column("ULSTSERIALTYPE")]
        public int? SerialType { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTSTDCOUNT</para>
        /// Standard count of this item. Copied from the composite items list.
        /// </summary>
        [Column("ULSTSTDCOUNT")]
        public int? StdCount { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTSUBSTITUTIONREASON</para>
        /// In case when a substitution article is packed in a unit - this fileld indicates the type of substitution article
        ///
        /// New EnumType: TSubstitutionReason=(None, Identical, Alternative, IdenticalForAlternative)
        ///
        /// null = none
        /// 0 = none
        /// 1 = identical
        /// 2 = alternative
        /// 3 = identical for alternative
        /// </summary>
        [Column("ULSTSUBSTITUTIONREASON")]
        public SubstitutionReason? SubstitutionReason { get; set; }

        /// <summary>
        /// <para>TUNITLST.ULSTUNIT</para>
        /// Number (keyID) of unit.
        /// </summary>
        [Column("ULSTUNIT")]
        [Required]
        public int Unit { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TUNITLST.ULSTLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a UnitListModel instance.
        /// <para />
        /// Foreign key: ParentKeyId -> UnitListModel.KeyId (TUNITLST.ULSTPARENTKEYID -> TUNITLST.ULSTKEYID)
        /// </summary>
        [ForeignKey(nameof(ParentKeyId))]
        public UnitListModel Parent { get; set; }

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: Placement -> TextModel.Number (TUNITLST.ULSTPLACEMENT -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(Placement))]
        public TextModel PlacementText { get; set; }

        /// <summary>
        /// Reference to a PosLocationModel instance.
        /// <para />
        /// Foreign key: PloKeyId -> PosLocationModel.KeyId (TUNITLST.ULSTPLOKEYID -> TPOSLOCA.PLOKEYID)
        /// </summary>
        [ForeignKey(nameof(PloKeyId))]
        public PosLocationModel Plo { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: RefAltItemKeyId -> ItemModel.KeyId (TUNITLST.ULSTREFALTITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(RefAltItemKeyId))]
        public ItemModel RefAltItem { get; set; }

        /// <summary>
        /// Reference to a ItemModel instance.
        /// <para />
        /// Foreign key: RefItemKeyId -> ItemModel.KeyId (TUNITLST.ULSTREFITEMKEYID -> TITEM.ITEMKEYID)
        /// </summary>
        [ForeignKey(nameof(RefItemKeyId))]
        public ItemModel RefItem { get; set; }

        /// <summary>
        /// Reference to a SerialModel instance.
        /// <para />
        /// Foreign key: RefSeriKeyId -> SerialModel.KeyId (TUNITLST.ULSTREFSERIKEYID -> TSERIAL.SERIKEYID)
        /// </summary>
        [ForeignKey(nameof(RefSeriKeyId))]
        public SerialModel RefSeri { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: Unit -> UnitModel.KeyId (TUNITLST.ULSTUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(Unit))]
        public UnitModel UnitUnit { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of UnitListModel instances.
        /// <para />
        /// Foreign key: UnitListModel.ParentKeyId -> KeyId (TUNITLST.ULSTPARENTKEYID -> TUNITLST.ULSTKEYID)
        /// </summary>
        [InverseProperty("Parent")]
        public List<UnitListModel> ParentUnitListList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TUNITLCA table.
    /// </summary>
    [Table("TUNITLCA")]
    public class UnitLocationModel
    {
        /// <summary>
        /// <para>TUNITLCA.ULCACOMMENT</para>
        /// Used for second user approval
        /// The comment enetered when second user approval was perfoormed when packing a unit
        /// Translation = &quot;Comment&quot;
        /// </summary>
        [Column("ULCACOMMENT")]
        [MaxLength(300)]
        public string Comment { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCAERROR</para>
        /// Used when an error is associated with the event/handling. Currently only used when disapproving a single unit after a washer process.
        /// </summary>
        [Column("ULCAERROR")]
        public int? Error { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCAEXTRA</para>
        /// Currently not used.
        /// </summary>
        [Column("ULCAEXTRA")]
        public int? Extra { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCALOCATIONKEYID</para>
        /// The location the unit was scanned at.
        /// </summary>
        [Column("ULCALOCATIONKEYID")]
        [Required]
        public int LocationKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCAPLOKEYID</para>
        /// The Position/Location where the scanning took place
        /// </summary>
        [Column("ULCAPLOKEYID")]
        public int? PloKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCAREFCUSTKEYID</para>
        /// Replacing ULcaExtraKeyID.
        ///
        /// Depending on the content of ULcaWhat this holds a reference to the corresponding table.
        ///
        /// whOut,
        /// whOutDock=CustKeyID
        /// </summary>
        [Column("ULCAREFCUSTKEYID")]
        public int? RefCustKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCAREFKEYID</para>
        /// The unit or stock that was scanned. (Only units are supported/used at this time)
        /// </summary>
        [Column("ULCAREFKEYID")]
        [Required]
        public int RefKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCAREFOPDKEYID</para>
        /// Replacing ULcaExtraKeyID.
        ///
        /// Depending on the content of ULcaWhat this holds a reference to the corresponding table.
        ///
        /// whOperation=OpDKeyID
        /// </summary>
        [Column("ULCAREFOPDKEYID")]
        public int? RefOpdKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCAREFORDKEYID</para>
        /// Replacing ULcaExtraKeyID.
        ///
        /// Depending on the content of ULcaWhat this holds a reference to the corresponding table.
        ///
        /// whOrderPick=OrdKeyID
        /// </summary>
        [Column("ULCAREFORDKEYID")]
        public int? RefOrdKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCAREFPROCBATCH</para>
        /// Replacing ULcaExtraKeyID.
        ///
        /// Depending on the content of ULcaWhat this holds a reference to the corresponding table.
        ///
        /// whSteriPostBatch,
        /// whSteriPreBatch,
        /// whWashPreBatch,
        /// whWashPostBatch,
        /// whPreDisinfect=ProcBatch
        /// </summary>
        [Column("ULCAREFPROCBATCH")]
        public int? RefProcBatch { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCAREFRPAKEYID</para>
        /// </summary>
        [Column("ULCAREFRPAKEYID")]
        public int? RefRpaKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCAREFTYPE</para>
        /// Indicates what is in ULcaRefKEYID. Possible value are:
        ///
        /// Unit
        /// Stocks  = mobile stocks moving around
        ///
        /// (Only units are supported/used at this time)****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   None               = 0
        ///   Product            = 1
        ///   Serial             = 2
        ///   Item               = 3
        ///   Machine            = 4
        ///   Supplier           = 5
        ///   Customer           = 6
        ///   System             = 7
        ///   Unit               = 8
        ///   Text               = 9
        ///   Factory            = 10
        ///   taLot                = 11
        ///   Stocks             = 12
        ///   User               = 13
        ///   Process            = 14
        ///   taLotTransAct        = 15
        ///   Location           = 16
        ///   RushPlan           = 17
        ///   OperationData      = 18
        ///   OperationType      = 19
        ///   ProcedureType      = 20
        ///   Program            = 21
        ///   ProgramRecipe      = 22
        ///   Catalog            = 23
        ///   Patient            = 24
        ///   Order              = 25
        ///   MachineType        = 26
        ///   ProgramGroup       = 27
        ///   RepairType         = 28
        ///   Repair             = 29
        ///   Doctor             = 30
        ///   IndicatorType      = 31
        ///   Room               = 32
        ///   Pack               = 33
        ///   FastTrackCode      = 34
        ///   FastTrackPlan      = 35
        ///   FastTrackGroup     = 36
        ///   WashCheckType      = 37
        ///   InfoOverviewConfig = 38
        ///   Indicator          = 39
        ///   TransportMethod    = 40
        ///   HandlingStep       = 41
        ///   LocationGroup      = 42
        ///   CustSite           = 43
        ///   Tags               = 44
        /// ********************************************************************************
        /// </summary>
        [Column("ULCAREFTYPE")]
        [Required]
        public TableTypes RefType { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCATIME</para>
        /// The time of the scanning
        /// </summary>
        [Column("ULCATIME", TypeName = "datetime")]
        [Required]
        public DateTime Time { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCAUSERKEYID</para>
        /// The user that performed the scanning/action
        /// </summary>
        [Column("ULCAUSERKEYID")]
        [Required]
        public int UserKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLCA.ULCAWHAT</para>
        /// Signifies what happend.
        ///
        /// The value is a whXXXX from TDConst.
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Nothing               = 0
        ///   Pack                  = 1
        ///   SteriPostBatch        = 2
        ///   Out                   = 3
        ///   Return                = 4
        ///   Prepare               = 5
        ///   Wrap                  = 6
        ///   LitePro               = 7
        ///   SteriPreBatch         = 8
        ///   Flash                 = 9
        ///   Location              = 10
        ///   WashPreBatch          = 11
        ///   WashPostBatch         = 12
        ///   Opened                = 13
        ///   Operation             = 14
        ///   Order                 = 15
        ///   Cancel                = 16
        ///   Industry              = 17
        ///   ReturnToFactory       = 18
        ///   OrderPick             = 19
        ///   OutDock               = 20
        ///   PreDisinfect          = 21
        ///   ReturnOrderPick       = 22
        ///   SentToRepair          = 23
        ///   ReceivedFromRepair    = 24
        ///   CancelledRepair       = 25
        ///   InitUnitCreated       = 26
        ///   DispUnitCreated       = 27
        ///   PackStart             = 28
        ///   PrepareStart          = 29
        ///   Transport             = 30
        ///   EndoClean             = 31
        ///   ManualEndoDryingStart = 32
        ///   ManualEndoDryingStop  = 33
        ///   OrderUnPick           = 34
        ///   Last                  = 35
        /// ********************************************************************************
        /// </summary>
        [Column("ULCAWHAT")]
        [Required]
        public WhatType What { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a TextModel instance.
        /// <para />
        /// Foreign key: Error -> TextModel.Number (TUNITLCA.ULCAERROR -> TTEXT.TEXTNUMBER)
        /// </summary>
        [ForeignKey(nameof(Error))]
        public TextModel ErrorText { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocationKeyId -> LocationModel.KeyId (TUNITLCA.ULCALOCATIONKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocationKeyId))]
        public LocationModel Location { get; set; }

        /// <summary>
        /// Reference to a PosLocationModel instance.
        /// <para />
        /// Foreign key: PloKeyId -> PosLocationModel.KeyId (TUNITLCA.ULCAPLOKEYID -> TPOSLOCA.PLOKEYID)
        /// </summary>
        [ForeignKey(nameof(PloKeyId))]
        public PosLocationModel Plo { get; set; }

        /// <summary>
        /// Reference to a CustomerModel instance.
        /// <para />
        /// Foreign key: RefCustKeyId -> CustomerModel.KeyId (TUNITLCA.ULCAREFCUSTKEYID -> TCUST.CUSTKEYID)
        /// </summary>
        [ForeignKey(nameof(RefCustKeyId))]
        public CustomerModel RefCust { get; set; }

        /// <summary>
        /// Reference to a OperationDataModel instance.
        /// <para />
        /// Foreign key: RefOpdKeyId -> OperationDataModel.KeyId (TUNITLCA.ULCAREFOPDKEYID -> TOPDATA.OPDKEYID)
        /// </summary>
        [ForeignKey(nameof(RefOpdKeyId))]
        public OperationDataModel RefOpd { get; set; }

        /// <summary>
        /// Reference to a OrderModel instance.
        /// <para />
        /// Foreign key: RefOrdKeyId -> OrderModel.KeyId (TUNITLCA.ULCAREFORDKEYID -> TORDER.ORDKEYID)
        /// </summary>
        [ForeignKey(nameof(RefOrdKeyId))]
        public OrderModel RefOrd { get; set; }

        /// <summary>
        /// Reference to a ProcessModel instance.
        /// <para />
        /// Foreign key: RefProcBatch -> ProcessModel.KeyId (TUNITLCA.ULCAREFPROCBATCH -> TPROCESS.PROCBATCH)
        /// </summary>
        [ForeignKey(nameof(RefProcBatch))]
        public ProcessModel RefProcBatchProcess { get; set; }

        /// <summary>
        /// Reference to a StocksModel instance.
        /// <para />
        /// Foreign key: RefKeyId -> StocksModel.KeyId (TUNITLCA.ULCAREFKEYID -> TSTOCKS.STOKKEYID)
        /// </summary>
        [ForeignKey(nameof(RefKeyId))]
        public StocksModel RefStocks { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: RefKeyId -> UnitModel.KeyId (TUNITLCA.ULCAREFKEYID -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(RefKeyId))]
        public UnitModel RefUnit { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: UserKeyId -> UserModel.KeyId (TUNITLCA.ULCAUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(UserKeyId))]
        public UserModel User { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TUNITLOTINFO table.
    /// Links a unit number, and optionally an item, to a LOT number.
    /// </summary>
    [Table("TUNITLOTINFO")]
    public class UnitLotInfoModel
    {
        /// <summary>
        /// <para>TUNITLOTINFO.ULOTIN_CREATED</para>
        /// Time the link was created.
        /// </summary>
        [Column("ULOTIN_CREATED", TypeName = "datetime")]
        [Required]
        public DateTime Created { get; set; }

        /// <summary>
        /// <para>TUNITLOTINFO.ULOTIN_CREATEDKEYID</para>
        /// KeyID of the user that created the link.
        /// </summary>
        [Column("ULOTIN_CREATEDKEYID")]
        [Required]
        public int CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLOTINFO.ULOTINBOUNDARTICLENOTE</para>
        /// Free text field for entering bound article note.
        /// Applicable for units and available in Return area of Scanner client and on Unit screen of Admin. Can be defined only when unit is assigned to the operation.
        /// </summary>
        [Column("ULOTINBOUNDARTICLENOTE")]
        public string BoundArticleNote { get; set; }

        /// <summary>
        /// <para>TUNITLOTINFO.ULOTINLOCAKEYID</para>
        /// KeyID of the location where the link was created.
        /// </summary>
        [Column("ULOTINLOCAKEYID")]
        [Required]
        public int LocaKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLOTINFO.ULOTINLOTINKEYID</para>
        /// KeyID of the LOT number that the unit (item) links to.
        /// </summary>
        [Column("ULOTINLOTINKEYID")]
        [Required]
        public int LotInKeyId { get; set; }

        /// <summary>
        /// <para>TUNITLOTINFO.ULOTINULSTPOSITION</para>
        /// Optional.
        /// If set, specifies the position (from TComp table) of the item that the LOT number applies to.
        /// If not set, the linked LOT number just applies to &#39;any item&#39; in the unit. We are using this for example when creating units from external barcodes that contain both product and LOT info.
        /// </summary>
        [Column("ULOTINULSTPOSITION")]
        public int? UlstPosition { get; set; }

        /// <summary>
        /// <para>TUNITLOTINFO.ULOTINUNITUNIT</para>
        /// Unit number of the unit that links to the LOT information.
        /// </summary>
        [Column("ULOTINUNITUNIT")]
        [Required]
        public int UnitUnit { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TUNITLOTINFO.ULOTIN_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a LocationModel instance.
        /// <para />
        /// Foreign key: LocaKeyId -> LocationModel.KeyId (TUNITLOTINFO.ULOTINLOCAKEYID -> TLOCATIO.LOCAKEYID)
        /// </summary>
        [ForeignKey(nameof(LocaKeyId))]
        public LocationModel Loca { get; set; }

        /// <summary>
        /// Reference to a LotInfoModel instance.
        /// <para />
        /// Foreign key: LotInKeyId -> LotInfoModel.KeyId (TUNITLOTINFO.ULOTINLOTINKEYID -> TLOTINFO.LOTINKEYID)
        /// </summary>
        [ForeignKey(nameof(LotInKeyId))]
        public LotInfoModel LotIn { get; set; }

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: UnitUnit -> UnitModel.KeyId (TUNITLOTINFO.ULOTINUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(UnitUnit))]
        public UnitModel UnitUnitUnit { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TUNITWEIGHTINFO table.
    /// This table holds one record for each unit that is created from a product with ProdWeightUsageEnabled = True
    /// </summary>
    [Table("TUNITWEIGHTINFO")]
    public class UnitWeightInfoModel
    {
        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIEXPPACKDISPOSABLE</para>
        /// UWeIPackDisposable plus/minus any changes to the units content made with POS.
        /// </summary>
        [Column("UWEIEXPPACKDISPOSABLE")]
        public int? ExpPackDisposable { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIEXPPACKNONDISPOSABLE</para>
        /// UWeIPackNonDisposable plus/minus any changes to the units content made with POS.
        /// </summary>
        [Column("UWEIEXPPACKNONDISPOSABLE")]
        public int? ExpPackNonDisposable { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIEXPPACKWEIGHT</para>
        /// Sum(UWeIExpectedPackNonDisposable, UWeIExpectedPackDisposable)
        /// </summary>
        [Column("UWEIEXPPACKWEIGHT")]
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public int? ExpPackWeight { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIEXPPRODDISPOSABLE</para>
        /// UWeIProdDisposable plus/minus any changes to the units content made with POS.
        /// </summary>
        [Column("UWEIEXPPRODDISPOSABLE")]
        public int? ExpProdDisposable { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIEXPPRODNONDISPOSABLE</para>
        /// UWeIProdNonDisposable plus/minus any changes to the units content made with POS.
        /// </summary>
        [Column("UWEIEXPPRODNONDISPOSABLE")]
        public int? ExpProdNonDisposable { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIEXPPRODWEIGHT</para>
        /// Sum(UWeIExpectedProdNonDisposable, UWeIExpectedProdDisposable)
        /// </summary>
        [Column("UWEIEXPPRODWEIGHT")]
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public int? ExpProdWeight { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIEXPTOTALWEIGHT</para>
        /// Sum(UWeIExpectedProdWeight, UWeIExpectedPackWeight)
        /// </summary>
        [Column("UWEIEXPTOTALWEIGHT")]
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public int? ExpTotalWeight { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIPACKDISPOSABLE</para>
        /// Taken from packing material at time of packing
        /// </summary>
        [Column("UWEIPACKDISPOSABLE")]
        public int? PackDisposable { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIPACKNONDISPOSABLE</para>
        /// Taken from packing material at time of packing
        /// </summary>
        [Column("UWEIPACKNONDISPOSABLE")]
        public int? PackNonDisposable { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIPACKWEIGHT</para>
        /// Sum(UWeIPackNonDisposable, UWeIPackDisposable)
        /// </summary>
        [Column("UWEIPACKWEIGHT")]
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public int? PackWeight { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIPRODDELTAUNIT</para>
        /// Taken from product at time of packing
        /// </summary>
        [Column("UWEIPRODDELTAUNIT")]
        public int? ProdDeltaUnit { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIPRODDELTAVALUE</para>
        /// Taken from product at time of packing
        /// </summary>
        [Column("UWEIPRODDELTAVALUE")]
        public int? ProdDeltaValue { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIPRODDISPOSABLE</para>
        /// Taken from product at time of packing
        /// </summary>
        [Column("UWEIPRODDISPOSABLE")]
        public int? ProdDisposable { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIPRODNONDISPOSABLE</para>
        /// Taken from product at time of packing
        /// </summary>
        [Column("UWEIPRODNONDISPOSABLE")]
        public int? ProdNonDisposable { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIPRODWEIGHT</para>
        /// Sum(UWeIProdNonDisposable, UWeIProdDisposable)
        /// </summary>
        [Column("UWEIPRODWEIGHT")]
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public int? ProdWeight { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEITOTALWEIGHT</para>
        /// Sum(UWeIProdWeight, UWeIPackWeight)
        /// </summary>
        [Column("UWEITOTALWEIGHT")]
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        public int? TotalWeight { get; set; }

        /// <summary>
        /// <para>TUNITWEIGHTINFO.UWEIUNITUNIT</para>
        /// Reference to TUNIT
        /// </summary>
        [Column("UWEIUNITUNIT")]
        [Required]
        public int UnitUnit { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UnitModel instance.
        /// <para />
        /// Foreign key: UnitUnit -> UnitModel.KeyId (TUNITWEIGHTINFO.UWEIUNITUNIT -> TUNIT.UNITUNIT)
        /// </summary>
        [ForeignKey(nameof(UnitUnit))]
        public UnitModel UweIUnitUnit { get; set; }

        #endregion One-to-one relationships
    }

    /// <summary>
    /// Model representing the TUSER table.
    /// This table holds information about users in T-DOC.
    ///
    /// *****************************************************************************
    /// WHEN CHANGING FIELDS REMEMBER TO UPDATE uInitTDOCDB.pas CheckDefaultUsers!
    /// *****************************************************************************
    /// </summary>
    [Table("TUSER")]
    public class UserModel
    {
        /// <summary>
        /// <para>TUSER.USERKEYID</para>
        /// The internal database KeyID.
        /// </summary>
        [Column("USERKEYID")]
        [Key]
        [Required]
        public int KeyId { get; set; }

        /// <summary>
        /// <para>TUSER.USER_CREATED</para>
        /// </summary>
        [Column("USER_CREATED", TypeName = "datetime")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// <para>TUSER.USER_CREATEDKEYID</para>
        /// </summary>
        [Column("USER_CREATEDKEYID")]
        public int? CreatedKeyId { get; set; }

        /// <summary>
        /// <para>TUSER.USER_MODIFIED</para>
        /// </summary>
        [Column("USER_MODIFIED", TypeName = "datetime")]
        public DateTime? Modified { get; set; }

        /// <summary>
        /// <para>TUSER.USER_MODIFIEDKEYID</para>
        /// </summary>
        [Column("USER_MODIFIEDKEYID")]
        public int? ModifiedKeyId { get; set; }

        /// <summary>
        /// <para>TUSER.USERBARCODE</para>
        /// External barcode.
        /// </summary>
        [Column("USERBARCODE")]
        [MaxLength(150)]
        public string Barcode { get; set; }

        /// <summary>
        /// <para>TUSER.USERCHANGEPASSWORD</para>
        /// If true the user must change password at next login. This is set if an administrator changes the users password.
        /// </summary>
        [Column("USERCHANGEPASSWORD")]
        [Required]
        public bool ChangePassword { get; set; }

        /// <summary>
        /// <para>TUSER.USEREMAIL</para>
        /// Email address of user.
        /// </summary>
        [Column("USEREMAIL")]
        [MaxLength(255)]
        public string Email { get; set; }

        /// <summary>
        /// <para>TUSER.USERFACKEYID</para>
        /// If the user is Factory Bound this field holds the primary factory of the user.
        /// This field should never be NULL.
        /// See also the TFACUSER table.
        /// </summary>
        [Column("USERFACKEYID")]
        [Required]
        public int FacKeyId { get; set; }

        /// <summary>
        /// <para>TUSER.USERFAILEDLOGINS</para>
        /// Number of consecutive failed logins. The value is reset when a correct login is performed. If too many failed logins (defined in SysData.MaxFailedLogins), the account is blocked.
        /// </summary>
        [Column("USERFAILEDLOGINS")]
        public int? FailedLogins { get; set; }

        /// <summary>
        /// <para>TUSER.USERINITIALS</para>
        /// Initials of the user.
        /// </summary>
        [Column("USERINITIALS")]
        [Required, MaxLength(100)]
        public string Initials { get; set; }

        /// <summary>
        /// <para>TUSER.USERMOBILENUMBER</para>
        /// Telephone number of the user.
        /// </summary>
        [Column("USERMOBILENUMBER")]
        [MaxLength(100)]
        public string MobileNumber { get; set; }

        /// <summary>
        /// <para>TUSER.USERNAME</para>
        /// The name of the user.
        /// </summary>
        [Column("USERNAME")]
        [Required, MaxLength(100)]
        public string Name { get; set; }

        /// <summary>
        /// <para>TUSER.USERPASSWORD</para>
        /// The users password. If first char is #, the password is encrypted.
        /// </summary>
        [Column("USERPASSWORD")]
        [MaxLength(64)]
        public string Password { get; set; }

        /// <summary>
        /// <para>TUSER.USERPASSWORDCHANGED</para>
        /// Last date/time the password was changed. If defined (in SysData.MaxPasswordAge) the user must change password before this age has reached.
        /// </summary>
        [Column("USERPASSWORDCHANGED", TypeName = "datetime")]
        public DateTime? PasswordChanged { get; set; }

        /// <summary>
        /// <para>TUSER.USERPASSWORDHISTORY</para>
        /// Holds old passwords so that the user cannot reuse these.
        /// The number of passwords stored are SysPasswordHistory.
        /// </summary>
        [Column("USERPASSWORDHISTORY")]
        public string PasswordHistory { get; set; }

        /// <summary>
        /// <para>TUSER.USERPASSWORDSETTINGS</para>
        /// </summary>
        [Column("USERPASSWORDSETTINGS")]
        [Required]
        public int PasswordSettings { get; set; }

        /// <summary>
        /// <para>TUSER.USERPROFILEKEYID</para>
        /// Ref. to the users profile (TProfile).
        /// </summary>
        [Column("USERPROFILEKEYID")]
        [Required]
        public int ProfileKeyId { get; set; }

        /// <summary>
        /// <para>TUSER.USERPUBLICPWSALT</para>
        /// </summary>
        [Column("USERPUBLICPWSALT")]
        [MaxLength(64)]
        public string PublicPWSalt { get; set; }

        /// <summary>
        /// <para>TUSER.USERSTATUS</para>
        /// The status (active or not) of the user. Valid values are:
        ///
        ///   stNormal = 10;
        ///   stDead   = 90;
        /// </summary>
        [Column("USERSTATUS")]
        [Required]
        public int Status { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF01</para>
        /// </summary>
        [Column("USERUF01")]
        [MaxLength(100)]
        public string UserField01 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF02</para>
        /// </summary>
        [Column("USERUF02")]
        [MaxLength(100)]
        public string UserField02 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF03</para>
        /// </summary>
        [Column("USERUF03")]
        [MaxLength(100)]
        public string UserField03 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF04</para>
        /// </summary>
        [Column("USERUF04")]
        [MaxLength(100)]
        public string UserField04 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF05</para>
        /// </summary>
        [Column("USERUF05")]
        [MaxLength(100)]
        public string UserField05 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF06</para>
        /// </summary>
        [Column("USERUF06")]
        [MaxLength(100)]
        public string UserField06 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF07</para>
        /// </summary>
        [Column("USERUF07")]
        [MaxLength(100)]
        public string UserField07 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF08</para>
        /// </summary>
        [Column("USERUF08")]
        [MaxLength(100)]
        public string UserField08 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF09</para>
        /// </summary>
        [Column("USERUF09")]
        [MaxLength(100)]
        public string UserField09 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF10</para>
        /// </summary>
        [Column("USERUF10")]
        [MaxLength(100)]
        public string UserField10 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF11</para>
        /// </summary>
        [Column("USERUF11")]
        [MaxLength(100)]
        public string UserField11 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF12</para>
        /// </summary>
        [Column("USERUF12")]
        [MaxLength(100)]
        public string UserField12 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF13</para>
        /// </summary>
        [Column("USERUF13")]
        [MaxLength(100)]
        public string UserField13 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF14</para>
        /// </summary>
        [Column("USERUF14")]
        [MaxLength(100)]
        public string UserField14 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF15</para>
        /// </summary>
        [Column("USERUF15")]
        [MaxLength(100)]
        public string UserField15 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF16</para>
        /// </summary>
        [Column("USERUF16")]
        [MaxLength(100)]
        public string UserField16 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF17</para>
        /// </summary>
        [Column("USERUF17")]
        [MaxLength(100)]
        public string UserField17 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF18</para>
        /// </summary>
        [Column("USERUF18")]
        [MaxLength(100)]
        public string UserField18 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF19</para>
        /// </summary>
        [Column("USERUF19")]
        [MaxLength(100)]
        public string UserField19 { get; set; }

        /// <summary>
        /// <para>TUSER.USERUF20</para>
        /// </summary>
        [Column("USERUF20")]
        [MaxLength(100)]
        public string UserField20 { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: CreatedKeyId -> UserModel.KeyId (TUSER.USER_CREATEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(CreatedKeyId))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a FactoryModel instance.
        /// <para />
        /// Foreign key: FacKeyId -> FactoryModel.KeyId (TUSER.USERFACKEYID -> TFACTORY.FACKEYID)
        /// </summary>
        [ForeignKey(nameof(FacKeyId))]
        public FactoryModel Fac { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: ModifiedKeyId -> UserModel.KeyId (TUSER.USER_MODIFIEDKEYID -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(ModifiedKeyId))]
        public UserModel ModifiedUser { get; set; }

        /// <summary>
        /// Reference to a ProfileModel instance.
        /// <para />
        /// Foreign key: ProfileKeyId -> ProfileModel.KeyId (TUSER.USERPROFILEKEYID -> TPROFILE.PROFKEYID)
        /// </summary>
        [ForeignKey(nameof(ProfileKeyId))]
        public ProfileModel Profile { get; set; }

        #endregion One-to-one relationships

        #region One-to-many relationships

        /// <summary>
        /// Reference to a collection of ProcessModel instances.
        /// <para />
        /// Foreign key: ProcessModel.ApproveUserKeyId -> KeyId (TPROCESS.PROCAPPROVEUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [InverseProperty("ApproveUser")]
        public List<ProcessModel> ApproveUserProcessList { get; set; }

        /// <summary>
        /// Reference to a collection of ProcessModel instances.
        /// <para />
        /// Foreign key: ProcessModel.DisapproveUserKeyId -> KeyId (TPROCESS.PROCDISAPPROVEUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [InverseProperty("DisapproveUser")]
        public List<ProcessModel> DisapproveUserProcessList { get; set; }

        /// <summary>
        /// Reference to a collection of ProcessModel instances.
        /// <para />
        /// Foreign key: ProcessModel.InitiatorUserKeyId -> KeyId (TPROCESS.PROCINITIATORUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [InverseProperty("InitiatorUser")]
        public List<ProcessModel> InitiatorUserProcessList { get; set; }

        /// <summary>
        /// Reference to a collection of EventModel instances.
        /// <para />
        /// Foreign key: EventModel.RefKeyId -> KeyId (TEVENT.EVNTREFKEYID -> TUSER.USERKEYID)
        /// </summary>
        [InverseProperty("RefUser")]
        public List<EventModel> RefUserEventList { get; set; }

        /// <summary>
        /// Reference to a collection of PictureRefModel instances.
        /// <para />
        /// Foreign key: PictureRefModel.RefUserKeyId -> KeyId (TPICTREF.PICTREFUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [InverseProperty("RefUser")]
        public List<PictureRefModel> RefUserPictureRefList { get; set; }

        /// <summary>
        /// Reference to a collection of CustomerUsersModel instances.
        /// <para />
        /// Foreign key: CustomerUsersModel.UserKeyId -> KeyId (TCUSTUSER.CUUSERUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [InverseProperty("User")]
        public List<CustomerUsersModel> UserCustomerUsersList { get; set; }

        /// <summary>
        /// Reference to a collection of UnitLocationModel instances.
        /// <para />
        /// Foreign key: UnitLocationModel.UserKeyId -> KeyId (TUNITLCA.ULCAUSERKEYID -> TUSER.USERKEYID)
        /// </summary>
        [InverseProperty("User")]
        public List<UnitLocationModel> UserUnitLocationList { get; set; }

        #endregion One-to-many relationships
    }

    /// <summary>
    /// Model representing the TUSERFIELDDEFINITION table.
    /// This table holds information about User Field Definition in T-DOC.
    /// </summary>
    [Table("TUSERFIELDDEFINITION")]
    public class UserFieldDefModel
    {
        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFD_CREATED</para>
        /// The user who created the User Field Definition
        /// </summary>
        [Column("UFD_CREATED")]
        [Required]
        public int Created { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFD_CREATEDDATE</para>
        /// The date time the Field Definition was created
        /// </summary>
        [Column("UFD_CREATEDDATE", TypeName = "datetime")]
        [Required]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFD_MODIFIED</para>
        /// The user who last modified the User Field Definition
        /// </summary>
        [Column("UFD_MODIFIED")]
        [Required]
        public int Modified { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFD_MODIFIEDDATE</para>
        /// The date/time the Field Definition was last updated.
        /// </summary>
        [Column("UFD_MODIFIEDDATE", TypeName = "datetime")]
        [Required]
        public DateTime ModifiedDate { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFDACTIVE</para>
        /// If the field is active, it will be shown various places in TAdmin and the Scanner Client.
        /// </summary>
        [Column("UFDACTIVE")]
        [Required]
        public bool Active { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFDAUTOINC</para>
        /// Primary Key - Autoincrement Field.
        /// </summary>
        [Column("UFDAUTOINC")]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Required]
        public int AutoInc { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFDCOLUMNNAME</para>
        /// The &quot;Caption&quot;/Display name for the User Field
        /// </summary>
        [Column("UFDCOLUMNNAME")]
        [MaxLength(100)]
        public string ColumnName { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFDCOLUMNTYPE</para>
        /// The User Field Type.
        /// 0 = Text
        /// 1 = Numeric (Integer)
        /// 2 = Lookup list (Fixed List) (combobox.style = csDropDownList)
        /// 3 = Lookup list (combobox.style = csDropDown)
        /// 4 = Show Field as a checkbox, with 3 possible values:
        ///     1st = False
        ///     2nd = True
        ///     3rd = Unchecked
        /// 5 = Date Picker.
        /// 6 = Date Time Picker
        /// ****** Enumeration help (Auto generated. Some values might never be used) ******
        ///   Lite     = 0
        ///   Label    = 1
        ///   Cycle    = 2
        ///   CyclePro = 3
        ///   Admin    = 4
        /// ********************************************************************************
        /// </summary>
        [Column("UFDCOLUMNTYPE")]
        [Required]
        public AdminType ColumnType { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFDDATEFORMAT</para>
        /// If the user field is of type Date (or DateTime), this is how the date format should be stored in the database.
        /// </summary>
        [Column("UFDDATEFORMAT")]
        [MaxLength(20)]
        public string DateFormat { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFDFIELDNO</para>
        /// The User Field No.
        ///
        /// Eg. for TCUST: 1 means the CUSTUF01 Field.
        /// </summary>
        [Column("UFDFIELDNO")]
        [Required]
        public int FieldNo { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFDLISTVALUES</para>
        /// When the field is a Combobox type, it contains a list of all items in the combobox.
        /// When the field is a CheckBox type, it contains the values for:
        ///   Line1: False
        ///   Line2: True
        ///   Line3: Unchecked.
        /// </summary>
        [Column("UFDLISTVALUES")]
        public string ListValues { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFDMAXLENGTH</para>
        /// When the Field Type is a text field, a max length can be stored here.
        /// Remark: If the values is null, no Max length should apply.
        /// </summary>
        [Column("UFDMAXLENGTH")]
        public int? MaxLength { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFDMINLENGTH</para>
        /// When the Field Type is a text field, a min length can be stored here.
        /// Remark: If the values is null, no Min length should apply.
        /// </summary>
        [Column("UFDMINLENGTH")]
        public int? MinLength { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFDTABLENAME</para>
        /// The table for which the User Field Definition is for (eg. TCUST).
        /// </summary>
        [Column("UFDTABLENAME")]
        [Required, MaxLength(100)]
        public string TableName { get; set; }

        /// <summary>
        /// <para>TUSERFIELDDEFINITION.UFDTIMEFORMAT</para>
        /// If the user field is of type Datetime, this is how the time part of the datetime format should be stored in the database.
        /// </summary>
        [Column("UFDTIMEFORMAT")]
        [MaxLength(20)]
        public string TimeFormat { get; set; }

        #region One-to-one relationships

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: Created -> UserModel.KeyId (TUSERFIELDDEFINITION.UFD_CREATED -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(Created))]
        public UserModel CreatedUser { get; set; }

        /// <summary>
        /// Reference to a UserModel instance.
        /// <para />
        /// Foreign key: Modified -> UserModel.KeyId (TUSERFIELDDEFINITION.UFD_MODIFIED -> TUSER.USERKEYID)
        /// </summary>
        [ForeignKey(nameof(Modified))]
        public UserModel ModifiedUser { get; set; }

        #endregion One-to-one relationships
    }
}